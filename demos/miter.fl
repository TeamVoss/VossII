load "ste.fl";


// Code to create a miter circuit for two pexlifs
//                          Ckt p1
//                        +------+                     
//      i_1 ---------*----|   o_1|---------------+----+      +----+        
//                   |    |      |               | == |------|    |           
//                   |    |      |    +----------+----+      |    |    
//      i_2 -------*-|----|   o_2|----|----------+----+      |    |
//                 | |    |      |    |          | == |------| A  |
//      ...        | |    |      |    |  +-------+----+      | N  |----- eq
//                 | |    |      |... |  |       ...         | D  |      
//      i_m --*----|-|----|   o_n|----|--|-------+----+      |    |
//            |    | |    |      |    |  |       | == |------|    | 
//            |    | |    |      |    |  |   +---+----+      +----+
//            |    | |    +------+    |  |   |                
//            |    | |     Ckt p2     |  |   |                
//            |    | |    +------+    |  |   |
//            |    | +----|  o_1 |----*  |   |
//            |    +------|  o_2 |-------*   |
//            |           |      | ...       |
//            +-----------|  o_n |-----------+
//                        +------+       
let mk_miter p1 p2 =
    val (PINST n1 a1 l1 fa_inps1 fa_outs1 ints1 chs1) = p1 in
    val (PINST n2 a2 l2 fa_inps2 fa_outs2 ints2 chs2) = p2 in
    // Check for same inputs/outputs
    let inps1 = setify (md_expand_vectors (flatmap snd fa_inps1)) in
    let inps2 = setify (md_expand_vectors (flatmap snd fa_inps2)) in
    let d = inps1 subtract inps2 in
    d != [] => eprintf "Input mismatch: %S in pexlif 1 but not in pexlif 2" d |
    let d = inps2 subtract inps1 in
    d != [] => eprintf "Input mismatch: %S in pexlif 2 but not in pexlif 1" d |
    let outs1 = setify (md_expand_vectors (flatmap snd fa_outs1)) in
    let outs2 = setify (md_expand_vectors (flatmap snd fa_outs2)) in
    let d = outs1 subtract outs2 in
    d != [] => eprintf "Output mismatch: %S in pexlif 1 but not in pexlif 2" d |
    let d = outs2 subtract outs1 in
    d != [] => eprintf "Output mismatch: %S in pexlif 2 but not in pexlif 1" d |
    // Same inputs and outputs
    // Now rename the outputs
    let p1' =
	let fa_outs1' = map (\(f,as). f,(map (sprintf "P1_%s") as)) fa_outs1 in
	PINST n1 a1 l1 fa_inps1 fa_outs1' ints1 chs1
    in
    let p2' =
	let fa_outs2' = map (\(f,as). f,(map (sprintf "P2_%s") as)) fa_outs2 in
	PINST n2 a2 l2 fa_inps2 fa_outs2' ints2 chs2
    in
    val (eq_nd, eqs) =
	let vname = sprintf "_eq[%d:0]" (length outs1 -1) then
	let nds = md_expand_vector vname then
	vname, (map (\n. W_VAR 1 n) nds)
    in
    let mk_eq out_i eq_i = 
	let o1 = W_VAR 1 ("P1_"^out_i) in
	let o2 = W_VAR 1 ("P2_"^out_i) in
	eq_i <- o1 '=' o2
    in
    let eq_pexlifs = map2 mk_eq outs1 eqs in
    let and_pexlif = (W_VAR 1 "_OK_") <- AND_n eqs then
    let pfn = "draw_hier miter" in
    let fa_inps = map (\n. n,[n]) (md_extract_vectors inps1) in
    let fa_outs = [("_OK_", ["_OK_"])] in
    let o1s = map (\n."P1_"^n) outs1 in
    let o2s = map (\n."P2_"^n) outs2 in
    let ints = eq_nd:(md_extract_vectors (o1s @ o2s)) in
    let children = p1' : p2' : and_pexlif : eq_pexlifs in
    let mpexlif = PINST pfn [] F fa_inps fa_outs ints (P_HIER children) in
    let mant = map (\n. T,n,variable n,0,1) inps1 in
    mpexlif, mant
;




// Simple example to compare two combinational pexlifs
// and debug the resulting counter example.


TYPE "byte" 8;

let tst1 =
    byte_input  a b.
    byte_output diff.
    byte_internal mid.
    CELL "tst1" [
	mid <- a '-' b,
	diff <- (IF (mid '>=' '0) THEN mid ELSE ('-1 '*' mid))
];

let tst2 =
    byte_input  a b.
    byte_output diff.
    CELL "tst2" [
	diff <- (IF (a '>=' b) THEN (a '-' b) ELSE (b '-' a))
];

val (m,mant) = mk_miter (tst1 'a 'b 'diff) (tst2 'a 'b 'diff);

let vis = STE_debug (pexlif2fsm m);

let res = STE "-e" vis [] mant [(T,"_OK_",T,0,1)] [];
let ok = get_ste_result res "";
ok;

let cex = example F (NOT ok);

STE "-e" vis [] (substitute cex mant) [(T,"_OK_",T,0,1)] [];



// Second attempt

let msb v = hd (tobits v);

let tst3 =
    byte_input  a b.
    byte_output diff.
    byte_internal mid.
    CELL "tst1" [
	mid <- a '-' b,
	diff <- (IF (msb mid) THEN ('-1 '*' mid) ELSE mid)
];

val (m,mant) = mk_miter (tst3 'a 'b 'diff) (tst2 'a 'b 'diff);

let vis = STE_debug (pexlif2fsm m);

let res = STE "-e" vis [] mant [(T,"_OK_",T,0,1)] [];
let ok = get_ste_result res "";
ok;

let cex = example F (NOT ok);

STE "-e" vis [] (substitute cex mant) [(T,"_OK_",T,0,1)] [];

