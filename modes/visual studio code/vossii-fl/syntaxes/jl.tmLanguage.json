{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "jl",
	"fileTypes": [".jl", ".intf"],
	"patterns": [
		{ "include": "#name" },
		{ "include": "#vars" },
		{ "include": "#method" },
		{ "include": "#macro" },
		{ "include": "#use" },
		{ "include": "#label" },
		{ "include": "#goto" },
		{ "include": "#do" },
		{ "include": "#keywords" },
		{ "include": "#functions" },
		{ "include": "#operators" },
		{ "include": "#numbers" },
		{ "include": "#strings" },
		{ "include": "#comments" }
	],
	"repository": {
		"name" : {
			"match": "(name)\\s+([A-Za-z_][A-Za-z_0-9]*)(;)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "constant.character.escape.jl" },
				"3": { "name": "keyword.other.jl" }
			}
		},
		"vars" : {
			"match": "\\b(input|output|var|transient)\\s+([A-Za-z_][A-Za-z_0-9]*|\\?)\\s+((?:[A-Za-z_][A-Za-z_0-9]*\\s*,\\s*)*)([A-Za-z_][A-Za-z_0-9]*)\\s*(;)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "support.class.jl" },
				"3": {
					"name": "variable.parameter.jl",
					"patterns": [
						{"match" : ",", "name":"keyword.other.jl"}
					]
				},
				"4": { "name": "variable.parameter.jl"},
				"5": { "name": "keyword.other.jl" }
			}
		},
		"method" : {
			"match": "\\b(method)\\s+([A-Za-z_][A-Za-z_0-9]*)\\s*(:)\\s*((?:\\(\\))|(?:[A-Za-z_][A-Za-z_0-9]*)|\\?|(?:\\((?:(?:[A-Za-z_][A-Za-z_0-9]*|\\?)\\s*,\\s*)*(?:[A-Za-z_][A-Za-z_0-9]*|\\?)\\s*\\)))\\s*(->)\\s*((?:\\(\\))|(?:[A-Za-z_][A-Za-z_0-9]*)|\\?|(?:\\((?:(?:[A-Za-z_][A-Za-z_0-9]*|\\?)\\s*,\\s*)*(?:[A-Za-z_][A-Za-z_0-9]*|\\?)\\s*\\)))\\s*(;)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "constant.character.escape.jl" },
				"3": { "name": "keyword.other.jl" },
				"4": {
					"name": "support.class.jl",
					"patterns": [
						{"match" : "[,\\(\\)]", "name":"keyword.other.jl"}
					]
				},
				"5": { "name": "keyword.other.jl" },
				"6": {
					"name": "support.class.jl",
					"patterns": [
						{"match" : "[,\\(\\)]", "name":"keyword.other.jl"}
					]
				},
				"7": { "name": "keyword.other.jl" }
			}
		},
		"macro" : {
			"match": "\\b(macro|flmacro)\\s+([A-Za-z_][A-Za-z_0-9]*)\\s*((?:\\(\\))|(?:[A-Za-z_][A-Za-z_0-9]*)|(?:\\((?:[A-Za-z_][A-Za-z_0-9]*\\s*,\\s*)*[A-Za-z_][A-Za-z_0-9]*\\)))?\\s*(=)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "constant.character.escape.jl" },
				"3": {
					"name": "variable.parameter.jl",
					"patterns": [
						{"match" : "[,\\(\\)]", "name":"keyword.other.jl"}
					]
				},
				"4": { "name": "keyword.other.jl" }
			}
		},
		"use" : {
			"match": "\\b(use)\\s*([A-Za-z_][A-Za-z_0-9]*)\\s*(;)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "constant.character.escape.jl" },
				"3": { "name": "keyword.other.jl" }
			}
		},
		"label" : {
			"match": "([A-Za-z_][A-Za-z_0-9]*)\\s*(:)",
			"captures": {
				"1": { "name": "support.function.jl" },
				"2": { "name": "keyword.other.jl" }
			}
		},
		"goto" : {
			"match": "\\b(goto)\\s*([A-Za-z_][A-Za-z_0-9]*)\\s*(;)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "support.function.jl" },
				"3": { "name": "keyword.other.jl" }
			}
		},
		"do" : {
			"match": "(do)\\s+([A-Za-z_][A-Za-z_0-9]*)",
			"captures": {
				"1": { "name": "keyword.control.jl" },
				"2": { "name": "constant.character.escape.jl" }
			}
		},
		"keywords": {
			"match": "\\bif\\b|\\bthen\\b|#include\\b|\\belse\\b|\\bdone\\b|--%<--",
			"name":"keyword.control.jl"
		},
		"functions": {
			"match": "([A-Za-z_][A-Za-z_0-9]*)\\s*(\\()",
			"captures": {
				"1": { "name": "string.regexp.jl" },
				"2": { "name": "keyword.other.jl" }
			}
		},
		"operators": {
			"match": "[;,\\(\\){}+\\-\\*&^\\|=!><~]",
			"name":"keyword.other.jl"
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?:(?<=\\W)|^)0[xX][0-9A-Fa-f]+",
					"name": "constant.numeric.jl"
				},
				{
					"match": "(?:(?<=\\W)|^)0b[01]+",
					"name": "constant.numeric.jl"
				},
				{
					"match": "(?:(?<=\\W)|^)(\\d+)",
					"name": "constant.numeric.fl"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.jl",
			"begin": "\"",
			"end": "\""
		},
		"comments": {
			"name": "comment.line.jl",
			"begin": "//",
			"end": "\n",
			"patterns": [{
				"name": "invalid.illegal.jl",
				"match": "\\b(TODO|FIXME)\\b"
			}]
		}
	},
	"scopeName": "source.jl"
}
