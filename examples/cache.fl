load "examples/isomatch.fl";
load "ste.fl";

//------------------------------------------------------------------------------
// ...
//------------------------------------------------------------------------------

// Load cache source.
load "examples/cache/cache.fl";
let g_pex = p_CacheMem;
let p_pex = p_CacheLine;

//Emit_pexlif "puzzle.txt" g_pex;
//Emit_pexlif "piece.txt" p_pex;

//--------------------------------------------------------------------------------

// Pick comparison method.
let cmp = pex_fp;

// Debug run.
DBG_isomatch cmp g_pex p_pex;

// Normal run.
// let sc_g  = adj_build g_pex;                 // Create haystack schemes
// let adj_g = adjacency_matrix sc_g;           // and adj. matrix.
// let sc_p  = adj_build p_pex;                 // Create needle schemes
// let adj_p = adjacency_matrix sc_p;           // and adj. matrix.
// let iso   = isomatch_matrix sc_g sc_p cmp;   // Create iso. matrix.
// let res   = recurse iso adj_g adj_p;         // Perform isomatch.
// (res fseq print "Finished matching.\n");
// //
// let ss = recover_all res adj_p sc_p sc_g;
// (ss fseq print "Finished recovering substitutions.\n");
// //
// print_matches res ss sc_p sc_g;

//------------------------------------------------------------------------------
// Fin.