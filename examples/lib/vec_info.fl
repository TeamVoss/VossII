//==============================================================================
//
// Work in progress.
//
//==============================================================================

// ...
let range_length r = iabs (fst r - snd r) + 1;

// ...
let range_tl r = range_length r - 1 == 1 =>
        INDEX (snd r) |
        RANGE (fst r + 1, snd r);

// ...
let range_drop n r = range_length r - n == 1 =>
        INDEX (snd r) |
        RANGE (fst r + n, snd r);

//------------------------------------------------------------------------------

// ...
//  align_index::index->index->(index#(index opt)#(index opt))
let
    align_index (INDEX x) (INDEX y) = (INDEX y, NONE, NONE)
/\  align_index (INDEX x) (RANGE y) = (INDEX (fst y), NONE, SOME (range_tl y))
/\  align_index (RANGE x) (INDEX y) = (INDEX y, SOME (range_tl x), NONE)
/\  align_index (RANGE x) (RANGE y) =
        let u = range_length x in
        let v = range_length y in
        u = v => (RANGE y, NONE, NONE) |
        u < v => (RANGE (fst y, fst y+u-1), NONE, SOME (range_drop u y)) |
        (RANGE y, SOME (range_drop v x), NONE)
;

// ...
// align_index_with::index->(index list)->((index list)#(index opt)#(index list))
let
    align_index_with x ys =
        letrec
            align_i x []     rs = (rs, SOME x, [])
        /\  align_i x (y:ys) rs =
                val (r,u,l) = align_index x y in
                has_value u => let i = get_value u in align_i i ys (r:rs)  |
                has_value l => let i = get_value l in (r:rs, NONE, i:ys) |
                (r:rs, NONE, ys)
        in
        val (rs,u,l) = align_i x ys [] in (rev rs,u,l)
;

// ...
//  align_indices_with::(index list)->(index list)->((index mat)#(index list)#(index list))
let
    align_indices_with xs ys =
        letrec
            align_is []     ys ss = (ss, [], ys)
        /\  align_is (x:xs) ys ss =
                val (r,u,l) = align_index_with x ys in
                has_value u => let i = get_value u in (r:ss, i:xs, []) |
                nonempty l  => align_is xs l (r:ss) |
                (r:ss, xs, [])
        in
        val (r,u,l) = align_is xs ys [] in (rev r,u,l)
;

// ...
//  align_entities::(entity list)->(entity list)->(entity list)
let
    align_entities es1 es2 =
        letrec
            expand _ []           = []
        /\  expand c (INDEX i:xs) = INDEX c : expand (c+1) xs
        /\  expand c (RANGE r:xs) = let s = range_length r in RANGE (c,c+s) : expand (c+s+1) xs
        in
        let expand_h n xs = let ys = expand 0 xs in ENTITY n ys in
        //
        letrec
            align_es []     []     = []
        /\  align_es (x:xs) (y:ys) =
                val (r,u,l) = align_indices_with (_entity_indices x) (_entity_indices y) in
                nonempty u => (ENTITY (_entity_name y) (flat r)) : align_es ((ENTITY (_entity_name x) u):xs) ys |
                nonempty l => (ENTITY (_entity_name y) (flat r)) : align_es xs ((ENTITY (_entity_name y) l):ys) |
                (ENTITY (_entity_name y) (flat r)) : align_es xs ys
        in
        //
        align_es es1 es2
;

//------------------------------------------------------------------------------

let p1 (NONE)   = ""
/\  p1 (SOME i) = Pindex i
;
let p2 (ix,u,l) = printf "%s (%s) (%s)\n" (Pindex ix) (p1 u) (p1 l)
;
let p3 (ix,u,l) = printf "%s (%s) (%S)\n" (Pindex ix) (p1 u) (map Pindex l)
;
let t1 = p2 (align_index (INDEX 0) (INDEX 1));
let t2 = p2 (align_index (INDEX 0) (RANGE (1,2)));
let t3 = p2 (align_index (RANGE (0,1)) (INDEX 2));
let t4 = p2 (align_index (RANGE (0,1)) (RANGE (2,3)));
let t5 = p2 (align_index (RANGE (0,5)) (RANGE (2,3)));
let t6 = p2 (align_index (RANGE (0,1)) (RANGE (2,5)));

//------------------------------------------------------------------------------
// Fin.