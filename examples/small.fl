load "examples/isomatch.fl";
load "ste.fl";

//------------------------------------------------------------------------------
// Load example files.

let g_pex = verilog2pexlif "-Iexamples/verilog" "mux4" ["small.v","small_lib.v"] [];
//Emit_pexlif "puzzle.txt" g_pex;

let p_pex = verilog2pexlif "-Iexamples/verilog" "mux2" ["small_lib.v"] [];
//Emit_pexlif "piece.txt" p_pex;

//------------------------------------------------------------------------------

// let a = flatten p;
// let b = adjacency_matrix a;
// let c = isomatch_matrix a a;
// recurse c b b (replicate (length b) F) 0;

//------------------------------------------------------------------------------

let g_scheme = flatten g_pex;
let p_scheme = flatten p_pex;
//
let g = adjacency_matrix g_scheme;
let p = adjacency_matrix p_scheme;
let m = isomatch_matrix  g_scheme p_scheme;
//
val iso = recurse m g p;
//
let answer = recover iso g_scheme p_scheme;

//------------------------------------------------------------------------------

//(g_m) fseq ((p_m) fseq ());

//let xs = forall_ones m cons [];
//let ys = map (\i. forall_neighbors i p_m (cons) []) (map fst xs);
//let zs = map (\j. forall_neighbors j g_m (cons) []) (map snd xs);
//prune m g_m p_m;

//------------------------------------------------------------------------------
// Fin.