load (DIR^"../isomatch.fl");
load "ste.fl";

let buf1 =
    bit_input a.
    bit_output out.
    bit_internal mid.
    CELL "draw_hier buf1" [
      mid <- '~' a,
      out <- '~' mid
    ];

let buf2 =
    bit_input x.
    bit_output y.
    bit_internal mid.
    CELL "draw_hier buf2" [
      mid <- '~' x,
      y <- '~' mid
];

let buf3 =
    bit_input a.
    bit_output out.
    bit_internal oink.
    CELL "draw_hier buf3" [
      oink <- '~' a,
      out <- '~' oink
    ];

letrec inv_rec n =
    bit_input    a.
    bit_output  out.
    bit_internal mid.
    CELL "draw_hier inv_rec" (
      n = 1 => [ out <- '~' a ] |
      [
          mid <- '~' a,
          inv_rec (n-1) mid out
      ]);
let buf4 =
    bit_input    a.
    bit_output  out.
    CELL "buf4" [
        inv_rec 2 a out
    ];

let needle =
    bit_input a.
    bit_output b.
    CELL "draw_hier needle" [
        buf1 a b
    ];

let haystack =
    bit_input a b c d e f.
    bit_output o1 o2 o3 o4 o5 o6 o7.
    bit_internal mid.
    CELL "draw_hier haystack" [
      buf1 a o1,
      buf2 b o2,
      buf3 c o3,
      inv_rec 2 d o4,
      buf4 e o5,
      mid <- '~' f,
      o6 <- '~' mid,
      o7 <- '~' mid
    ];

let needle_pex = buf1 'a 'out;
let needle_pex = needle 'a 'b;
let haystack_pex = haystack 'a 'b 'c 'd 'e 'f 'o1 'o2 'o3 'o4 'o5 'o6 'o7;

//needle_pex;
//haystack_pex;
let m = isomatch needle_pex haystack_pex;
Emit_isomatch m;