//==========================================================================
//
// Flattened CPU + (traditional) CACHE + RAM exammple
//
//==========================================================================

load "ste.fl";

let BYTE_SIZE           = 8;
let ADDR_SIZE           = 20;
let TIMER_SIZE          = 16;
let LINES               = 12;            // Number of cache lines
let BYTES_IN_CACHE_LINE = 8;            // Number of bytes in cache line
let TAG_SIZE		= ADDR_SIZE-(log2 LINES)-(log2 BYTES_IN_CACHE_LINE);

TYPE "byte" BYTE_SIZE;
TYPE "cache_line" (BYTE_SIZE*BYTES_IN_CACHE_LINE);;
TYPE "atag_field" TAG_SIZE;
TYPE "line_addr" (log2 LINES);
TYPE "decoded_line_addr" LINES;
TYPE "byte_addr" (log2 BYTES_IN_CACHE_LINE);

STRUCT "addr" [ ("aTag", "atag_field"),
		("line", "line_addr"),
		("byte", "byte_addr")
];

STRUCT "ext_cache_line" [
	    ("valid", "bit"),
	    ("aTag", "atag_field"),
	    ("data", "cache_line")
];

// ===================== Cache ============================

let cache_line =
    bit_input		    clk.
    bit_input		    reset.
    bit_input		    we.
    line_addr_input	    line.
    cache_line_input	    din.
    atag_field_input	    atag.
    bit_output		    match.
    cache_line_output	    dout.
    bit_input               sel.
    cache_line_input	    r_dout.
    bit_input               r_match.
    //
    bit_internal	    my_we l_match.
    ext_cache_line_internal n_cl cl.
    //
    CELL ("cache_line") [
	my_we <- sel '&' we,
	n_cl-->valid <- (IF reset THEN '0 ELSE (my_we '|' cl-->valid)),
	n_cl-->aTag  <- (IF my_we THEN atag ELSE cl-->aTag),
	n_cl-->data  <- (IF my_we THEN din ELSE cl-->data),
	re_ff clk n_cl cl,
	l_match <- sel '&' cl-->valid '&' (atag '=' cl-->aTag),
	match <- (IF sel THEN l_match ELSE r_match),
	dout <- (IF sel THEN cl-->data ELSE r_dout)
    ]
;

letrec cache_rec n =
    bit_input		    clk.
    bit_input		    reset.
    bit_input		    we.
    line_addr_input	    line.
    cache_line_input	    din.
    atag_field_input	    atag.
    bit_output		    match.
    cache_line_output	    dout.
    //
    bit_internal	    my_we sel r_match l_match.
    ext_cache_line_internal n_cl cl.
    cache_line_internal	    r_dout.
    //
    CELL (sprintf "cache_rec %d" n) (
    n < 0 => [
	    dout  <- 'X,
	    match <- '0
    ] | [
	sel <- line '=' ''n,
	cache_rec (n-1) clk reset we line din atag r_match r_dout,
        cache_line clk reset we line din atag match dout sel r_dout r_match
]);

let cache_mem =
    bit_input			clk.
    bit_input			reset.
    bit_input			we.
    line_addr_input		line.
    cache_line_input		din.
    atag_field_input		atag.
    bit_output			hit.
    cache_line_output		dout.
    //
    CELL "draw_hier CacheMem" [
	cache_rec (LINES-1) clk reset we line din atag hit dout
];

let p_CacheLine = cache_line 'clk 'reset 'we 'line 'din 'atag 'match 'dout 'sel 'r_dout 'r_match;
let p_CacheMem = cache_mem 'clk 'reset 'we 'line 'din 'atag 'hit 'dout;

//let ckt_Cache_Mem = pexlif2fsm p_CacheMem;
//let vis_CacheMem = STE_debug ckt_Cache_Mem;
//vis_CacheMem;

// =============================================================================
