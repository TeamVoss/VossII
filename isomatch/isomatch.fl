load (DIR^"lib/signatures.fl");
load (DIR^"lib/utils.fl");
load (DIR^"lib/ullman.fl");

//------------------------------------------------------------------------------

// ...
let ?! = undefined;

// ...
//  filter_mask::(bool list)->(* list)->(* list)
let filter_mask mask = snd # unzip # filter fst # zip mask;

// ...
let _fp  = find_fingerprint # _pexlif_attrs;
let _sig = find_signature # _pexlif_attrs;
let _hier (PINST _ _ _ _ _ _ (P_HIER cs)) = cs;

//==============================================================================
//
// Annotated 'pexlif', might be unnecessary.
//
//==============================================================================

lettype ann_pex =
        ANN
            {pex::pexlif}
;

let _pex (ANN p) = p;

//==============================================================================
//
// ...
//
//==============================================================================

// ...
//  @@::(subst opt)->(subst opt)->(subst opt)
let
    @@ (SOME x) (SOME y) = SOME (x @ y)
/\  @@ _        _        = NONE
;
infix 9 @@;

// ...
//  collect::((subst opt) list)->(subst opt)
let collect ss = itlist (defix @@) ss (SOME []);

// For every pair '(x,y)' in 's', 'assoc x s == y' and 'rev_assoc y s == x'.
//  coherent::subst->bool
let coherent s = all (\(u,t). all (\(x,y). (u == x) <==> (t == y)) s) s;

//------------------------------------------------------------------------------

// Find a subst., if any, s.t. both expressions are equal.
//   TODO: Some missing cases.
letrec
    alpha (W_X _)       (W_X _)       = SOME []
/\  alpha (W_CONST _ _) (W_CONST _ _) = SOME []
/\  alpha (W_VAR _ n)   (W_VAR _ m)   = SOME [(n,m)]
/\  alpha (W_NAMED_CONST n _ _) (W_NAMED_CONST m _ _) = SOME [(n,m)]
/\  alpha (W_EXPLICIT_VAR _ n)  (W_EXPLICIT_VAR _ m)  = SOME [(n,m)]
/\  alpha (W_AND a b)   (W_AND x y)   = alpha a x @@ alpha b y
/\  alpha (W_OR a b)    (W_OR x y)    = alpha a x @@ alpha b y
/\  alpha (W_NOT a)     (W_NOT x)     = alpha a x
/\  alpha (W_EQ a b)    (W_EQ x y)    = alpha a x @@ alpha b y
/\  alpha (W_GR a b)    (W_GR x y)    = alpha a x @@ alpha b y
/\  alpha (W_ADD a b)   (W_ADD x y)   = alpha a x @@ alpha b y
/\  alpha (W_SUB a b)   (W_SUB x y)   = alpha a x @@ alpha b y
/\  alpha (W_MUL a b)   (W_MUL x y)   = alpha a x @@ alpha b y
/\  alpha (W_DIV a b)   (W_DIV x y)   = alpha a x @@ alpha b y
/\  alpha (W_MOD a b)   (W_MOD x y)   = alpha a x @@ alpha b y
/\  alpha (W_SHL a b)   (W_SHL x y)   = alpha a x @@ alpha b y
/\  alpha (W_SHR a b)   (W_SHR x y)   = alpha a x @@ alpha b y
/\  alpha (W_ASHR a b)  (W_ASHR x y)  = alpha a x @@ alpha b y
/\  alpha (W_SX _ a)    (W_SX _ x)    = alpha a x
/\  alpha (W_ZX _ a)    (W_ZX _ x)    = alpha a x
/\  alpha (W_ITE a b c) (W_ITE x y z) = alpha a x @@ alpha b y @@ alpha c z
/\  alpha _ _ = NONE
;

// Find a subst., if any, s.t. both update functions are equal.
let
    alpha_fn (W_UPDATE_FN a b)   (W_UPDATE_FN x y)   = alpha a x @@ alpha b y
/\  alpha_fn (W_PHASE_DELAY a b) (W_PHASE_DELAY x y) = alpha a x @@ alpha b y
/\  alpha_fn _ _ = NONE
;

// Find subst., if any, s.t. both sets of functions are equal.
let
    alpha_leaf (P_LEAF fs) (P_LEAF gs) =
        let
            verify (SOME x) = coherent x => SOME x | NONE
        /\  verify _        = NONE
        in
        let test = verify # collect # map2 alpha_fn fs in
        exhaust (map test (permutations gs))
;

//==============================================================================
// ...

let
    actualize_sha p g =
        val p_act = actuals (_pex p) in
        val g_act = actuals (_pex g) in
        //
        SOME (zip p_act g_act)
;

// ...
let
    actualize_leaf p g =
        val (PINST _ _ _ i1 o1 _ l1) = _pex p in
        val (PINST _ _ _ i2 o2 _ l2) = _pex g in
        //
        let lift = actualize (i1 @ o1) (i2 @ o2) in
        maybe NONE (alpha_leaf l1 l2) (SOME # lift)
;

// ...
let
    actualize_hier ss p g =
        val (PINST _ _ _ i1 o1 _ _) = _pex p in
        val (PINST _ _ _ i2 o2 _ _) = _pex g in
        //
        let lift = actualize (i1 @ o1) (i2 @ o2) in
        maybe NONE (collect ss) (\s. coherent s => SOME (lift s) | NONE)
;

//==============================================================================
//
// ...
//
//==============================================================================

// Check if the lists 'x' and 'y' share any elements.
//  intersects::(* list)->(* list)->bool
let intersects x y = NOT (empty (x intersect y) OR empty x OR empty y);
infix 7 intersects;

// Matrix over each node's relation ('cmp') to every other node.
//  reflexive_compare_all::(*->*->bool)->(* list)->((* list) list)
let
    reflexive_compare_all cmp xs =
        letrec
            build [] = []
        /\  build (x:xs) = map (cmp x) xs : build xs
        in
        letrec
            fill [] = []
        /\  fill (x:xs) = x : map2 cons x (fill xs)
        in
        fill (build xs)
;

//==============================================================================
// Construction of adj. and iso. matrices.

// ...
let
    adjacencies ann =
        let child   x y = (formals x) intersects (actuals y) in
        let sibling x y = (actuals x) intersects (actuals y) in
        // Fetch parent/children.
        let parent   = _pex ann in
        let children = _hier parent in
        // Compute adj. for "parent<->child" and "child<->child".
        let adj_parent   = F : map (child parent) children in
        let adj_children = reflexive_compare_all sibling children in
        // Complete adj. mat. combines above two.
        adj_parent : map2 cons adj_parent adj_children
;

// ...
let
    isomorphisms ann bnn =
        // Fetch parent&children.
        let xs = _pex ann : _hier (_pex ann) in
        let ys = _pex bnn : _hier (_pex bnn) in
        // Compare every pos. pairing.
        map (flip map ys # equal on _fp) xs
;

//==============================================================================
// ...

// Find el. given by mask 'xs' (one and only one el. of 'xs' must be 'T').
//  find_mask::(bool list)->(* list)->*
letrec
    find_mask (F:xs) (y:ys) = find_mask xs ys
/\  find_mask (T:xs) (y:ys) = y
;

// Expand list of choices, i.e, '[[1,2],[3,4]] = [[1,3],[1,4],[2,3],[2,4]]'.
//  expand_choices::((* list) list)->((* list) list)
letrec
    expand_choices []       = []
/\  expand_choices (xs:[])  = map (\x. [x]) xs
/\  expand_choices (xs:xss) = flatmap (\x. map (\ys. x:ys) (expand_choices xss)) xs
;

// ...
//
// search(P, G)
//     S = recurse(none, 1, adj(P), adj(G), iso(P, G))
//     for all solutions R in S
//         explore all pairings X of P and G according to R
//
forward_declare{explore::ann_pex->ann_pex->({((string#string) list)} opt list)};
let
    search p g =
        // Find possible solutions for a 'p' and 'g' mapping.
        let adj_p   = adjacencies p in
        let adj_g   = adjacencies g in
        let iso     = isomorphisms p g in
        let sols    = recurse iso adj_p adj_g in
        // Explore each pairing in a solution to validate it.
        let flat1 a = _pex a : _hier (_pex a) in
        let p_flat  = map ANN (flat1 p) in
        let g_flat  = map ANN (flat1 g) in
        pam sols (\sol.
            let g_matches = map (flip find_mask g_flat) sol in
            // Explore each matched pair.
            let options = map2 explore p_flat g_matches in
            // Construct list of all possible solutions.
            let choices = expand_choices options in
            // Merge substitutions for each choice.
            map collect choices
        )
;

// ...
//
// explore(P, G)
//     if P == G
//         report direct mapping
//     else if P ~ G
//         if P and G are leafs
//             report subst. s.t. P == G, if any.
//         else if P and G are hierarchies
//             CS = sets of possible subst. s.t. P == G
//             report each coherent choice C in CS
//     else
//         report no solution
//
let
    explore p g =
        let sig  = _sig # _pex in
        let fp   = _fp  # _pex in
        let leaf = _pexlif_leaf # _pex in
        //
        IF sig p == sig g THEN
            [actualize_sha p g]
        ELSE IF fp p == fp g THEN
            IF leaf p AND leaf g THEN
                [actualize_leaf p g]
            ELSE
                map (\ss. actualize_hier ss p g) (search p g)
        ELSE
            []
;

//==============================================================================
// ...




//==============================================================================
// Fin.