//==============================================================================
//
// Random functions that I think are just neat.
//
//==============================================================================

//==============================================================================
// Misc. combinators.

// Boolean implication.
let <==> a b = a = b;
infix 2 <==>;

// Check if 'p' is satisfied with all elements of 'as'.
//  all::(a->bool)->(a list)->bool
let all p as = AND_list (map p as);

// Check if 'p' is satisfied with any element of 'as'.
//  any::(a->bool)->(a list)->bool
let any p as = OR_list (map p as);

// Constant function.
//  const::a->b->a
let const a b = a;

// Flip the arguments of a function.
//  flip::(a->b->c)->b->a->c
let flip f a b = f b a;

// Infinite list of repeated applications of 'f' to 'x'.
//     iterate::(a->a)->a->(a list)
letrec iterate f x = x : iterate f (f x);

// "Curry" a function.
//  curry::((a->b->c)->(a#b)->c
let curry f (a,b) = f a b;

// Un"curry" a function.
//  uncurry::((a#b)->c)->a->b->c
let uncurry f a b = f (a,b);

// Runs the binary function g on the results of applying unary function f to two
// arguments x and y.
//  on::(b->b->c)->(a->b)->a->a->c
let on g f x y = g (f x) (f y);
infix 3 on;

// Substitution of a value 'n' given its presence in 's'.
//  subst::((a#a) list)->a->a
let subst s n = (assoc n s) catch n;

// Substitution of a value 'n' given its presence in a flipped 's'.
//  rev_subst::((a#a) list)->a->a
let rev_subst s n = (rev_assoc n s) catch n;

// Apply 'f' to the first element of pair '(a,b)'.
//  first::(a->c)->(a#b)->(c#b)
let first f (a,b) = (f a,b);

// Apply 'f' to the second element of a pair '(a,b)'.
//  second::(b->d)->(a#b)->(a#d)
let second f (a,b) = (a,f b);

// Apply 'f' and 'g' to the first and second element of a pair '(a,b)', respectively.
//  both::(a->c)->(b->d)->(a#b)->(c#d)
let both f g (a,b) = (f a,g b);

// 'map' with its arguments flipped.
//  pam::(a list)->(a->b)->(b list)
let pam = flip map;

// Perform action 'a' if 'b' is true, otherwise do nothing.
//  when::bool->void->void
//  when b a = b => a | ();

// Swaps the element's of a pair.
//  swap::(a#b)->(b#a)
let swap (a,b) = (b,a);

//==============================================================================
// Non-infix versions of combinators/constructors.

// Non-infix version of (,).
//  pair::a->b->(a#b)
let pair a b = (a,b);

// Non-infix version of (:).
//  const::a->(a list)->(a list)
let cons a b = a : b;

// Non-infix version of (==).
//  equal::a->a->bool
let equal a b = a == b;

// Non-infix version of (!=).
//  not_equal::a->a->bool
let not_equal a b = NOT (equal a b);

// Non-infix version of (+).
//  add::int->int->int
let add a b = a + b;

//==============================================================================
// Opt.

// If the 'm' is 'NONE', returns 'b'. Otherwise, applies 'f' to value of 'm'.
//  maybe::b->(a opt)->(a->b)->b
let maybe b m f = has_value m => f (get_value m) | b;

// ...
//  when::(a opt)->(a->b)->(b opt)
let when m f = maybe NONE m (SOME # f);

// ...
//  exhaust::((a opt) list)->(a opt)
letrec
    exhaust []     = NONE
/\  exhaust (x:xs) = maybe (exhaust xs) x SOME
;

//==============================================================================
// List.

// Checks if a list has at least one element.
//  nonempty::(a list)->bool
let nonempty = NOT # empty;

// Drops the first element of a list.
//  butfirst::(a list)->(a list)
let butfirst = tl;

// Takes two lists and returns a list of corresponding pairs. If one input list
// is short, excess elements of the longer list are discarded.
//  zip_uneven::(a list)->(b list)->((a#b) list)
letrec
    zip_uneven (x:xs) (y:ys) = (x,y) : zip_uneven xs ys
/\  zip_uneven _      []     = []
/\  zip_uneven []     _      = []
;

// Sum a list of integers.
//  sum::(int list)->int
let sum as = itlist (\a. \s. a + s) as 0;

// Fold (rigth-to-left) 'xs' into itself with 'f'.
//  itlist1::(a->a->a)->(a list)->a
let itlist1 f (x:xs) = itlist f xs x;

// Fold (rigth-to-left) 'xs' into 'b' with 'f'.
//  ixlist::(a->int->b->b)->(a list)->b->b
let ixlist f xs b = snd (itlist (\x. \(ix,s). (ix-1,f x ix s)) xs (length xs,b));

// ...
//  ixmap::(a->int->b)->(a list)->(b list)
let ixmap f xs = ixlist (\x. \ix. cons (f x ix)) xs [];

// Label each element with its index in the list.
//  ixlabel::(a list)->((a#int) list)
let ixlabel = flip zip_uneven (iterate (add 1) 1);

// ...
//  find_maybe::(a->bool)->a->(a list)->a
let find_maybe f x xs = let i = find_first0 f xs in i == 0 => x | (el i xs);

// ...
//  span::(a->bool)->(a list)->((a list)#(a list))
letrec
    span _ []     = ([], [])
/\  span p (x:xs) = p x => val (ys,zs) = span p xs in (x:ys,zs) | ([],x:xs)
;

// ...
//  group::(a->a->bool)->(a list)->((a list) list)
letrec
    group _ []     = []
/\  group p (x:xs) = val (ys,zs) = span (p x) xs in (x:ys) : group p zs
;

// ...
//  reorder::(int list)->(a list)->(a list)
letrec
    reorder []     _  = []
/\  reorder (o:os) xs = el o xs : reorder os xs
;

// Modify the 'n'th element of a list 'xs' with 'f'.
//  modify::(a->a)->int->(a list)->(a list)
letrec
    modify _ _ []     = []
/\  modify f 1 (x:xs) = f x : xs
/\  modify f n (x:xs) = x : modify f (n-1) xs
;

// Set the 'n'th element of a list 'x' to 'v'.
//  list_update::a->int->(a vec)->(a vec)
let list_update v i = modify (const v) i;

// Checks if an element is a memeber of the given list.
//  elem::a->(a list)->bool
let elem a as = find_first0 (equal a) as != 0;

// Left-shift a list one element.
//  rotate::(a list)->(a list)
let rotate (x:xs) = xs @ [x];

// Left-shift a list 'l'-elements.
//  rotations::int->(a list)->((a list) list)
let rotations l xs = firstn l (iterate rotate xs);

// Generate every permutation of a list.
//  permutations::(a list)->((a list) list)
letrec
    permutations xs =
        letrec
            perms []     _  = []
        /\  perms (t:ts) js =
                let
                    interleave xs r =
                        letrec
                            interleave' _ []     r = (ts, r)
                        /\  interleave' f (y:ys) r =
                                val (us,zs) = interleave' (f # (cons y)) ys r in
                                (y:us, f (t:y:us) : zs)
                        in                         
                        val (_,zs) = interleave' id xs r in zs
                in
                itlist interleave (permutations js) (perms ts (t:js))
        in
        xs : perms xs []
;

//==============================================================================
// Matrix.

// Count the number of rows in a matrix.
//  num_rows::(a mat)->int
let num_rows = length;

// Count the number of columns in a square matrix.
//  num_columns::(a mat)->int
let num_columns xs = empty xs => 0 | length (hd xs);

// Set the '(i,j)'th element of matrix 'mat' to 'v'.
//  mat_update::a->(int#int)->(a mat)->(a mat)
let mat_update v (i,j) = modify (list_update v j) i;

//==============================================================================
// String

// Drops the first 'n' characters from the string 's'.
//  string_butfirstn::string->int->string
let string_butfirstn s n = el (n+1) (iterate (string_tl) s);

// Short-hand for 'string_tl'.
//  string_butfirst::string->string
let string_butfirst = string_tl;

// Short-hand for 'string_butlastn 1'.
//  string_butlast::string->string
let string_butlast s = string_butlastn s 1;

// Checks if a string is empty.
//  string_empty::string->bool
let string_empty s = strlen s == 0;

//==============================================================================
// ...

// Short-hand for printing of matrices.
//  matrix2str::bool->string->string->string->string->(*->string)->((* list) list)->string
let
    matrix2str print_empty pre sep_row sep_col post pr_fun =
        list2str print_empty pre sep_row post
            (list2str print_empty pre sep_col post pr_fun)
;

// ...
let mat2str = matrix2str T "[" "\n," "," "]";

// ...
let b2str b = b => "T" | "F";

// ...
//  fa2str::(string#(string list)) list->string
let fa2str = list2str T "[" "," "]" (\(f,as). sprintf "(%s,%S)" f as);

//==============================================================================
// SHA256.

// Compute the SHA256 signature of a 'set' of components.
//  sha_set::(a list)->string
let sha_set = sha256_signature # qsort strcmp # map sha256_signature;

//==============================================================================
// Pexlif.

let _pexlif_name      (PINST n _ _ _ _ _ _) = n;
let _pexlif_attrs     (PINST _ a _ _ _ _ _) = a;
let _pexlif_leaf      (PINST _ _ l _ _ _ _) = l;
let _pexlif_fa_inps   (PINST _ _ _ i _ _ _) = i;
let _pexlif_fa_outs   (PINST _ _ _ _ o _ _) = o;
let _pexlif_internals (PINST _ _ _ _ _ t _) = t;
let _pexlif_content   (PINST _ _ _ _ _ _ c) = c;

// Fetch attribute 's'. If none exists, returns 'a'.
//  find_attr::string->string->(string#string list)->string
let find_attr s a = snd # find_maybe (equal s # fst) ("",a);
//  find_fingerprint::(string#string list)->int
let find_fingerprint = s2int # find_attr "fingerprint" "0";
//  find_signature::(string#string list)->string
let find_signature = find_attr "signature" "";

//------------------------------------------------------------------------------

//  lineup::(formal#(actual list) list)->(formal#actual list)
let lineup = flatmap (curry zip # both md_expand_vector md_expand_vectors);
//  raise::(formal#actual list)->(formal list)->(actual list)
let raise = map # subst;
//  lower::(formal#actual list)->(actual list)->(formal list)
let lower = map # rev_subst;
//  promote::(a->b)->(formal#actual list)->(formal#actual list)->(a#a list)->(b#b list)
let promote f ns hs = curry zip # both (f ns) (f hs) # unzip;

// Turns a subst. of formals into one over actuals.
let actualize fa_n fa_h = promote raise (lineup fa_n) (lineup fa_h);

// Turns a subst. of actuals into one over formals.
let formalize fa_n fa_h = promote lower (lineup fa_n) (lineup fa_h);

//------------------------------------------------------------------------------

//  actuals::pexlif->[string]
let
    actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        flatmap (md_expand_vectors # snd) (fa_inps @ fa_outs)
;

//  formals::pexlif->[string]
let
    formals (PINST _ _ _ fa_inps fa_outs _ _) =
        flatmap (md_expand_vector # fst) (fa_inps @ fa_outs)
;

//==============================================================================
// Fin.

// all NOT [T,T] = F;
// any NOT [F,T] = T;
// equal T T;
// const T F = T;
// flip const T F = F;
// curry const (T,F) = T;
// uncurry id T F = (T,F);
// first NOT (T,T) = (F,T);
// second NOT (T,T) = (T,F);
// butfirst [F,T] = [T];
// firstn 3 (iterate NOT T) = [T,F,T];
// ixlist (\a.\i.\b.(i>a):b) [2,2,2,2] [] = [F,F,T,T];
// modify NOT 2 [T,T,T] = [T,F,T];
// string_butfirstn "abc" 2 = "c";
// string_butfirst "abc" = "bc";
// string_butlast "abc" = "ab";
// list_update T 2 [F,F,F] = [F,T,F];
// mat_update T (2,2) [[F,F,F],[F,F,F],[F,F,F]] = [[F,F,F],[F,T,F],[F,F,F]];