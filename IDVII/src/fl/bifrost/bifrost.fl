//
// Redefine a top-level function created from a Bifrost compilation so that:
//  * the content of the (flat) pexlif is first grouped according to the
//    "Label" attributes.
//  * ... (more coming)
//
let bifrost_simplify fn =
    let rtype = get_return_type fn then
    rtype != "pexlif" =>
        eprintf "Return type not pexlif (%s). bifrost_simplify failed" rtype
    |
    let arity = get_arity fn then
    let args = get_args fn then
    let pre1 = sprintf "let %s " fn in
    let lhs = list2str T pre1 " " " = " fst args in
    let pre2 = sprintf "bifrost_clean_pexlif (%s " fn in
    let post2 = ");" in
    let rhs = list2str T pre2 " " post2 fst args in
    let cmd = lhs^rhs in
    (eval cmd) fseq ()
;
free_binder bifrost_simplify;

//begin_abstype;

let is_buffer (PINST cnm _ _ _ _ _ _) =
    str_is_substr "draw_phase_delay_on_" cnm => F |
    str_is_substr "draw_buffer" cnm
;

let mk_sub fa =
    flatmap (\(f,as). zip (md_expand_vector f) (md_expand_vectors as)) fa
;

let map_io sub ({f::string},as) =
    (f, (md_merge_vectors (map (\s. assoc s sub) (md_expand_vectors as))))
;

let lift_buffers p assuming (pexlif_is_hier p) =
    val (PINST name attrs lf fa_inp fa_out ints (P_HIER chs)) = p in
    val (bufs, other) = split is_buffer chs in
    bufs = [] => [p] |
    // Lift the buffers
    let isub = mk_sub fa_inp then
    let osub = mk_sub fa_out then
    let map_buf (PINST bname battrs blf bfa_inp bfa_out bint bbody) =
	let bfa_inp' = map (map_io isub) bfa_inp then
	let bfa_out' = map (map_io osub) bfa_out then
	(PINST bname battrs blf bfa_inp' bfa_out' bint bbody)
    in
    let lifted_buffers = map map_buf bufs in
    other = [] => lifted_buffers |
    // Now remove signals no longer needed
    let used = flatmap pexlif_get_inps_actuals other then
    let is_used (f,as) = [f] vec_overlap used in
    let fa_inp' = filter is_used fa_inp then
    let driven = flatmap pexlif_get_outs_actuals other then
    let is_driven (f,as) = [f] vec_overlap driven in
    let fa_out' = filter is_driven fa_out then
    let remain = (PINST name attrs lf fa_inp' fa_out' ints (P_HIER other)) in
    remain:lifted_buffers
 /\ lift_buffers other = [other]
;


let remove_all_buffers p =
    letrec remove_rec top p assuming (pexlif_is_hier p) =
	val (PINST name attrs leaf fai fao ints (P_HIER chs)) = p in
	let chs' = flatmap (remove_rec F) chs in
	let il = find_all is_buffer chs' then
	let p = PINST name attrs leaf fai fao ints (P_HIER chs') in
	let p' = remove_wire p il then
	top => [p'] |
	lift_buffers p'
     /\   remove_rec top other = [other]
    in
    hd (remove_rec T p)
;

//end_abstype remove_all_buffers;

let bifrost_clean_pexlif p =
    let p = remove_all_buffers p then
    pexlif_group_by_label p
;

letrec bifrost_get_dependent_files file =
    let cmd = sprintf "gawk -e '/^#include/ { print $2;}' < %s"  file in
    let fp = fopen cmd "|r" then
    letrec rd fp =
	let file = fgets fp then
	file = "" => [] |
	let name = string_tl (string_butlastn file 2) in
	name : (rd fp)
    in
    let raw_files = rd fp then
    (fclose fp) fseq
    let files = setify raw_files then
    setify (files @ (flatmap bifrost_get_dependent_files files))
;

// Load or compile a bifrost program.
// If the file and its dependencies are older than the compiled model,
// simply load the compiled model.
// 
// NOTE: The code assumes the #include statements has a fixed string
// as file to include.
//
let bifrost_load pgm force->F =
    NOT (str_is_suffix ".bfst" pgm) =>
	eprintf "bifrost_load with a non-bifrost program (%s)." pgm
    |
    let module = string_butlastn (last (str_split pgm "/")) 5 in
    let fname = file_fullname pgm then
    let res_name = fname^".fl" then
    let orig_time = 
	let files = fname : (bifrost_get_dependent_files fname) in
	let find_max_mod_time f r = max (file_modified_time f) r in
	itlist find_max_mod_time files (-1)
    in
    let res_time = file_modified_time res_name then
    ( NOT force AND (file_exists res_name) AND (res_time >= orig_time) => () |
	let parts = str_split fname "/" in
	let ndir = list2str T "" "/" "" id (butlast parts) then
	let dir = ndir != "" => ndir |
		let fp = fopen "pwd" "|r" then
		let dir = string_butlast (fgets fp) then
		(fclose fp) fseq
		dir
	then
	let fp = mktemp "bifrost_log" then
	let logfile = stream2filename fp then
	(fclose fp) fseq
	let cmd = sprintf "cd %s & bifrost %s > %s" dir fname logfile then
	((system cmd) != 0) OR (NOT (file_exists res_name)) =>
	    noX =>
		eprintf "bifrost failed for program %s. See %s\n" fname logfile
	    |    
		let msg = sprintf "Bifrost failed on %s\n" fname then
		let w = report_result_in_file msg logfile [("Ok","0")] in
		(get_window_result w) fseq
		eprintf "bifrost failed for program %s." fname
	|
	()
    ) fseq
    _load res_name F
;

begin_abstype;

let trim_comments s =
    let loc = strstr s "//" then
    loc = 0 => s |
    substr s 1 (loc-1)
;

// Read a file with (only) Bifrost defines and make the same constants
// define (to the same values) in fl.
let read_bifrost_defines file =
    let fp = fopen file "r" then
    letrec rd fp =
        let s = fgets fp then
        s = "" => "" |
        let s = trim_comments s then
        NOT (str_is_prefix "define " s) => s^(rd fp) |
        ("let "^(substr s 7 (-1)))^(rd fp)
    in
    let res = rd fp then
    (fclose fp) fseq
    eval res
;

end_abstype read_bifrost_defines;

// Protocol adapters

let bifrost_tx_twophase =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal was_req.
  bit_internal was_ack.
  bit_internal sent.
  CELL "bifrost_tx_twophase" [
    re_ff_sreset clk reset ack was_ack,
    re_ff_sreset clk reset req was_req,
    re_ff_sreset clk reset ((run '|' sent) '&' hold) sent,
    req <- was_req '^' (run '&' ('~' sent)),
    latch <- ack '^' was_ack,
    done <- run '&' ('~' (req '^' ack))
];

let bifrost_tx_fourphase =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal was_ack.
  bit_internal still_done.
  CELL "bifrost_tx_fourphase" [
    re_ff_sreset clk reset ack was_ack,
    re_ff_sreset clk reset (done '&' hold) still_done,
    req <- run '&' ('~' was_ack) '&' (ack '|' ('~' done)),
    latch <- ack '&' ('~' was_ack),
    done <- still_done '|' latch
];

// Turned off due to Bifrost issue: inputs are not latched at the right time with this protocol.
let bifrost_tx_pulseecho = error "pulse echo removed due to latching issue!";
// let bifrost_tx_pulseecho =
//   bit_input clk.
//   bit_input reset.
//   bit_input run.
//   bit_input hold.
//   bit_input ack.
//   bit_output req.
//   bit_output latch.
//   bit_output done.
//   bit_internal sent.
//   bit_internal still_done.
//   CELL "bifrost_tx_pulseecho" [
//     re_ff_sreset clk reset ((sent '|' req) '&' hold) sent,
//     re_ff_sreset clk reset (done '&' hold) still_done,
//     req <- run '&' ('~' sent),
//     latch <- ack,
//     done <- still_done '|' ack
// ];

let bifrost_tx_ackpulse =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal sent.
  bit_internal finished.
  CELL "bifrost_tx_ackpulse" [
    re_ff_sreset clk reset (done '&' hold) finished,
    req <- run '&' ('~' finished),
    latch <- ack,
    done <- finished '|' ack
    ];

let bifrost_tx_agreement =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal still_done.
  CELL "bifrost_tx_agreement" [
    re_ff_sreset clk reset (done '&' hold) still_done,
    req <- run '&' ('~' still_done),
    latch <- req '&' ack,
    done <- still_done '|' latch
];

let bifrost_rx_fourphase =
  bit_input clk.
  bit_input reset.
  bit_input done.
  bit_input req.
  bit_output ack.
  bit_output start.
  bit_output may_continue.
  bit_internal was_req.
  CELL "bifrost_rx_fourphase" [
    re_ff_sreset clk reset req was_req,
    ack <- done '&' was_req,
    start <- req '^' was_req,
    may_continue <- '~' req
];

let bifrost_rx_twophase =
  bit_input clk.
  bit_input reset.
  bit_input done.
  bit_input req.
  bit_output ack.
  bit_output start.
  bit_output may_continue.
  bit_internal was_req.
  bit_internal was_ack.
  CELL "bifrost_rx_twophase" [
    re_ff_sreset clk reset req was_req,
    re_ff_sreset clk reset ack was_ack,
    ack <- was_ack '^' done,
    start <- req '^' was_req,
    may_continue <- '1
];

// Turned off due to Bifrost issue: inputs are not latched at the right time with this protocol.
let bifrost_rx_pulseecho = error "pulse echo removed due to latching issue!";
// let bifrost_rx_pulseecho =
//   bit_input clk.
//   bit_input reset.
//   bit_input done.
//   bit_input req.
//   bit_output ack.
//   bit_output start.
//   bit_output may_continue.
//   bit_internal was_done.
//   CELL "bifrost_rx_pulseecho" [
//     re_ff_sreset clk reset done was_done,
//     ack <- done '&' '~' was_done,
//     start <- req,
//     may_continue <- '1
// ];

let bifrost_rx_ackpulse =
  bit_input clk.
  bit_input reset.
  bit_input done.
  bit_input req.
  bit_output ack.
  bit_output start.
  bit_output may_continue.
  bit_internal was_done.
  bit_internal was_req.
  bit_internal was_ack.
  CELL "bifrost_rx_ackpulse" [
    re_ff_sreset clk reset done was_done,
    re_ff_sreset clk reset req was_req,
    re_ff_sreset clk reset ack was_ack,
    ack <- done '&' req,
    start <- req '&' (was_ack '|' ('~' was_req)),
    may_continue <- '1
];

let bifrost_rx_perpetual =
  bit_input clk.
  bit_input reset.
  bit_input done.
  bit_input req.
  bit_output ack.
  bit_output start.
  bit_output may_continue.
  bit_internal started.
  CELL "bifrost_rx_perpetual" [
    re_ff_reset clk reset (started '|' start) started,
    start <- '~' (reset '|' started),
    may_continue <- '1
];

// ==============================================================
// Useful circuits
// ==============================================================

begin_abstype;

letrec find_oldest base_idx =
    list_input	    ages.
    output	    idx.
    output	    max_age.
    //
    internal	    lidx lmax_age.
    internal	    ridx rmax_age.
    bit_internal    l_gr_r.
    //
    let hlen = (length ages)/2 in
    CELL "find_oldest" (
	ages = [] =>	     [ idx <- '0, max_age <- '0 ] |
	(length ages = 1) => [ idx <- ''base_idx, max_age <- hd ages] |
	[ 
	    find_oldest (base_idx+hlen) (firstn hlen ages) lidx lmax_age,
	    find_oldest base_idx (butfirstn hlen ages) ridx rmax_age,
	    l_gr_r <- lmax_age '>' rmax_age,
	    idx <- (IF l_gr_r THEN lidx ELSE ridx),
	    max_age <- (IF l_gr_r THEN lmax_age ELSE rmax_age)
	]
);

// Find the index of the highest age in a list.
// If all ages are 0, then valid is 0, otherwise it is 1.
let find_max_age =
    list_input		{ages:: *age list}.
    bit_output          valid.
    output		selected.
    internal		{max_age:: *age}.
    CELL "find_max_age" [
	find_oldest 0 ages selected max_age,
        valid    <- (max_age '!=' '0)
];

end_abstype find_max_age;

// ==============================================================
// Memory controller for memory banking
// ==============================================================

//
// Memory with 1 write port and (potentially) many read ports.
// The memory is arranged as multiple words and thus if the addresses
// are algigned, multiple reads can take place at the same time.
//
// The addr and data arguments are not used but need to be of desired type.
//
let mk_bifrost_memory name
		      MEM_BANKS MEM_SIZE RAM_LATENCY
		      read_protocol write_protocol
		      addr data
    =
    read_protocol != "pulseecho" =>
	error "Currently only pulseecho supported as read_protocol"
    |
    write_protocol != "pulseecho" =>
	error "Currently only pulseecho supported as write_protocol"
    |
    let addr_tp = hw_type_name addr in
    let data_tp = hw_type_name data in
    let saddr_sz = int2str (hw_size addr) in
    let sMEM_BANKS = sprintf "%d" MEM_BANKS in
    let sMEM_SIZE = sprintf "%d" MEM_SIZE in
    let sRAM_LATENCY = sprintf "%d" RAM_LATENCY in
    let addr = addr_tp in
    let maddr = sprintf "%s_maddr" name in
    let data = data_tp in
    let rd_id = sprintf "%s_rd_id" name in
    let rd_age = sprintf "%s_rd_age" name in
    let mem_read_fsm = sprintf "%s_mem_read_fsm" name in
    let mem_fsm = sprintf "%s_mem_fsm" name in
    let RAM = name^"_RAM" in
eval_fl_code
<{
begin_abstype;
 
let addr_sz = `saddr_sz`;
let MEM_BANKS = `sMEM_BANKS`;
let MEM_SIZE  = `sMEM_SIZE`;
let RAM_LATENCY  = `sRAM_LATENCY`;
 
let MEM_LINES = MEM_SIZE / MEM_BANKS;
TYPE "`maddr`" (addr_sz -(ubits_needed (MEM_BANKS-1)));
 
let addr2maddr {a::`addr`} =
    let res =
	frombits (butlastn (ubits_needed (MEM_BANKS-1)) (tobits a))
    in
    {res::`maddr`}
;
 
TYPE "`rd_id`" (ubits_needed (MEM_BANKS-1));
TYPE "`rd_age`" (ubits_needed (MEM_BANKS * RAM_LATENCY/2));
 
MEMORY "`RAM`" [(MEM_LINES, "`maddr`")]  "`data`";
 
let align_addr {addr::`addr`} = addr '&' '~' (''(MEM_BANKS-1));
let offset_addr {addr::`addr`} = addr '&' (''(MEM_BANKS-1));
ENUM "`mem_read_fsm`" ["IDLE", "READING", "DONE"];
let RAM =
    `maddr`_input	addr.
    `data`_input  inp.
    bit_input	rw.
    `data`_output out.
    //
    bit_internal    addr_rdy rw_rdy inp_rdy rd_rdy wr_rdy.
    `RAM`_internal    ram tmp_new_ram new_ram.
    internal        local_rd_data.
    CELL "RAM" [
	is_stable RAM_LATENCY addr addr_rdy,
	is_stable RAM_LATENCY rw rw_rdy,
	is_stable RAM_LATENCY inp inp_rdy,
	rd_rdy <- addr_rdy '&' rw_rdy,
	Read_`RAM` ram addr local_rd_data,
	out <- (IF (rd_rdy '&' rw) THEN local_rd_data ELSE 'X),
	Write_`RAM` ram addr inp tmp_new_ram,
	wr_rdy <- rd_rdy '&' inp_rdy,
	new_ram <- (IF (wr_rdy '&' '~' rw) THEN tmp_new_ram ELSE ram),
	ram <: new_ram
];
 
let find_match =
    input	target_addr.
    list_input	addrs.
    list_input	data.
    bit_output	match.
    output	res.
    //
    bit_list_internal (length addrs) eqs.
    CELL "find_match" (
	(map2 (\\eq.\\a. eq <- (a '=' target_addr)) eqs addrs)
	@
	[
	    match <- OR_n eqs,
	    CASE res (zip eqs data) 'X
	]
);
 
let mem_read_fsm =
    // External I/Os
    bit_input           clk reset.
    bit_input           req.
    `addr`_input          addr.
    bit_output          ack.
    `data`_output         res.
    //
    `rd_age`_output	age.
    `addr`_output         rd_addr.
    bit_input           res_valid.
    `addr`_list_input	res_addrs.
    `data`_list_input	res_data.
    //
    `mem_read_fsm`_internal   fsm.
    bit_internal	    raw_match match.
    internal		    my_addr raw_res.
    //
    CELL "mem_read_fsm" [
	Moore_FSM "mem_read_fsm" clk fsm (reset, IDLE) [
	    IDLE    --- req	--- READING,
	    READING --- match	--- DONE,
	    DONE    --- '1	--- IDLE
	],
	STATE clk age [
	    reset			      --- '0,
	    (is_IDLE fsm '&' req)	      --- '1,
	    ((is_READING fsm) '&' '~' match)  --- (age '+' '1),
	    '1				      --- '0
	],
	re_ff_en clk (is_IDLE fsm '&' req) addr my_addr,
	rd_addr <- align_addr my_addr,
	find_match my_addr res_addrs res_data raw_match raw_res,
	match <- raw_match '&' res_valid,
	ack <- is_DONE fsm,
	re_ff_en clk match raw_res res
];
 
ENUM "`mem_fsm`" ["IDLE", "MEM_WRITE", "MEM_READ"];
 
let `name` =
    bit_input		    clk reset pwr_on.
    bit_list_input	    rd_reqs.
    `addr`_list_input	    rd_addrs.
    bit_list_output	    rd_acks.
    `data`_list_output	    rd_results.
    bit_input		    wr_req.
    `addr`_input		    wr_addr.
    `data`_input		    wr_data.
    bit_output		    wr_ack.
    //
    bit_list_internal MEM_BANKS	rws.
    `addr`_internal			mem_addr.
    `data`_list_internal MEM_BANKS	res_words.
    `addr`_list_internal MEM_BANKS	res_addrs.
    bit_internal			rd_ready.
    `mem_fsm`_internal			fsm.
    `rd_age`_list_internal MEM_BANKS	ages.
    `rd_id`_internal			choice.
    bit_internal			rd_done one_rd_rdy wr_done.
    `addr`_internal			rd_addr base_wr_addr offset.
    `addr`_list_internal MEM_BANKS	req_rd_addrs.
    //
    //
    CELL (sprintf "memory(%dx%d)" MEM_LINES MEM_BANKS) (
	// Banks of RAMs
	(map2 (RAM (addr2maddr mem_addr) wr_data) rws res_words)
	@
	// Bank of read_fsms
	(map (\\(req,addr,ack,res,age,req_rd_addr).
		mem_read_fsm clk reset req addr ack res age req_rd_addr
			     rd_done res_addrs res_words)
	    (zip6 rd_reqs rd_addrs rd_acks rd_results ages req_rd_addrs)
	)
	@
	(map2 (\\ra.\\i. ra <- rd_addr '+' ''i) res_addrs (0--(MEM_BANKS-1)))
	@
	(map2 (\\rw.\\i. rw <- '~' (is_MEM_WRITE fsm) '|' (offset '!=' ''i))
	      rws (0--(MEM_BANKS-1)))
	@
	[
	    Moore_FSM "mem_fsm" clk fsm (reset, IDLE) [
		IDLE	       --- wr_req     --- MEM_WRITE,
		IDLE	       --- one_rd_rdy --- MEM_READ,
		MEM_WRITE      --- wr_done    --- IDLE,
		MEM_READ       --- rd_done    --- IDLE
	    ],
	    phase_delay RAM_LATENCY (is_IDLE fsm '&' one_rd_rdy) rd_done,
	    phase_delay RAM_LATENCY (is_IDLE fsm '&' wr_req) wr_done,
	    find_max_age ages one_rd_rdy choice,
	    SELECT_list req_rd_addrs choice rd_addr,
	    base_wr_addr <- align_addr wr_addr,
	    offset <- offset_addr wr_addr,
	    wr_ack <- is_MEM_WRITE fsm '&' wr_done,
	    mem_addr <- (IF (is_MEM_WRITE fsm) THEN base_wr_addr ELSE rd_addr)
	]
);
end_abstype `name`;
 
}> "functor";

#ifdef NO_CLOCKGATING

let clockgate =
    bit_input	    clk.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en.
    CELL "clockgate" [
	eclk <- clk
];

let clockgate_with_reset =
    bit_input	    clk.
    bit_input	    reset.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en.
    CELL "clockgate" [
	eclk <- clk
];

#else

#ifdef LATCHBASED_CLOCKGATING

let clockgate =
    bit_input	    clk.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en.
    CELL "clockgate" [
	al_latch clk clkgate en,
	eclk <- en '&' clk
];

let clockgate_with_reset =
    bit_input	    clk.
    bit_input	    reset.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en.
    CELL "clockgate" [
	al_latch clk clkgate en,
	eclk <- (reset '|' en) '&' clk
];

#else

let clockgate =
    bit_input	    clk.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en nclk.
    CELL "clockgate" [
	nclk <- '~' clk,
	re_ff nclk clkgate en,
	eclk <- en '&' clk
];

let clockgate_with_reset =
    bit_input	    clk.
    bit_input	    reset.
    bit_input	    clkgate.
    bit_output	    eclk.
    bit_internal    en nclk.
    CELL "clockgate" [
	nclk <- '~' clk,
	re_ff nclk clkgate en,
	eclk <- (reset '|' en) '&' clk
];


#endif

#endif
