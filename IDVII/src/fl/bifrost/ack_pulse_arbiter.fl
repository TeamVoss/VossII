begin_abstype;

let const2list sz i =
    let s = sprintf "%0*b" sz i in
    let res = map (\s. ''(sscanf "%d" s)) (explode s) in
    {res::bit list}
;
    
let list_constant_assign i =
    bit_list_output outs.
    let s = sprintf "%0*b" (length outs) i in
    CELL s (
	map2 (\o.\d. o <- ''d) outs (map (sscanf "%d") (explode s))
);

let list_AND =
    bit_list_input  as bs.
    bit_list_output os.
    CELL "draw_and2" (map3 (\o.\a.\b. o <- a '&' b) os as bs)
;

let list_ITE =
    bit_input	    cond.
    bit_list_input  ts es.
    bit_list_output os.
    CELL "draw_ite" (map3 (\o.\t.\e. o <- (IF cond THEN t ELSE e)) os ts es)
;

letrec list_greater_rec =
    bit_list_input  as bs.
    bit_output	    gr eq.
    bit_internal    Hgr Heq Lgr Leq.
    let N = length as in
    let N2 = N/2 in
    let a = hd as in
    let b = hd bs in
    CELL "list_greater_rec" (
	N = 0 => [gr <- '0, eq <- '1] |
	N = 1 => [gr <- a '&' '~' b, eq <- (a '=' b)] |
	[
	    list_greater_rec (butlastn N2 as) (butlastn N2 bs) Hgr Heq,
	    list_greater_rec (lastn N2 as) (lastn N2 bs) Lgr Leq,
	    gr <- Hgr '|' Heq '&' Lgr,
	    eq <- Heq '&' Leq
	]
);

let list_greater =
    bit_list_input  as bs.
    bit_output	    res.
    bit_internal    eq.
    CELL "draw_binary_arithm {>}" [
	list_greater_rec as bs res eq
];


letrec find_next_rec =
    bit_list_input  reqs.
    bit_list_input  ages.
    bit_list_output m_age.
    bit_list_output sel.
    //
    let sz = length sel in
    let N = length reqs in
    let req = hd reqs in
    let age = (firstn sz ages)@[req] in
    //
    bit_list_internal (sz+1)	Hm_age Lm_age.
    bit_list_internal sz	Hsel Lsel.
    bit_internal		H.
    //
    CELL "find_next_rec" (
      N = 0 => [
	list_constant_assign 0 m_age,
	list_constant_assign 0 sel
      ] |
      N = 1 => [
	list_AND (replicate (sz+1) req) age m_age,
	list_ITE req (const2list sz 1) (const2list sz 0) sel
      ] |
      let N2 = N/2 in
      [
	find_next_rec (butlastn N2 reqs) (butlastn (sz*N2) ages) Hm_age Hsel,
	find_next_rec (lastn N2 reqs) (lastn (sz*N2) ages) Lm_age Lsel,
	list_greater Hm_age Lm_age H,
	list_ITE H Hm_age Lm_age m_age,
	list_ITE H (lastn sz (Hsel@(replicate N2 '1))) Lsel sel
      ]
);

let find_next =
    bit_list_input  reqs.
    bit_list_input  ages.
    bit_list_output sel.
    //
    let sz = length reqs in
    bit_list_internal (sz+1)	m_age.
    bit_list_internal sz	tmp.
    CELL "find_next" (
	[find_next_rec reqs ages m_age tmp] @
	(map3 (\s.\tm1.\tm0. s <- '~' tm1 '&' tm0) sel ('0:butlast tmp) tmp)
);

let age_ckt1 =
    bit_input	clk reset.
    bit_input	sel.
    bit_input	do_arb.
    bit_input	m_ack.
    bit_input	cnt_i_1.
    bit_output	cnt_i.
    CELL "age_ckt1" [
	STATE clk cnt_i [
	    (reset '|' (sel '&' m_ack),	'0),
	    (do_arb,			cnt_i_1)
	]
];

let age_ckt =
    bit_input	    clk reset.
    bit_input	    sel.
    bit_input	    do_arb.
    bit_input	    m_ack.
    bit_list_output cnts.
    CELL "age_ckt" (
      map2 (\cnt_i. \cnt_i_1. age_ckt1 clk reset sel do_arb m_ack cnt_i_1 cnt_i)
	   cnts ((tl cnts)@['1])
);

let ack_pulse_arbiter =
    bit_input		clk reset.
    bit_list_input	reqs.
    bit_list_output	acks.
    bit_output		m_req.
    bit_input		m_ack.
    bit_list_output	selected.
    //
    let sz = length reqs in
    //
    bit_list_internal (sz*sz)	ages.
    bit_list_internal sz	sel.
    bit_internal		busy do_arb.
    //
    CELL "ack_pulse_arbiter" (
	(map2 (\ack.\sel. ack <- m_ack '&' sel) acks selected)
	@
	(map2 (\sel. \cnts. age_ckt clk reset sel do_arb m_ack cnts)
	      selected (cluster sz ages))
	@
	[
	  find_next reqs ages selected
	, STATE clk busy [
		(reset,		      '0),
		(m_req '&' '~' m_ack, '1),
		(m_ack,		      '0)
	    ]
	, m_req <- OR_n reqs
	, do_arb <- '~' busy '&' m_req
	]
);

end_abstype ack_pulse_arbiter;

