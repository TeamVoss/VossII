//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

load (DIR^"../design/misc.fl");
load (DIR^"../design/util.fl");
load (DIR^"primes.fl");

// Meh...
//  shorten_sha::string->string
let shorten_sha sha = "\"" ^ substr sha 1 4 ^ "..\"";

// Fetch attribute 's'. If none exists, returns 'a'.
//  find_attr::string->string->(string#string list)->string
let find_attr s a = snd # find_maybe (defix == s # fst) ("", a);

// Fetch the "fingerprint" attribute, if any.
//  find_fingerprint::(string#string list)->int
let find_fingerprint = s2int # find_attr "FP" "0";

// Fetch the "signature" attribute, if any.
//  find_signature::(string#string list)->string
let find_signature = find_attr "SHA" "";

let pexlif_get_FP  = find_fingerprint # pexlif_get_attrs;
let pexlif_get_SHA = find_signature   # pexlif_get_attrs;
let pexlif_get_size (PINST _ _ _ _ _ _ (P_HIER cs)) = 1 + length cs
/\  pexlif_get_size _ = 1
;
let pexlif_get_actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        flatmap snd (fa_inps @ fa_outs)
;
let pexlif_get_formals (PINST _ _ _ fa_inps fa_outs _ _) =
        map fst (fa_inps @ fa_outs)
;
let pexlif_get_children (PINST _ _ _ _ _ _ (P_HIER cs)) = cs
/\  pexlif_get_children _ = []
;

//------------------------------------------------------------------------------

begin_abstype;

// Expand and pair up each formal/actual vector.
//  lineup::(formal#(actual list) list)->(formal#actual list)
let fa_lineup = flatmap (curry zip # both md_expand_vector md_expand_vectors);

// Subst. each formal by its matched actual.
//  raise::(formal#actual list)->(formal list)->(actual list)
let fa_raise = map # subst;

// Subst. each actual by its matched formal.
//  lower::(formal#actual list)->(actual list)->(formal list)
let fa_lower = map # rev_subst;

// Subst. each formal/actual pairing by 
//  promote::(formal/actual->b)->(formal#actual list)->(formal#actual list)->(a#a list)->(b#b list)
let fa_promote f ns hs = curry zip # both (f ns) (f hs) # unzip;

// Turns a subst. of formals into one over actuals.
//  fa_actualize::fa->fa->subst->subst
let fa_actualize fa_n fa_h = fa_promote fa_raise (fa_lineup fa_n) (fa_lineup fa_h);

// Turns a subst. of actuals into one over formals.
//  fa_formalize::fa->fa->subst->subst
let fa_formalize fa_n fa_h = fa_promote fa_lower (fa_lineup fa_n) (fa_lineup fa_h);

end_abstype fa_actualize fa_formalize;

//------------------------------------------------------------------------------
// Fingerprint generation for a PEXLIF.
//------------------------------------------------------------------------------

begin_abstype;

// Multiply a value by a prime.
//  pm_val::...
let pm_val = prime_mult;

// Multiply each value by a prime, starting at some 'n', and sum the results.
//  pm_list::(a->int)->int->(a list)->int
let pm_list f n vs = ixlist (\a. \i. \s. pm_val i (f a) + s) vs n;

// Gen. a fingerprint for 'MEM'.
//  fp_mem::MEM->int
let fp_mem (MEM as l ds) = pm_val 0 as + pm_val 1 l + pm_val 2 ds;

// Gen. a fingerprint for 'WEXPR'.
//  fp_w::WEXPR->int
letrec
    fp_w (W_X s)                = pm_val 1 s
/\  fp_w (W_CONST s i)          = pm_val 2 s + pm_val 3 i
/\  fp_w (W_NAMED_CONST _ s i)	= pm_val 4 s + pm_val 5 i
/\  fp_w (W_VAR s _)            = pm_val 6 s
/\  fp_w (W_EXPLICIT_VAR s _)	= pm_val 7 s
/\  fp_w (W_AND a b)            = pm_val 8 (fp_w a + fp_w b)
/\  fp_w (W_OR a b)             = pm_val 9 (fp_w a + fp_w b)
/\  fp_w (W_NOT a)              = pm_val 10 (fp_w a)
/\  fp_w (W_EQ a b)             = pm_val 11 (fp_w a + fp_w b)
/\  fp_w (W_PRED _ a)           = pm_val 12 (fp_w a)
/\  fp_w (W_GR a b)             = pm_val 13 (fp_w a) + pm_val 14 (fp_w b)
/\  fp_w (W_ADD a b)            = pm_val 15 (fp_w a + fp_w b)
/\  fp_w (W_SUB a b)            = pm_val 16 (fp_w a) + pm_val 17 (fp_w b)
/\  fp_w (W_MUL a b)            = pm_val 18 (fp_w a) + pm_val 19 (fp_w b)
/\  fp_w (W_DIV a b)            = pm_val 20 (fp_w a) + pm_val 21 (fp_w b)
/\  fp_w (W_MOD a b)            = pm_val 22 (fp_w a) + pm_val 23 (fp_w b)
/\  fp_w (W_SHL a b)            = pm_val 24 (fp_w a) + pm_val 25 (fp_w b)
/\  fp_w (W_SHR a b)            = pm_val 26 (fp_w a) + pm_val 27 (fp_w b)
/\  fp_w (W_ASHR a b)           = pm_val 28 (fp_w a) + pm_val 29 (fp_w b)
/\  fp_w (W_SX s a)             = pm_val 30 s + pm_val 31 (fp_w a)
/\  fp_w (W_ZX s a)             = pm_val 32 s + pm_val 33 (fp_w a)
/\  fp_w (W_ITE a b c)          = pm_val 34 (fp_w a) + pm_val 35 (fp_w b)
                                + pm_val 36 (fp_w c)
/\  fp_w (W_SLICE ix a)	        = pm_val 37 (fp_w a) + pm_list id 1 ix
/\  fp_w (W_NAMED_SLICE _ ix a) = pm_val 38 (fp_w a) + pm_list id 1 ix
/\  fp_w (W_UPDATE_NAMED_SLICE a _ ix b)
                                = pm_val 39 (fp_w a) + pm_val 40 (fp_w b)
                                + pm_list id 1 ix
/\  fp_w (W_CAT as)             = pm_list fp_w 41 as
/\  fp_w (W_MEM_READ m a b)     = pm_val 42 (fp_mem m) + pm_val 43 (fp_w a)
                                + pm_val 44 (fp_w b)
/\  fp_w (W_MEM_WRITE m a b d)  = pm_val 45 (fp_mem m) + pm_val 46 (fp_w a)
                                + pm_val 47 (fp_w b) + pm_val 48 (fp_w d)
;

// Gen. a fingerprint for 'UPDATE_FN'.
//  fp_fn::UPDATE_FN->int
let fp_fn (W_UPDATE_FN l r)   = pm_val 49 (fp_w l) + pm_val 50 (fp_w r)
/\  fp_fn (W_PHASE_DELAY l r) = pm_val 51 (fp_w l) + pm_val 52 (fp_w r)
;

// Gen. a fingerprint for the "formals" of an input/output declaration.
//  fp_formal::[str]->int
let fp_formal ps = pm_val 53 (sum (map md_size ps));

// Gen. a fingerprint for the internals of a 'PINST'.
//  fp_internal::[str]->int
let fp_internal ps = pm_val 54 (sum (map md_size ps));

// Gen. a fingerprint for 'CONTENT'.
//  fp_content::CONTENT->int
let fp_content (P_LEAF fs) = pm_val 59 (sum (map fp_fn fs))
/\  fp_content (P_HIER cs) =
        let go (PINST _ a _ i o t _) =
                ( find_fingerprint a
                + fp_formal (map fst i)
                + fp_formal (map fst o)
                + fp_internal t
                )
        in
        pm_val 65 (sum (map go cs))
;

// Gen. a fingerprint for the components of a 'PINST'.
//  fp_pinst::'pinst contents'->string
let fp_pinst i o t c = int2str
        ( fp_formal (map fst i)
        + fp_formal (map fst o)
        + fp_internal t
        + fp_content c
        )
;

//------------------------------------------------------------------------------

// Compute the SHA256 signature of a 'CONTENT'.
//  sha_content::content->string
let sha_content (P_LEAF fs) = sha_set fs
/\  sha_content (P_HIER cs) =
        let go (PINST n a _ i o t _) =
                ( n
                , find_signature a
                , sha256_signature (map fst i)
                , sha256_signature (map fst o)
                , sha_set t
                )
        in
        sha_set (map go cs)
;

// Compute the SHA256 signature of a 'PINST'.
//  sha_pinst::'pinst contents'->string
let sha_pinst n i o t c = sha256_signature
        ( n
        , sha256_signature (map fst i)
        , sha256_signature (map fst o)
        , sha_set t
        , sha_content c
        )
;
end_abstype fp_pinst sha_pinst;

//------------------------------------------------------------------------------
// ...
//------------------------------------------------------------------------------

// ...
let PINST n a l i o t c =
        let is_signature s = (s == "FP") OR (s == "SHA") in
        let a' = filter (NOT # is_signature # fst) a in
        let f  = ("FP",  fp_pinst    i o t c) in
        let s  = ("SHA", sha_pinst n i o t c) in
        PINST n (f : s : a') l i o t c
;

//------------------------------------------------------------------------------

// ...
//  fold_pexlif::PINST->[int]->string->PINST
let fold_pexlif pex ids name =
        val (PINST n a l i o t (P_HIER ((PINST n' a' l' i' o' t' c'):cs))) =
                fold_pexlif pex ids name
        in
        PINST n a l i o t (P_HIER ((PINST n' a' l' i' o' t' c'):cs))
;

// ...
//  unfold_pexlif::PINST->int->string->PINST
let unfold_pexlif pex id name =
        val (PINST n a l i o t (P_HIER cs)) = unfold_pexlif pex id name in
        let lbl (PINST n a l i o t c) = PINST n a l i o t c in
        PINST n a l i o t (P_HIER (map lbl cs))
;


//------------------------------------------------------------------------------

let subst_match sub (PINST n a l i1 o1 t c) (PINST _ _ _ i2 o2 _ _) =
        let sub2 = fa_actualize (i1 @ o1) (i2 @ o2) sub in
        let swap (f, as) = (f, map (subst sub2) as) in
        PINST n a l (map swap i1) (map swap o1) t c
;

//------------------------------------------------------------------------------
// Shrinking a PEXLIF.
//------------------------------------------------------------------------------

begin_abstype;
// note:
// typeabbrev {*}shr = * -> (* list)

//  shrink_2 :: (a -> [a]) -> (a,a) -> [(a,a)]
let shrink_2 s (x, y) =
          map (\a. (a, y)) (s x)
        @ map (\b. (x, b)) (s y)
;

//  shrink_list :: (a -> [a]) -> [a] -> [[a]]
letrec
    shrink_list _ []     = [[]]
/\  shrink_list s (x:xs) =
          map (\as. x : as) (shrink_list s xs)
        @ map (\a.  a : xs) (s x)
;
// todo: It might be a good idea to remove items when shrinking as well, but
// we would have to be a bit careful since things are sized and we also can't
// remove drivers.

let wT    = W_CONST 1 1;
let wF    = W_CONST 1 0;
let wZ sz = W_CONST sz 0;
let shrink_unary  s op a   = [a] @ map op (s a);
let shrink_binary s op a b = [a,b] @ map (curry op) (shrink_2 s (a,b));

//  shrink_wexpr::{wexpr}shr
// todo: 
// W_NAMED_CONST {name::string} {sz::int} {v::int}
// W_EXPLICIT_VAR {sz::int} {name::string}
// W_PRED {name::string} {cond::wexpr}
// W_NAMED_SLICE {name::string} {indices::int list} {w::wexpr}
// W_UPDATE_NAMED_SLICE {base::wexpr} {name::string} {indices::int list} {new::wexpr}
// W_MEM_READ {info::mem} {mem::wexpr} {addr::wexpr}
// W_MEM_WRITE {info::mem} {mem::wexpr} {addr::wexpr} {data::wexpr}
letrec
    shrink_wexpr (W_X sz)       = [W_X sz]
/\  shrink_wexpr (W_CONST sz v) = [W_CONST sz v]
/\  shrink_wexpr (W_VAR sz n)   = [W_VAR sz n]
/\  shrink_wexpr (W_AND a b)    = shrink_binary shrink_wexpr W_AND a b
/\  shrink_wexpr (W_OR a b)     = shrink_binary shrink_wexpr W_OR  a b
/\  shrink_wexpr (W_NOT a)      = shrink_unary  shrink_wexpr W_NOT a
/\  shrink_wexpr (W_EQ a b)     =
        [wT,wF] @ map (curry W_EQ) (shrink_2 shrink_wexpr (a,b))
/\  shrink_wexpr (W_GR a b)     =
        [wT,wF] @ map (curry W_GR) (shrink_2 shrink_wexpr (a,b))
/\  shrink_wexpr (W_ADD a b)    = shrink_binary shrink_wexpr W_ADD a b
/\  shrink_wexpr (W_SUB a b)    = shrink_binary shrink_wexpr W_SUB a b
/\  shrink_wexpr (W_MUL a b)    = shrink_binary shrink_wexpr W_MUL a b
/\  shrink_wexpr (W_DIV a b)    = shrink_binary shrink_wexpr W_DIV a b
/\  shrink_wexpr (W_MOD a b)    = shrink_binary shrink_wexpr W_MOD a b
/\  shrink_wexpr (W_ITE c a b)  = shrink_binary shrink_wexpr (W_ITE c) a b
/\  shrink_wexpr (W_SHL a b)    =
        [a] @ map (curry W_SHL)  (shrink_2 shrink_wexpr (a,b))
/\  shrink_wexpr (W_SHR a b)    =
        [a] @ map (curry W_SHR)  (shrink_2 shrink_wexpr (a,b))
/\  shrink_wexpr (W_ASHR a b)   =
        [a] @ map (curry W_ASHR) (shrink_2 shrink_wexpr (a,b))
/\  shrink_wexpr (W_SX sz a)    = [wZ sz] @ map (W_SX sz) (shrink_wexpr a)
/\  shrink_wexpr (W_ZX sz a)    = [wZ sz] @ map (W_ZX sz) (shrink_wexpr a)
/\  shrink_wexpr (W_SLICE is a) =
        [wZ (length is)] @ map (W_SLICE is) (shrink_wexpr a)
/\  shrink_wexpr (W_CAT as)     =
        [wZ (w_sizes as)] @ map W_CAT (shrink_list shrink_wexpr as)
;

//  shrink_update_fn::{update_fn}shr
// todo:
// W_PHASE_DELAY {lhs::wexpr} {rhs::wexpr}
let shrink_update_fn (W_UPDATE_FN lhs rhs) =
        map (W_UPDATE_FN lhs) (shrink_wexpr rhs)
;

//  shrink_content::{update_fn}shr->{pexlif}shr->{content}shr
let shrink_content _ g (P_HIER cs) = map P_HIER (shrink_list g cs)
/\  shrink_content f _ (P_LEAF fs) = map P_LEAF (shrink_list f fs)
;

//  shrink_pexlif::{pexlif}shr
letrec
    shrink_pexlif (PINST n as l inp out int c) =
        let f = shrink_update_fn in
        let g = shrink_pexlif in
        map (PINST n as l inp out int) (shrink_content f g c)
;

end_abstype shrink_wexpr shrink_pexlif;

//------------------------------------------------------------------------------
// Generation of a PEXLIF.
//------------------------------------------------------------------------------

let segment_at_random 1  = [1]
/\  segment_at_random sz =
        let r = random 1 sz in
        ((sz / r) + (sz % r)) : (replicate ((sz / r) - 1) r)
;
non_lazy segment_at_random;

let split_at_random2 [ ] = error "Internal: split_at_random2 [ ]"
/\  split_at_random2 [_] = error "Internal: split_at_random2 [_]"
/\  split_at_random2 xs  = split_at (random 2 (length xs)) xs
;
non_lazy split_at_random2;
// note: when, for example, splitting slices we can't have either list.

let slice_at_random lz hz =
        let lsb = random 0 (hz-lz) in
        lsb upto (lsb+lz-1)
;
non_lazy slice_at_random;
// note: old (below) doesn't work as wee need contig. slices.
//   repeat (hz-lz) remove_one (0 upto hz)

begin_abstype;

letrec
    gen_wexpr_inputs
        {is :: (wexpr#int) list}
        {sz :: int}
        =
        val (i,s) = one_of is in
        s < sz =>
            one_of_weighted
                [ (1, [W_SX sz i])
                , (1, [W_ZX sz i])
                , (2, i : gen_wexpr_inputs is (sz-s))] |
        s > sz =>
            [W_SLICE (slice_at_random sz s) i] |
        [i]
;
non_lazy gen_wexpr_inputs;

let gen_wexpr_const
        {sz :: int}
        =
        W_CONST sz (random2 sz)
;
non_lazy gen_wexpr_const;

let gen_wexpr_input
        {is :: (wexpr#int) list}
        {sz :: int}
        =
        let inputs = one_of_weighted
                [ (1, [gen_wexpr_const sz])
                , (3, gen_wexpr_inputs is sz)
                ]
        in
        length inputs == 1 => hd inputs | W_CAT inputs
;
non_lazy gen_wexpr_input;

letrec
    gen_wexpr
        {is :: (wexpr#int) list}
        {ts :: (wexpr#int) list}
        {sz :: int}
        {d  :: int}
        =
        //(printf "gen_wexpr sz=%d |ts|=%d d=%d\n" sz (length ts) d) fseq
        // If complexity 'd' is satisfied and 'ts' distributed, build leaf.
        (d <= 0) AND (length ts == 0) => gen_wexpr_input is sz |
        // If 'd' is satisfied, but some 't' is unused, pick that.
        (d <= 0) => gen_wexpr_input ts sz |
        // todo: make sure t is used?
        // Misc. for unary/binary ops.
        let gen_unary sz     = gen_wexpr is ts sz (d - 1) in
        let gen_binary sz ts = gen_wexpr is ts sz (d / 2) in
        let v   = random 1 (max 1 (log2 (max 1 sz))) in // rand. val. for const.
        let ssz = one_of [1,2,4,8,16,32] in // size hidden under ==, >.
        val (as, bs) = split_at_random ts in
        // Weights for choices, 1=valid & 0=invalid.
        let as_valid T = 1
        /\  as_valid F = 0
        in
        let d_0  = as_valid (d  <= 0) then
        let d_X  = as_valid (d  >  0) then
        let sz_1 = as_valid (sz == 1) then
        let sz_X = as_valid (sz >  1) then
        // Pick a valid PINST op.
        one_of_weighted (filter (defix < 0 # fst)
            [ (d_0,  W_NOT  (gen_unary sz))
            , (d_X,  W_AND  (gen_binary sz as)  (gen_binary sz bs))
            , (d_X,  W_OR   (gen_binary sz as)  (gen_binary sz bs))
            , (sz_1, W_EQ   (gen_binary ssz as) (gen_binary ssz bs))
            , (sz_1, W_GR   (gen_binary ssz as) (gen_binary ssz bs))
            , (sz_X, W_ADD  (gen_binary sz as)  (gen_binary sz bs))
            , (sz_X, W_SUB  (gen_binary sz as)  (gen_binary sz bs))
            , (sz_X, W_MUL  (gen_binary sz as)  (gen_binary sz bs))
            , (sz_X, W_DIV  (gen_binary sz as)  (gen_binary sz bs))
            , (sz_X, W_MOD  (gen_binary sz as)  (gen_binary sz bs))
            , (sz_X, W_SHL  (gen_wexpr is ts sz (d - 1)) (W_CONST sz v))
            , (sz_X, W_SHR  (gen_wexpr is ts sz (d - 1)) (W_CONST sz v))
            , (sz_X, W_ASHR (gen_wexpr is ts sz (d - 1)) (W_CONST sz v))
            , (d_X,  val (cs, ds)   = split_at 2 ts in
                     val (es, fs)   = split_at_random ds in
                     let gen ts sz  = gen_wexpr is ts sz (d / 3) in
                     W_ITE (gen cs 1) (gen es sz) (gen fs sz))
            , (sz_X, let sz_l = sz > 1 => random 1 (sz-1) | 1 in
                     let sz_r = sz-sz_l in
                     let wl   = gen_wexpr is as sz_l (d / 2) in
                     let wr   = gen_wexpr is bs sz_r (d / 2) in
                     W_CAT [wl, wr])
          // todo: CAT more than two?
          // note: Slices are done at leaves to ensure variable args.
          // , W_PRED ?! ?!
          // , W_NAMED_SLICE ?! ?! ?!
          // , W_UPDATE_NAMED_SLICE ?! ?! ?! ?!
          // , W_MEM_WRITE ?! ?! ?! ?!
            ])
;
non_lazy gen_wexpr;

let gen_update_fn
        {is    :: (wexpr#int) list} // Global inputs
        {ts    :: (wexpr#int) list} // Internals connected to this wire
        {(o,s) :: (wexpr#int)}      // Wire to be assigned
        {delay :: bool}             // phase-delay or update-fn?
        {d     :: int}              // Complexity of assignment
        =
        (delay => W_PHASE_DELAY | W_UPDATE_FN) o (gen_wexpr is ts s d)
;
non_lazy gen_update_fn;

let gen_update_fn_internals
        {sc    :: (bool list) list} // Connection schema for internals.
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list} // Internals to assign (ordered as in 'sc').
        {delay :: bool}
        {d     :: int}
        =
        let inputs = map (map fst # filter snd # zip ts) sc in
        map (\(t,i). gen_update_fn is (el i inputs) t delay d) (ixlabel ts)
;
non_lazy gen_update_fn_internals;

let extend_wires
        {xs   :: (wexpr#int) list}
        {size :: int}
        =
        let split (x, s) =
                val (ls, rs) = split_at_random2 ((s - 1) downto 0) in
                let slice is = (W_SLICE is x, length is) in
                [slice ls, slice rs]
        in
        let extend (x, s) =
                let b2i b = b => 1 | 0 in
                let p = (x, s) in
                one_of_weighted
                    [ (1,            [p])
                    , (b2i (s >= 1), [p, p])
                    , (b2i (s != 1), (split p)) ]
        in
        letrec
            pad [] = error "pad called with empty list"
        /\  pad xs = length xs >= size => xs | pad $ concat $ map extend xs
        in
        pad xs
;
non_lazy extend_wires;

let gen_update_fn_outputs
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list} // Internals to drive outputs.
        {os    :: (wexpr#int) list} // Outputs to be assigned.
        {delay :: bool}
        {d     :: int}
        =
        // If there aren't enough inputs to drive each output, then we must
        // first extend them by splitting/copying/... their wires.
        let l_os = length os in
        let xs'  = extend_wires ts l_os in
        map2 (\ts. \o. gen_update_fn is ts o delay d) (split_into l_os xs') os
;
non_lazy gen_update_fn_outputs;

let gen_wires
        {pre   :: string}
        {sizes :: int list}
        {num   :: int}
        =
        // When selecting a size, prefer known sizes over the random choice.
        let hist_sz = map swap (hist sizes) in
        let random_size x =
                one_of_weighted
                    [ (1, one_of [1,2,4,8,16,32]),
                      (2, one_of_weighted hist_sz) ]
        in
        // Build internal wires for node 'ix' and give it a random size.
        let new_internal i =
                let sz   = random_size i in
                let name = pre ^ (int2str i) in
                (W_VAR sz name, sz)
        in
        map new_internal (1 upto num)
;
non_lazy gen_wires;

let gen_pinst_update_fn_leaf
        {sc    :: (bool list) list}
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list}
        {os    :: (wexpr#int) list}
        {delay :: bool}
        {d     :: int}
        =
        // note: nodes without outgoing edges are connected to outputs.
        let ts_o  = map snd $ filter fst $ zip (map (NOT # any id) sc) ts in
        let fns_t = gen_update_fn_internals sc is ts delay d in
        let fns_o = gen_update_fn_outputs is ts_o os delay d in
        P_LEAF (fns_t @ fns_o)
;
non_lazy gen_pinst_update_fn_leaf;

let gen_DAG_with_threshold n p =
        letrec
            map_from _ []     _ = []
        /\  map_from f (x:xs) 0 = f x : map_from f xs 0
        /\  map_from f (x:xs) i = x   : map_from f xs (i-1)
        in
        let flip F = randomf 32 > p in
        let empty  = replicate n (replicate n F) in
        let marked = ixmap (map_from flip) empty in
        marked
;
non_lazy gen_DAG_with_threshold;

let gen_DAG n =
        gen_DAG_with_threshold n
            (fdiv (fmul 2.0 (log (int2float n))) (int2float n))
;
non_lazy gen_DAG;

let formal_to_wire f =
        let sz = md_size f in
        let n  = sz == 1 => f | hd (str_split f "[") in
        (W_VAR sz n, sz)
;

let wire_to_formal (W_VAR sz n, _) =
        sz == 1 => n | sprintf "%s[%d:0]" n (sz-1);
;

let gen_pinst_leaf
        {name  :: string}
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {delay :: bool}
        {size  :: int}
        {d     :: int}
        =
        // Build wexpr variables for each formal.
        let is = map (formal_to_wire # fst) fa_is in
        let os = map (formal_to_wire # fst) fa_os in
        // Generate DAG that dictates body of PINST and then fill it with
        // semi-random, combinatorial update-functions.
        let sc   = gen_DAG size in
        let ts   = gen_wires "i" (map snd (is @ os)) (length sc) in
        let leaf = gen_pinst_update_fn_leaf sc is ts os delay d in
        // ...
        PINST name [] T fa_is fa_os (map wire_to_formal ts) leaf
;
non_lazy gen_pinst_leaf;

let gen_pinst
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        // Split inputs between comb. & seq. parts of PINST, with the biggest
        // of the two going towards comb. logic to ensure it can drive updates.
        let ord (as, bs) = length as >= length bs => (as, bs) | (bs, as) in
        val (fa_is_c, fa_is_s) = ord $ split_at_random fa_is in
        val (fa_os_c, fa_os_s) = ord $ split_at_random fa_os in
        // Connect comb. & seq. parts via internals and build additional
        // internals wires to make up for inputs directed to comb. logic.
        let sizes  = map (md_size # fst) $ (fa_is @ fa_os) in
        let var_cs = gen_wires "ct" sizes (max 1 (length fa_is_c)) in
        let var_sc = gen_wires "st" sizes (max 1 (length fa_is_s)) in
        // ..
        let actual v = (v, [v]) in
        let f_cs = map (actual # wire_to_formal) var_cs in // comb. -> seq.
        let f_sc = map (actual # wire_to_formal) var_sc in // seq.  -> comb.
        // ...
        let c = gen_pinst_leaf "comb" (fa_is_c @ f_sc) (fa_os_c @ f_cs) F size d in
        let s = gen_pinst_leaf "seq"  (fa_is_s @ f_cs) (fa_os_s @ f_sc) T size d in
        // ...
        PINST "node" [] F fa_is fa_os (map fst (f_cs @ f_sc)) (P_HIER [c, s])
;
non_lazy gen_pinst;

let gen_pinst_hier
        {sc    :: (bool list) list}
        {fa_is :: (string#(string list)) list}
        {f_ts  :: string list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        let size'    = size / length sc in
        let actual v = (v, [v]) in
        // note: nodes whitout outgoing edges are connected to outputs.
        let ts_i  = map (map fst # filter snd # zip f_ts) sc in
        let ts_ip = map (\i. empty i => some_of fa_is | map actual i) ts_i in
        let ns_t  = map2 (\is. \o. gen_pinst is [o] size' d) ts_ip
                  $ map actual f_ts
        in
        // ...
        let l_os  = length fa_os in
        let ts_o  = map (actual # snd)
                  $ filter fst $ zip (map (NOT # any id) sc) f_ts
        in
        let ns_o  = map2 (\o. \is. gen_pinst is [o] size' d) fa_os
                  $ split_into l_os ts_o
        in
        P_HIER (ns_t @ ns_o)
;        
non_lazy gen_pinst_hier;

let gen_pinst_graph
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        let sizes = map (md_size # fst) (fa_is @ fa_os) in
        let sc    = gen_DAG size in
        let ts    = gen_wires "w" sizes (length sc) in
        let hier  =
                gen_pinst_hier sc fa_is (map wire_to_formal ts) fa_os size d
        in
        PINST "graph" [] F fa_is fa_os (map wire_to_formal ts) hier
;
non_lazy gen_pinst_graph;

end_abstype gen_pinst_leaf gen_pinst gen_pinst_graph;

// -----------------------------------------------------------------------------

begin_abstype;

// forward_declare{normalize_binary::
//     int->(wexpr->wexpr->wexpr)->wexpr->wexpr->
//     (((wexpr#wexpr) list)#(wexpr#(int#int)))
// };

forward_declare{normalize_wexpr::int->wexpr->(((wexpr#wexpr) list)#(wexpr#(int#int)))};

let normalize_unary {ix::int} {op::wexpr->wexpr} {a::wexpr} =
        val (ss, a', ix', asz) = normalize_wexpr ix a in
        (ss, op a', ix', asz)
;

let normalize_binary {ix::int} {op::wexpr->wexpr->wexpr} {a::wexpr} {b::wexpr} =
        val (ss,  a', ix',  asz) = normalize_wexpr ix  a in
        val (ss', b', ix'', _)   = normalize_wexpr ix' b in
        (ss@ss', op a' b', ix'', asz)
;

let normalize_slice {ix::int} (W_SLICE is v) =
        // Slices are only allowed on certain things, make sure this is it.
        let is_var (W_VAR _ _) = T
        /\  is_var (W_EXPLICIT_VAR _ _) = T
        /\  is_var _ = F
        in
        val (ss,  v',  ix', sz) = normalize_wexpr ix v in
        val (ss', v'', ix'') = is_var v' => (ss, v', ix') |
                let var = W_VAR sz (sprintf "norm_slice_%d" ix') in
                ((var, v') : ss, var, ix' + 1)
        in
        // Can't have non-contig. indexing in Verilog, so we split each non-
        // contig. interval into its own slice and concatenate them all.
        letrec
            fill m l = m == l => [m] | m : fill (m-1) l
        in
        let slice (BR_SINGLE ix) = W_SLICE [ix] v''
        /\  slice (BR_SLICE m l) = W_SLICE (fill m l) v''
        in
        // Can't have empty slices.
        length is == 0 => error "Slice without indices" |
        let ws = map slice (group_indices is) in
        let w  = length ws == 1 => hd ws | W_CAT ws in
        (ss', w, ix'', length is)
;

letrec
    normalize_wexpr ix (W_X sz) = ([], W_X sz, ix, sz)
/\  normalize_wexpr ix (W_CONST sz v) = ([], W_CONST sz v, ix, sz)
/\  normalize_wexpr ix (W_NAMED_CONST n sz v) = ([], W_NAMED_CONST n sz v, ix, sz)
/\  normalize_wexpr ix (W_VAR sz b) = ([], W_VAR sz b, ix, sz)
/\  normalize_wexpr ix (W_EXPLICIT_VAR sz n) = ([], W_EXPLICIT_VAR sz n, ix, sz)
/\  normalize_wexpr ix (W_AND a b)  = normalize_binary ix W_AND a b
/\  normalize_wexpr ix (W_OR a b)   = normalize_binary ix W_OR a b
/\  normalize_wexpr ix (W_NOT a)    = normalize_unary  ix W_NOT a
/\  normalize_wexpr ix (W_EQ a b)   = normalize_binary ix W_EQ a b
/\  normalize_wexpr ix (W_PRED n c) = normalize_unary  ix (W_PRED n) c
/\  normalize_wexpr ix (W_GR a b)   = normalize_binary ix W_GR a b
/\  normalize_wexpr ix (W_ADD a b)  = normalize_binary ix W_ADD a b
/\  normalize_wexpr ix (W_SUB a b)  = normalize_binary ix W_SUB a b
/\  normalize_wexpr ix (W_MUL a b)  = normalize_binary ix W_MUL a b
/\  normalize_wexpr ix (W_DIV a b)  = normalize_binary ix W_DIV a b
/\  normalize_wexpr ix (W_MOD a b)  = normalize_binary ix W_MOD a b
/\  normalize_wexpr ix (W_SHL a b)  = normalize_binary ix W_SHL a b
/\  normalize_wexpr ix (W_SHR a b)  = normalize_binary ix W_SHR a b
/\  normalize_wexpr ix (W_ASHR a b) = normalize_binary ix W_ASHR a b
/\  normalize_wexpr ix (W_SX sz (W_VAR sz_v v)) =
        ([], W_SX sz (W_VAR sz_v v), ix, sz)
/\  normalize_wexpr ix (W_SX sz (W_EXPLICIT_VAR sz_v v)) =
        ([], W_SX sz (W_VAR sz_v v), ix, sz)
// If 'W_SX' is called on anything but a variable we need to split the 'wexpr'
// and name the intermediate result.
/\  normalize_wexpr ix (W_SX sz w) =
        val (ss, w', ix', sz') = normalize_wexpr ix w in
        let v   = W_VAR sz' (sprintf "norm_sx_%d" ix') in
        let ss' = (v,w') : ss in
        (ss', W_SX sz v, ix + 1, sz)        
/\  normalize_wexpr ix (W_ZX sz a)  =
        val (ss, a', ix', _) = normalize_wexpr ix a in
        (ss, W_ZX sz a', ix', sz)
/\  normalize_wexpr ix (W_ITE c a b) =
        val (ss,   c', ix',  _)   = normalize_wexpr ix c in
        val (ss',  a', ix',  asz) = normalize_wexpr ix a in
        val (ss'', b', ix'', _)   = normalize_wexpr ix b in
        (ss@ss'@ss'', W_ITE c' a' b', ix'', asz)
// If 'W_SLICE' or 'W_NAMED_SLICE' is called on anything but a variable we need
// to split the 'wexpr' and name the intermediate result.
/\  normalize_wexpr ix (W_SLICE is v) =
        normalize_slice ix (W_SLICE is v)
/\  normalize_wexpr ix (W_NAMED_SLICE _ is v) =
        print "NAMED_SLICE is treated as SLICE" fseq
        normalize_slice ix (W_SLICE is v)
/\  normalize_wexpr ix (W_CAT ws) =
        letrec
            go []     = ([],[],ix,0)
        /\  go (a:as) =
                val (ss, as', ix, szs) = go as in
                val (ss', a', ix', sz) = normalize_wexpr ix a in
                (ss'@ss, a':as', ix', sz+szs)
        in
        val (ss, ws', ix', sz) = go ws in
        (ss, W_CAT ws', ix', sz)
// Not sure what to do with named slices and memory.
/\  normalize_wexpr ix _ =
        error "normalize_wexpr: W_UPDATE_NAMED_SLICE/W_MEM_[READ|WRITE]"
;
// todo: name clashes?
// todo: some missing cases.
// todo: split non-contig. slices into a concatenation of its contig.
// sub-slices/indices, for example:
//   (i2[31:0])[16,25] -> {(i2[31:0])[16],(i2[31:0])[25]}

let normalize_update_fn ix (W_UPDATE_FN lhs rhs) =
        val (ss, rhs', ix', _) = normalize_wexpr ix rhs in
        let mk (W_VAR sz v, _) = sz == 1 => v | sprintf "%s[%d:0]" v (sz-1) in
        (W_UPDATE_FN lhs rhs' : map (curry W_UPDATE_FN) ss, ix', map mk ss)
/\  normalize_update_fn _ (W_PHASE_DELAY _ _) =
        error "normalize_update_fn: W_PHASE_DELAY"
;

// Rewrites a pexlif into its "normal" form, where 'normalize' basically means
// 'supports translation into Verilog'. This "normal" form requires that:
//    1) Any 'update_fn's LHS is either a name, a sliced name, or a (possibly 
//       nested) concatenation of such names (*).
//    2) Slices are contig. on fully indexed arrays (*).
//    3) Slices are only made on variables.
//    4) Sign extensions are only made on variables.
//
// [*] See 'valid_lhs' in "IDVII/src/fl/verilog/pretty-pexlif/" for a FL def. of
// what it considers to be valid LHSs.
//
// Rewriting can thus introduce additional internal wires.
letrec
    normalize_pexlif (PINST name attrs T fa_inps fa_outs internals (P_LEAF fs)) =
        letrec
            go []     = ([], 0, [])
        /\  go (f:fs) =
                val (gs, ix,  is) = go fs in
                val (hs, ix', js) = normalize_update_fn ix f in
                (hs@gs, ix', js@is)
        in
        val (fs', _, vs) = go fs in
        let internals' = internals @ vs in
        PINST name attrs T fa_inps fa_outs internals' (P_LEAF fs')
/\  normalize_pexlif (PINST name attrs F fa_inps fa_outs internals (P_HIER cs)) =
        let cs' = map normalize_pexlif cs in
        PINST name attrs F fa_inps fa_outs internals (P_HIER cs')
;
// todo: normalize indices.
// todo: what do we do about slices in delays? split size to comb. and use new
// slice-variable in phase delay?

end_abstype normalize_pexlif;

// -----------------------------------------------------------------------------

begin_abstype;

let str_is_signature s = s == "FP" OR s == "SHA";
let filter_signatures  = filter (NOT # str_is_signature # fst);

let collect_names wexpr =
        letrec 
            collect (W_X _) = []
        /\  collect (W_CONST _ _) = []
        /\  collect (W_NAMED_CONST n sz _) = [(n, sz)]
        /\  collect (W_VAR sz s) = [(s, sz)]
        /\  collect (W_EXPLICIT_VAR sz s) = [(s, sz)]
        /\  collect (W_AND a b) = collect a @ collect b
        /\  collect (W_OR a b) = collect a @ collect b
        /\  collect (W_NOT a) = collect a
        /\  collect (W_EQ a b) = collect a @ collect b
        /\  collect (W_PRED _ c) = collect c
        /\  collect (W_GR a b) = collect a @ collect b
        /\  collect (W_ADD a b) = collect a @ collect b
        /\  collect (W_SUB a b) = collect a @ collect b
        /\  collect (W_MUL a b) = collect a @ collect b
        /\  collect (W_DIV a b) = collect a @ collect b
        /\  collect (W_MOD a b) = collect a @ collect b
        /\  collect (W_SHL a b) = collect a @ collect b
        /\  collect (W_SHR a b) = collect a @ collect b
        /\  collect (W_ASHR a b) = collect a @ collect b
        /\  collect (W_SX _ w) = collect w
        /\  collect (W_ZX _ w) = collect w
        /\  collect (W_ITE c a b) = collect c @ collect a @ collect b
        /\  collect (W_SLICE _ w) = collect w
        /\  collect (W_NAMED_SLICE _ _ w) = collect w
        /\  collect (W_UPDATE_NAMED_SLICE a _ _ b) = collect a @ collect b
        /\  collect (W_CAT as) = concat (map collect as)
        /\  collect (W_MEM_READ _ m a) = collect m @ collect a
        /\  collect (W_MEM_WRITE _ m a d) = collect m @ collect a @ collect d
        in
        setify $ collect wexpr
;
// todo: not sure about size on 'W_UPDATE_NAMED_SLICE'.

let name_to_formal_actuals n sz =
        let f = sz == 1 => n | sprintf "%s[%d:0]" n (sz-1) in (f, [f])
;

let draw_hier_leaf fs =
        let collect = map (curry name_to_formal_actuals) # collect_names in
        let draw_hier (W_UPDATE_FN lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " <- " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_UPDATE_FN lhs rhs])
        /\  draw_hier (W_PHASE_DELAY lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " := " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_PHASE_DELAY lhs rhs])
        in
        P_HIER (map draw_hier fs)
;

letrec
    draw_hier_pinst (PINST n as T is os ts (P_LEAF fs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (draw_hier_leaf fs)
/\  draw_hier_pinst (PINST n as F is os ts (P_HIER cs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (P_HIER (map draw_hier_pinst cs))
;

let decorate_pexlif_hiers = draw_hier_pinst;

end_abstype decorate_pexlif_hiers;

//------------------------------------------------------------------------------
// Fin.
