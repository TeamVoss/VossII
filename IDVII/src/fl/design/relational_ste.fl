let wexpr_hw_type_name {bv::wexpr} = "wexpr";
let wexpr_hw_mk_var {we::wexpr} base = W_VAR 0 base;
let wexpr_hw_is_arithmetic {e::wexpr} = T;
let wexpr_hw_size {e::wexpr} = wexpr_size e;
let wexpr_hw_destr {e::wexpr} = e;
let wexpr_hw_constr {e::wexpr} = e;
let wexpr_hw_values {e::wexpr} = error "Not relevant";

let wexpr_hw_type_destr {p::wexpr} =
	    HW_TYPE wexpr_hw_type_name
		    wexpr_hw_mk_var 
		    wexpr_hw_is_arithmetic 
		    wexpr_hw_size 
		    wexpr_hw_destr 
		    wexpr_hw_constr 
		    wexpr_hw_values
; 
add_open_overload hw_type_destr wexpr_hw_type_destr;

begin_abstype;

let at_phase vec ph =
    let sz = md_size vec in
    W_EXPLICIT_VAR sz (sprintf "@%d_%s" ph vec)
;
infix 9 at_phase;

let at_cycle vec cyc =
    let sz = md_size vec in
    W_EXPLICIT_VAR sz (sprintf "@%d_%s" (2*cyc) vec)
;
infix 9 at_cycle;

let ASSERT {name::string} {b::bit} =
    let we = hw_destr b in
    (name, we)
;

let mk_phase_delays n i o =
    let sz = md_size i in
    md_size o != sz =>
	eprintf "Size mismatch in mk_phase_delays |%s| != |%s|" i o
    |
    let fi = mk_name sz "i" in
    let fo = mk_name sz "o" in
    let mids = map (\i. mk_name sz (sprintf "m%d" i)) (1 upto n) in
    let fns =
	map2 (\i.\o. W_PHASE_DELAY (W_EXPLICIT_VAR sz o) (W_EXPLICIT_VAR sz i))
	     (o:mids) (mids@[i])
    in
    PINST (sprintf "draw_hfl phase_delay(%d)" n) [] T
	    [(fi,[i])] [(fo,[o])] mids (P_LEAF fns)
;


clet prop2pexlif nwe =
    val (name, we) = nwe in
    let timed_inps = setify (map (sscanf "@%d_%s") (w_depends we)) in
    let min_time = itlist (\(t,_).\m. min t m) timed_inps 100000 in
    let max_time = itlist (\(t,_).\m. max t m) timed_inps (-1000) in
    let vecs = setify (map snd timed_inps) then
    let pfn = sprintf "draw_hier %s" name in
    let mk_fa pin idx =
	    let sz = md_size pin in
	    let f = mk_name sz (sprintf "i%d" idx) in
	    (f, [pin])
    in
    let fa_inps = map2 mk_fa vecs (1 upto (length vecs)) in
    let ok = sprintf "%s_ok" name in
    let fa_outs = [(ok, [ok])] in
    let io_map = map (\(f,[an]). an, f) fa_inps in
    let shifted_tinps = setify (map (\(t,n). t-min_time, n) timed_inps) in
    let need_delays = filter (\(t,n). t != 0) shifted_tinps in
    let mk_delay (t,pin) =
	let f = assoc pin io_map in
	let df = sprintf "d%d_%s" t f in
	df, mk_phase_delays t f df
    in
    val (internals, delays) = unzip (map mk_delay need_delays) in
    let mk_sub (t,pin) = 
	let sz = md_size pin in
	let nm = sprintf "@%d_%s" t pin in
	let f = assoc pin io_map in
	let t' = t - min_time in
	t' = 0 => (nm, W_EXPLICIT_VAR sz f) |
	let df = W_EXPLICIT_VAR sz (sprintf "d%d_%s" t' f) in
	(nm, df)
    in
    let wsub = map mk_sub timed_inps in
    let we' = w_substitute wsub we in
    let comb = base_assignment T (W_VAR 1 ok) we' in
    let monitor = PINST (sprintf "draw_hier %s" name) [] F
			fa_inps fa_outs internals (P_HIER (comb:delays))
    in
    let connections = map (\(f,[a]). f,a) fa_inps in
    let mk_ant (t,v) =
	let mkvar n = variable (sprintf "@%d_%s" t n) in
	map (\nd. T, nd, mkvar nd, t, t+1) (md_expand_vector v)
    in
    let ant = flatmap mk_ant timed_inps in
    let cond = hd (wexpr2bool [] we) in
    let cons = [(T, ok, T, max_time, max_time+1)] in
    cond, ant, cons, (monitor,connections)
;


let rels2STE {ckt::pexlif} assumes asserts =
    let assumes = map2 (\i. \(n,e). sprintf "assume_%d_%s" i n, e)
		       (1 upto (length assumes)) assumes
    in
    let asserts = map2 (\i. \(n,e). sprintf "assert_%d_%s" i n, e)
		       (1 upto (length asserts)) asserts
    in
    let assume_dta = map prop2pexlif assumes in
    let assert_dta = map prop2pexlif asserts in
    let get_ckt (cond, ant, cons, (p,conns)) = p,conns in
    let monitors = map get_ckt (assume_dta @ assert_dta) in
    let ckt' = itlist (\(p,conns).\cur. add_monitor cur p conns) monitors ckt in
    let get_assume_ant (cond,ant,cons,_) = substitute (param cond) ant in
    let assume_ants = flatmap get_assume_ant assume_dta in
    let get_assert_cons (cond,ant,cons,_) = cons in
    let assert_cons = flatmap get_assert_cons assert_dta in
    (pexlif2fsm ckt'), assume_ants, assert_cons
;

end_abstype at_phase at_cycle ASSERT rels2STE;

