//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

//------------------------------------------------------------------------------
// Random functions that I think are just neat.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// General.

// Boolean implication.
let <==> a b = a = b;
infix 2 <==>;

// Check if 'p' is satisfied with all elements of 'as'.
//  all::(a->bool)->(a list)->bool
let all p as = AND_list (map p as);

// Check if 'p' is satisfied with any element of 'as'.
//  any::(a->bool)->(a list)->bool
let any p as = OR_list (map p as);

// Constant function.
//  const::a->b->a
let const a b = a;

// Flip the arguments of a function.
//  flip::(a->b->c)->b->a->c
let flip f a b = f b a;

// Infinite list of repeated applications of 'f' to 'x'.
//     iterate::(a->a)->a->(a list)
letrec iterate f x = x : iterate f (f x);

// Apply 'f' to 'x' 'n' times.
//  repeat::int->(a->a)->a->a
let repeat n f x = el (n+1) (iterate f x);

// "Curry" a function.
//  curry::((a->b->c)->(a#b)->c
let curry f (a,b) = f a b;

// Un"curry" a function.
//  uncurry::((a#b)->c)->a->b->c
let uncurry f a b = f (a,b);

// Runs the binary function g on the results of applying unary function f to two
// arguments x and y.
//  on::(b->b->c)->(a->b)->a->a->c
let on g f x y = g (f x) (f y);
infix 3 on;

// ...
//  cmp_fun::[>,<,unary_minus].a->a->int
let cmp_fun x y = x > y => 1 | x < y => (-1) | 0;

// Substitution of a value 'n' given its presence in 's'.
//  subst::((a#a) list)->a->a
let subst s n = (assoc n s) catch n;

// Substitution of a value 'n' given its presence in a flipped 's'.
//  rev_subst::((a#a) list)->a->a
let rev_subst s n = (rev_assoc n s) catch n;

// Apply 'f' to the first element of pair '(a,b)'.
//  first::(a->c)->(a#b)->(c#b)
let first f (a,b) = (f a,b);

// Apply 'f' to the second element of a pair '(a,b)'.
//  second::(b->d)->(a#b)->(a#d)
let second f (a,b) = (a,f b);

// For a pair '(a,b)', apply 'f' to 'a' and 'g' to 'b'.
//  both::(a->c)->(b->d)->(a#b)->(c#d)
let both f g (a,b) = (f a,g b);

// 'map' with its arguments flipped.
//  pam::(a list)->(a->b)->(b list)
let pam = flip map;

// ...
//  pair::a->b->(a#b)
let pair a b = (a,b);

// Swaps the element's of a pair.
//  swap::(a#b)->(b#a)
let swap (a,b) = (b,a);

//------------------------------------------------------------------------------
// Optional.

// If the 'm' is 'NONE', returns 'b'. Otherwise, applies 'f' to value of 'm'.
//  maybe::b->(a opt)->(a->b)->b
let maybe b m f = has_value m => f (get_value m) | b;

// ...
//  when::(a opt)->(a->b)->(b opt)
let when m f = maybe NONE m (SOME # f);

// ...
//  filter_some::((* opt) list)->(* list)
let filter_some = map get_value # filter has_value;

// ...
//  map_some::(*->opt **)->(* list)->(** list)
let map_some f = filter_some # map f;

// ...
//  filter_opt::(*->bool)->((* opt) list)->((* opt) list)
let filter_opt f = filter (\o. has_value o AND f (get_value o));

// ...
//  exhaust::((a opt) list)->(a opt)
letrec
    exhaust []     = NONE
/\  exhaust (x:xs) = maybe (exhaust xs) x SOME
;

//------------------------------------------------------------------------------
// List.

// Checks if a list has at least one element.
//  nonempty::(a list)->bool
let nonempty = NOT # empty;

// Drops the first element of a list.
//  butfirst::(a list)->(a list)
let butfirst = tl;

// Checks if an element is a memeber of the given list.
//  elem::a->(a list)->bool
let elem a as = find_first0 (defix == a) as != 0;

// Find first element accepted by 'f' in 'xs'. If none is found, returns 'x'.
//  find_maybe::(a->bool)->a->(a list)->a
let find_maybe f x xs = let i = find_first0 f xs in i == 0 => x | (el i xs);

// Sum a list of integers.
//  sum::(int list)->int
let sum as = sitlist (defix +) as 0;

// Takes two lists and returns a list of corresponding pairs. If one input list
// is short, excess elements of the longer list are discarded.
//  zip_uneven::(a list)->(b list)->((a#b) list)
letrec
    zip_uneven (x:xs) (y:ys) = (x,y) : zip_uneven xs ys
/\  zip_uneven _      []     = []
/\  zip_uneven []     _      = []
;

// ...
//
// let unzip3 [] = ([],[],[])
// /\  unzip3 ((x,y,z):as) = val (xs,ys,zs) = unzip3 as in (x:xs,y:ys,z:zs)
// ;

// ...
//  concat::((a list) list)->(a list)
let concat xs = itlist (defix @) xs [];

// ...
//  concatMap::(a->b list)->(a list)->(b list)
let concatMap f = concat # map f;

// Fold (rigth-to-left) 'xs' into itself with 'f'.
//  itlist1::(a->a->a)->(a list)->a
let itlist1 f (x:xs) = sitlist f xs x;

// Fold (rigth-to-left) 'xs' into 'b' with 'f'.
//  ixlist::(a->int->b->b)->(a list)->b->b
let ixlist f xs b = snd (sitlist (\x. \(ix,s). (ix-1,f x ix s)) xs (length xs,b));

// ...
//  ixmap::(a->int->b)->(a list)->(b list)
let ixmap f xs = ixlist (\x. \ix. (defix :) (f x ix)) xs [];
let ixmap2 f xs ys = ixmap (curry f) (zip xs ys);

// Label each element with its index in the list.
//  ixlabel::(a list)->((a#int) list)
let ixlabel = flip zip_uneven (iterate (defix + 1) 1);

// ...
//  span::(a->bool)->(a list)->((a list)#(a list))
letrec
    span _ []     = ([], [])
/\  span p (x:xs) = p x => val (ys,zs) = span p xs in (x:ys,zs) | ([],x:xs)
;

// Group 'xs' into sublists that satisfy 'p'.
//  group::(a->a->bool)->(a list)->((a list) list)
letrec
    group _ []     = []
/\  group p (x:xs) = val (ys,zs) = span (p x) xs in (x:ys) : group p zs
;

// Build histogram from list.
//  hist::{>}.(a list)->((a#int) list)
let hist = map (\a. (hd a, length a)) # group (defix ==) # qsort cmp_fun;

// ...
//  split_at::int->(a list)->((a list)#(a list))
let split_at n xs =
        letrec
            go _ []     = ([], [])
        /\  go 2 (y:ys) = ([y], ys)
        /\  go m (y:ys) = val (as, bs) = go (m-1) ys in (y:as, bs)
        in
        n <= 1 => ([], xs) | go n xs
;

// ...
//  chunks::int->(a list)->((a list) list)
letrec
    chunks _ [] = []
/\  chunks n xs =
        val (as, bs) = split_at (n + 1) xs in
        as : chunks n bs
;

// ...
//  split_into::int->(a list)->((a list) list)
let split_into n xs =
        let y = length xs in
        n > y => eprintf "split_into: list shorter than %d." n |
        val (as, bs) = split_at ((y / n) + (y % n) + 1) xs in
        as : chunks (y / n) bs
;

// ...
//  remove::int->(a list)->(a list)
let remove n xs =
        val (as, bs) = split_at n xs in
        empty bs => as | as @ (tl bs)
;

// Modify the 'n'th element of a list 'xs' with 'f'.
//  modify::(a->a)->int->(a list)->(a list)
let modify f n xs =
        val (as, bs) = split_at n xs in
        empty bs => as | as @ (f (hd bs) : tl bs)
;

// ...
//  reorder::(int list)->(a list)->(a list)
let reorder os xs = qsort ((defix -) on fst) (zip os xs);

// Left-shift a list one element.
//  rotate::(a list)->(a list)
let rotate (x:xs) = xs @ [x];

// Left-shift a list 'l'-elements.
//  rotations::int->(a list)->((a list) list)
let rotations l xs = firstn l (iterate rotate xs);

// Generate every permutation of a list.
//  permutations::(a list)->((a list) list)
letrec
    permutations xs =
        letrec
            perms []     _  = []
        /\  perms (t:ts) js =
                let
                    interleave xs r =
                        letrec
                            interleave' _ []     r = (ts, r)
                        /\  interleave' f (y:ys) r =
                                val (us,zs) = interleave' (f # (defix : y)) ys r in
                                (y:us, f (t:y:us) : zs)
                        in                         
                        val (_,zs) = interleave' id xs r in zs
                in
                sitlist interleave (permutations js) (perms ts (t:js))
        in
        xs : perms xs []
;

//------------------------------------------------------------------------------
// String.

// Drops the first 'n' characters from the string 's'.
//  string_butfirstn::string->int->string
let string_butfirstn s n = el (n+1) (iterate (string_tl) s);

// Short-hand for 'string_tl'.
//  string_butfirst::string->string
let string_butfirst = string_tl;

// Short-hand for 'string_butlastn 1'.
//  string_butlast::string->string
let string_butlast s = string_butlastn s 1;

// Checks if a string is empty.
//  string_empty::string->bool
let string_empty s = strlen s == 0;

// ...
//  string_concat::(string list)->string
let string_concat ss = itlist (defix ^) ss "";

// Replace every occurence of 'x' with 'y' in 's'.
//  string_replace::string->string->string->string
let string_replace s x y = let xs = str_split s x in list2str T "" y "" id xs;

// Keep only the characters in 's' that satisfy the predicate 'pred'.
let string_filter s pred = list2str T "" "" "" id (filter pred (explode s));

//------------------------------------------------------------------------------
// Random.

let one_of [] = eprintf "one_of called on empty list"
/\  one_of xs = el (random 1 (length xs)) xs
;
non_lazy one_of;

let one_of_weighted [] = eprintf "one_of_weighted called on empty list"
/\  one_of_weighted xs =
        letrec
            pick _ []         = eprintf "?!"
        /\  pick n ((k,a):as) = (n <= k) => a | pick (n - k) as
        in
        pick (random 1 (sum (map fst xs))) xs
;
non_lazy one_of_weighted;

let remove_one [] = []
/\  remove_one xs = remove (random 1 (length xs)) xs
;
non_lazy remove_one;

let some_of [ ] = [ ]
/\  some_of [x] = [x]
/\  some_of xs  = repeat (random 0 (length xs - 1)) remove_one xs
;
non_lazy some_of;

let split_at_random [] = ([],[])
/\  split_at_random xs = split_at (random 1 (length xs + 1)) xs
;
non_lazy split_at_random;

//------------------------------------------------------------------------------
// SHA.

// Compute the SHA256 signature of a 'set' of components.
//  sha_set::(a list)->string
let sha_set = sha256_signature # qsort strcmp # map sha256_signature;

//------------------------------------------------------------------------------
// Fin.