//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

//------------------------------------------------------------------------------
// Random functions that I think are just neat.
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// General.

// Boolean implication.
let <==> a b = a = b;
infix 2 <==>;

// Check if 'p' is satisfied with all elements of 'as'.
//  all::(a->bool)->(a list)->bool
let all p as = AND_list (map p as);

// Check if 'p' is satisfied with any element of 'as'.
//  any::(a->bool)->(a list)->bool
let any p as = OR_list (map p as);

// Constant function.
//  const::a->b->a
let const a b = a;

// Flip the arguments of a function.
//  flip::(a->b->c)->b->a->c
let flip f a b = f b a;

// Infinite list of repeated applications of 'f' to 'x'.
//     iterate::(a->a)->a->(a list)
letrec iterate f x = x : iterate f (f x);

// "Curry" a function.
//  curry::((a->b->c)->(a#b)->c
let curry f (a,b) = f a b;

// Un"curry" a function.
//  uncurry::((a#b)->c)->a->b->c
let uncurry f a b = f (a,b);

// Runs the binary function g on the results of applying unary function f to two
// arguments x and y.
//  on::(b->b->c)->(a->b)->a->a->c
let on g f x y = g (f x) (f y);
infix 3 on;

// Substitution of a value 'n' given its presence in 's'.
//  subst::((a#a) list)->a->a
let subst s n = (assoc n s) catch n;

// Substitution of a value 'n' given its presence in a flipped 's'.
//  rev_subst::((a#a) list)->a->a
let rev_subst s n = (rev_assoc n s) catch n;

// Apply 'f' to the first element of pair '(a,b)'.
//  first::(a->c)->(a#b)->(c#b)
let first f (a,b) = (f a,b);

// Apply 'f' to the second element of a pair '(a,b)'.
//  second::(b->d)->(a#b)->(a#d)
let second f (a,b) = (a,f b);

// Apply 'f' and 'g' to the first and second element of a pair '(a,b)', respectively.
//  both::(a->c)->(b->d)->(a#b)->(c#d)
let both f g (a,b) = (f a,g b);

// 'map' with its arguments flipped.
//  pam::(a list)->(a->b)->(b list)
let pam = flip map;

// Swaps the element's of a pair.
//  swap::(a#b)->(b#a)
let swap (a,b) = (b,a);

//------------------------------------------------------------------------------
// Optional.

// If the 'm' is 'NONE', returns 'b'. Otherwise, applies 'f' to value of 'm'.
//  maybe::b->(a opt)->(a->b)->b
let maybe b m f = has_value m => f (get_value m) | b;

// ...
//  when::(a opt)->(a->b)->(b opt)
let when m f = maybe NONE m (SOME # f);

// ...
//  filter_some::((* opt) list)->(* list)
letrec
    filter_some []            = []
/\  filter_some (NONE:xs)     = filter_some xs
/\  filter_some ((SOME x):xs) = x : filter_some xs
;

// ...
//  exhaust::((a opt) list)->(a opt)
letrec
    exhaust []     = NONE
/\  exhaust (x:xs) = maybe (exhaust xs) x SOME
;

//------------------------------------------------------------------------------
// List.

// Checks if a list has at least one element.
//  nonempty::(a list)->bool
let nonempty = NOT # empty;

// Drops the first element of a list.
//  butfirst::(a list)->(a list)
let butfirst = tl;

// Sum a list of integers.
//  sum::(int list)->int
let sum as = sitlist (\a. \s. a + s) as 0;

// Takes two lists and returns a list of corresponding pairs. If one input list
// is short, excess elements of the longer list are discarded.
//  zip_uneven::(a list)->(b list)->((a#b) list)
letrec
    zip_uneven (x:xs) (y:ys) = (x,y) : zip_uneven xs ys
/\  zip_uneven _      []     = []
/\  zip_uneven []     _      = []
;

// Fold (rigth-to-left) 'xs' into itself with 'f'.
//  itlist1::(a->a->a)->(a list)->a
let itlist1 f (x:xs) = sitlist f xs x;

// Fold (rigth-to-left) 'xs' into 'b' with 'f'.
//  ixlist::(a->int->b->b)->(a list)->b->b
let ixlist f xs b = snd (sitlist (\x. \(ix,s). (ix-1,f x ix s)) xs (length xs,b));

// ...
//  ixmap::(a->int->b)->(a list)->(b list)
let ixmap f xs = ixlist (\x. \ix. (defix :) (f x ix)) xs [];

// Label each element with its index in the list.
//  ixlabel::(a list)->((a#int) list)
let ixlabel = flip zip_uneven (iterate (defix + 1) 1);

// ...
//  span::(a->bool)->(a list)->((a list)#(a list))
letrec
    span _ []     = ([], [])
/\  span p (x:xs) = p x => val (ys,zs) = span p xs in (x:ys,zs) | ([],x:xs)
;

// ...
//  group::(a->a->bool)->(a list)->((a list) list)
letrec
    group _ []     = []
/\  group p (x:xs) = val (ys,zs) = span (p x) xs in (x:ys) : group p zs
;

// ...
//  reorder::(int list)->(a list)->(a list)
letrec
    reorder []     _  = []
/\  reorder (o:os) xs = el o xs : reorder os xs
;

// Modify the 'n'th element of a list 'xs' with 'f'.
//  modify::(a->a)->int->(a list)->(a list)
letrec
    modify _ _ []     = []
/\  modify f 1 (x:xs) = f x : xs
/\  modify f n (x:xs) = x : modify f (n-1) xs
;

// Set the 'n'th element of a list 'x' to 'v'.
//  list_update::a->int->(a vec)->(a vec)
let list_update v i = modify (const v) i;

// Checks if an element is a memeber of the given list.
//  elem::a->(a list)->bool
let elem a as = find_first0 (defix == a) as != 0;

// Left-shift a list one element.
//  rotate::(a list)->(a list)
let rotate (x:xs) = xs @ [x];

// Left-shift a list 'l'-elements.
//  rotations::int->(a list)->((a list) list)
let rotations l xs = firstn l (iterate rotate xs);

// Generate every permutation of a list.
//  permutations::(a list)->((a list) list)
letrec
    permutations xs =
        letrec
            perms []     _  = []
        /\  perms (t:ts) js =
                let
                    interleave xs r =
                        letrec
                            interleave' _ []     r = (ts, r)
                        /\  interleave' f (y:ys) r =
                                val (us,zs) = interleave' (f # (defix : y)) ys r in
                                (y:us, f (t:y:us) : zs)
                        in                         
                        val (_,zs) = interleave' id xs r in zs
                in
                sitlist interleave (permutations js) (perms ts (t:js))
        in
        xs : perms xs []
;

//------------------------------------------------------------------------------
// Matrix.

// Removes the first column and row of a matrix.
//  mat_tl::(* mat)->(* mat)
let mat_tl = map tl # tl;

// Set the '(i,j)'th element of matrix 'mat' to 'v'.
//  mat_update::a->(int#int)->(a mat)->(a mat)
let mat_update v (i,j) = modify (list_update v j) i;

// Count the number of rows in a matrix.
//  num_rows::(a mat)->int
let num_rows = length;

// Count the number of columns in a square matrix.
//  num_columns::(a mat)->int
let num_columns xs = empty xs => 0 | length (hd xs);

//------------------------------------------------------------------------------
// String.

// Drops the first 'n' characters from the string 's'.
//  string_butfirstn::string->int->string
let string_butfirstn s n = el (n+1) (iterate (string_tl) s);

// Short-hand for 'string_tl'.
//  string_butfirst::string->string
let string_butfirst = string_tl;

// Short-hand for 'string_butlastn 1'.
//  string_butlast::string->string
let string_butlast s = string_butlastn s 1;

// Checks if a string is empty.
//  string_empty::string->bool
let string_empty s = strlen s == 0;

//------------------------------------------------------------------------------
// Fin.