//
// Redefine a top-level function created from a Bifrost compilation so that:
//  * the content of the (flat) pexlif is first grouped according to the
//    "Label" attributes.
//  * ... (more coming)
//
let bifrost_simplify fn =
    let rtype = get_return_type fn then
    rtype != "pexlif" =>
        eprintf "Return type not pexlif (%s). bifrost_simplify failed" rtype
    |
    let arity = get_arity fn then
    let args = get_args fn then
    let pre1 = sprintf "let %s " fn in
    let lhs = list2str T pre1 " " " = " fst args in
    let pre2 = sprintf "pexlif_group_by_label (%s " fn in
    let post2 = ");" in
    let rhs = list2str T pre2 " " post2 fst args in
    let cmd = lhs^rhs in
    (eval cmd) fseq ()
;
free_binder bifrost_simplify;

letrec bifrost_get_dependent_files file =
    let cmd = sprintf "gawk -e '/^#include/ { print $2;}' < %s"  file in
    let fp = fopen cmd "|r" then
    letrec rd fp =
	let file = fgets fp then
	file = "" => [] |
	let name = string_tl (string_butlastn file 2) in
	name : (rd fp)
    in
    let raw_files = rd fp then
    (fclose fp) fseq
    let files = setify raw_files then
    setify (files @ (flatmap bifrost_get_dependent_files files))
;

// Load or compile a bifrost program.
// If the file and its dependencies are older than the compiled model,
// simply load the compiled model.
// 
// NOTE: The code assumes the #include statements has a fixed string
// as file to include.
//
let bifrost_load pgm =
    let fname = file_fullname pgm then
    let res_name = fname^".fl" then
    let orig_time = 
	let files = fname : (bifrost_get_dependent_files fname) in
	let find_max_mod_time f r = max (file_modified_time f) r in
	itlist find_max_mod_time files (-1)
    in
    let res_time = file_modified_time res_name then
    ( (file_exists res_name) AND (res_time >= orig_time) => () |
	let parts = str_split fname "/" in
	let ndir = list2str T "" "/" "" id (butlast parts) then
	let dir = ndir != "" => ndir |
		let fp = fopen "pwd" "|r" then
		let dir = string_butlast (fgets fp) then
		(fclose fp) fseq
		dir
	then
	let fp = mktemp "bifrost_log" then
	let logfile = stream2filename fp then
	(fclose fp) fseq
	let cmd = sprintf "cd %s & bifrost %s > %s" dir fname logfile then
	((system cmd) != 0) OR (NOT (file_exists res_name)) =>
	    noX =>
		eprintf "bifrost failed for program %s. See %s\n" fname logfile
	    |    
		let msg = sprintf "Bifrost failed on %s\n" fname then
		let w = report_result_in_file msg logfile [("Ok","0")] in
		(get_window_result w) fseq
		eprintf "bifrost failed for program %s." fname
	|
	()
    ) fseq
    _load res_name F
;

// Protocol adapters

let bifrost_tx_twophase =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal was_req.
  bit_internal was_ack.
  bit_internal sent.
  CELL "bifrost_tx_twophase" [
    re_ff_sreset clk reset ack was_ack,
    re_ff_sreset clk reset req was_req,
    re_ff_sreset clk reset ((run '|' sent) '&' hold) sent,
    req <- was_req '^' (run '&' ('~' sent)),
    latch <- ack '^' was_ack,
    done <- run '&' ('~' (req '^' ack))
    ];

let bifrost_tx_fourphase =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal was_ack.
  bit_internal still_done.
  CELL "bifrost_tx_fourphase" [
    re_ff_sreset clk reset ack was_ack,
    re_ff_sreset clk reset (done '&' hold) still_done,
    req <- run '&' ('~' was_ack) '&' (ack '|' ('~' done)),
    latch <- ack '&' ('~' was_ack),
    done <- still_done '|' latch
    ];

let bifrost_tx_pulseecho =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal sent.
  bit_internal still_done.
  CELL "bifrost_tx_pulseecho" [
    re_ff_sreset clk reset ((sent '|' req) '&' hold) sent,
    re_ff_sreset clk reset (done '&' hold) still_done,
    req <- run '&' ('~' sent),
    latch <- ack,
    done <- still_done '|' ack
    ];

let bifrost_tx_validready =
  bit_input clk.
  bit_input reset.
  bit_input run.
  bit_input hold.
  bit_input ack.
  bit_output req.
  bit_output latch.
  bit_output done.
  bit_internal still_done.
  CELL "bifrost_tx_validready" [
    re_ff_sreset clk reset (done '&' hold) still_done,
    req <- run '&' ('~' still_done),
    latch <- req '&' ack,
    done <- still_done '|' latch
    ];

let bifrost_rx_twophase =
  bit_input clk.
  bit_input reset.
  bit_input done.
  bit_input req.
  bit_output ack.
  bit_output start.
  bit_internal was_req.
  bit_internal was_ack.
  CELL "bifrost_rx_twophase" [
    re_ff_sreset clk reset req was_req,
    re_ff_sreset clk reset ack was_ack,
    ack <- was_ack '^' done,
    start <- req '^' was_req
    ];
