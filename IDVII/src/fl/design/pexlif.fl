//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

//  shorten_sha::string->string
let shorten_sha sha = "\"" ^ substr sha 1 4 ^ "..\"";

// Fetch attribute 's'. If none exists, returns 'a'.
//  find_attr::string->string->(string#string list)->string
let find_attr s default attrs = (assoc s attrs) catch default;

// Fetch the "fingerprint" attribute, if any.
//  find_fingerprint::(string#string list)->int
let find_fingerprint = s2int # find_attr "FP" "0";

// Fetch the "signature" attribute, if any.
//  find_signature::(string#string list)->string
let find_signature = find_attr "SHA" "";

let pexlif_get_FP  = find_fingerprint # pexlif_get_attrs;
let pexlif_get_SHA = find_signature   # pexlif_get_attrs;
let pexlif_get_size (PINST _ _ _ _ _ _ (P_HIER cs)) = 1 + length cs
/\  pexlif_get_size _ = 1
;
let pexlif_get_actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        flatmap snd (fa_inps @ fa_outs)
;
let pexlif_get_formals (PINST _ _ _ fa_inps fa_outs _ _) =
        map fst (fa_inps @ fa_outs)
;
let pexlif_get_children (PINST _ _ _ _ _ _ (P_HIER cs)) = cs
/\  pexlif_get_children _ = []
;
let pexlif_get_inps_actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        md_extract_vectors (flatmap snd fa_inps)
;
let pexlif_get_outs_actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        md_extract_vectors (flatmap snd fa_outs)
;
let pexlif_get_name (PINST nm _ _ _ _ _ _) = nm;

//------------------------------------------------------------------------------
let not_const n = NOT (str_is_prefix "0b" n);
let exp_trim vs = filter not_const vs;
let exp_trim1 v = exp_trim [v];

let vec_intersect vl1 vl2 =
    let mk l =
	let b = fst (hd l) then
	let v = md_extract_vectors (map snd l) then
	(b,v)
    in
    let direct = vl1 intersect vl2 then
    let bl1 = map (\v. get_vector_signature v, v) (vl1 subtract direct) then
    let p1 = map mk (partition fst bl1) then
    let bl2 = map (\v. get_vector_signature v, v) (vl2 subtract direct) then
    let p2 = map mk (partition fst bl2) then
    let base_intersection = (map fst p1) intersect (map fst p2) then
    let find_intersection b =
	let nds1 = md_expand_vectors (assoc b p1) then
	let nds2 = md_expand_vectors (assoc b p2) then
	let nds = nds1 intersect nds2 then
	md_extract_vectors nds
    in
    let rem = flatmap find_intersection base_intersection then
    md_extract_vectors (direct @ rem)
;
infix 7 vec_intersect;

let vec_subtract vl1 vl2 =
    let mk l =
	let b = fst (hd l) then
	let v = md_extract_vectors (map snd l) then
	(b,v)
    in
    let bl1 = map (\v. get_vector_signature v, v) vl1 then
    let p1 = map mk (partition fst bl1) then
    let bl2 = map (\v. get_vector_signature v, v) vl2 then
    let p2 = map mk (partition fst bl2) then
    let do_subtract b =
	let v1s = assoc b p1 then
	let v2s = (assoc b p2) catch [] then
	let in_both = v1s intersect v2s then
	let nds1 = md_expand_vectors (v1s subtract in_both) in
	let nds2 = md_expand_vectors (v2s subtract in_both) in
	md_extract_vectors (nds1 subtract nds2)
    in
    let rem = flatmap do_subtract (map fst p1) then
    md_extract_vectors rem
;
infix 7 vec_subtract;


// Create a new pexlif in which instances in ids have been collected to
// a new hiearchy named 'name'.
let fold_pexlif_with_label p il new_name lbls =
    val (PINST name attrs leaf fa_inps fa_outs ints (P_HIER chs)) = p then
    let sel (i,sp) = mem i (setify il) in
    val (sels,rems) = split sel (zip (1 upto (length chs)) chs) in
    let selected = map snd sels in
    let remain = map snd rems in
    let out_producers =
        let get_aouts (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_outs in
        exp_trim ((map fst fa_inps)@(flatmap get_aouts remain))
    in
    let out_consumers =
        let get_ainps (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_inps in
        exp_trim ((map fst fa_outs)@(flatmap get_ainps remain))
    in
    let in_producers =
        let get_aouts (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_outs in
        exp_trim (flatmap get_aouts selected)
    in
    let in_consumers =
        let get_ainps (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_inps in
        exp_trim (flatmap get_ainps selected)
    in
    let sort l = qsort node_name_cmp l in
    let new_outs = in_producers vec_intersect out_consumers in
    let new_inps = in_consumers vec_intersect out_producers in
    let new_ints =
	sort ((in_producers@in_consumers) vec_subtract (new_outs @ new_inps))
    in
    let mk_fa l = map (\v. (v,[v])) (sort l) in
    let nattrs = map (\lbl. ("Label", lbl)) lbls in
    let cp = PINST new_name nattrs F (mk_fa new_inps) (mk_fa new_outs) new_ints
                (P_HIER selected)
    in
    let ints' = sort
                    ((out_consumers@out_producers) vec_subtract
                     (exp_trim (map fst (fa_inps@fa_outs))))
    in
    (PINST name attrs leaf fa_inps fa_outs ints' (P_HIER (cp:remain)))
;

let fold_pexlif p il new_name = fold_pexlif_with_label p il new_name [];

// 
// Create new instances for each group in the grouping list.
// An entry in the grouping list consists of a name of the new group
// and a list of indices for the instances to group into this new group.
let foldn_pexlif p grl =
    let all_sel = flatmap snd grl in
    letrec select used ((lbl,sel):sels) =
	let overlap = sel intersect used then
	overlap == [] => (lbl,sel):(select (sel@used) sels) |
	(fprintf stdinfo "Overlapping selection in foldn_pexlif (%S)\n"
		(map int2str overlap)) fseq
	select used sels
     /\    select used [] = []
    in
    let grl' = select [] grl then
    let ill = map snd grl' then
    val (PINST name attrs leaf fa_inps fa_outs ints (P_HIER chs)) = p then
    let get_sel il = map (\i. el i chs) il in
    let selected_l = map get_sel ill then
    let remain = get_sel ((1 upto (length chs)) subtract all_sel) then
    let get_ifcs pl =
	let producers =
	    let get_aouts (PINST _ _ _ fa_inps fa_outs _ _) =
		flatmap snd fa_outs
	    in
	    exp_trim (flatmap get_aouts pl)
	in
	let consumers =
	    let get_ainps (PINST _ _ _ fa_inps fa_outs _ _) =
		flatmap snd fa_inps
	    in
	    exp_trim (flatmap get_ainps pl)
	in
	(producers, consumers)
    in
    let ifcs = map get_ifcs selected_l then
    let rem_producers =
        let get_aouts (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_outs in
        exp_trim ((map fst fa_inps)@(flatmap get_aouts remain))
    in
    let rem_consumers =
        let get_ainps (PINST _ _ _ fa_inps fa_outs _ _) = flatmap snd fa_inps in
        exp_trim ((map fst fa_outs)@(flatmap get_ainps remain))
    in
    let mk_group i =
	let sel = el i selected_l in
	val (in_producers,in_consumers) = el i ifcs in
	val (l_prodl,l_consuml) =
	    unzip (gather ifcs ((1 upto length ifcs) subtract [i]))
	in
	let l_prod = flat l_prodl in
	let l_consum = flat l_consuml in
	let out_producers = rem_producers@l_prod in
	let out_consumers = rem_consumers@l_consum in
	let nouts = in_producers vec_intersect out_consumers in
	let ninps = in_consumers vec_intersect out_producers in
	let new_ints = md_extract_vectors
		    ((in_producers@in_consumers) vec_subtract (nouts @ ninps))
	in
	let mk_fa l = map (\v. (v,[v])) (md_extract_vectors l) in
	let new_name = fst (el i grl') then
	PINST new_name [] F (mk_fa ninps) (mk_fa nouts) new_ints (P_HIER sel)
    in
    let folded_children = map mk_group (1 upto (length ill)) then
    let all_wires = exp_trim (
			rem_consumers @ rem_producers @
			(flatmap pexlif_get_actuals folded_children))
    then
    let ints' =  md_extract_vectors
	    (all_wires vec_subtract (exp_trim (map fst (fa_inps@fa_outs))))
    then
    let chs' = folded_children@remain then
    (PINST name attrs leaf fa_inps fa_outs ints' (P_HIER chs'))
;

let foldn_pexlif_anon p ill new_base_name =
    letrec mk_grl idx (il:ils) =
	    ((sprintf "%s<%d>" new_base_name idx),il):(mk_grl (idx+1) ils)
     /\    mk_grl idx [] = []
    in
    let grl = (length ill = 1) => [(new_base_name, hd ill)] | mk_grl 1 ill then
    foldn_pexlif p grl
;

// Gather all child pints that has an attribute satisfying the predicate
// and fold them into a group named 'new_name';
let fold_by_label p attribute_predicate new_name =
    val (PINST name attrs leaf fa_inps fa_outs ints (P_HIER chs)) = p then
    let select (idx,(PINST _ lattrs _ _ _ _ _)) =
	(find_first0 attribute_predicate lattrs) != 0
    in
    let il = map fst (filter select (zip (1 upto (length chs)) chs)) in
    il = [] => p |
    fold_pexlif p il new_name
;

let get_rev_labels attrs =
    rev (map snd (filter (\(an,av). an = "Label") attrs))
;

// Use the "Label" attributes to group the instances inside the pexlif.
// Basically an easy way to create an extra level of hierarchy without
// having to manually create all the interfaces.
sletrec pexlif_group_by_label p =
    val (PINST nm attrs lf fa_inps fa_outs ints (P_HIER ps)) = p in
    ps = [] => p |
    letrec get_lbl idx ((PINST nm attrs lf fa_inps fa_outs ints body):rem) =
	let lbls = get_rev_labels attrs in
	let rest = get_lbl (idx+1) rem in
	lbls = [] => rest | (lbls, idx):rest
     /\    get_lbl idx [] = []
    in
    let lbl_part = partition fst (get_lbl 1 ps) then
    lbl_part = [] => p |
    let mk l =
	val (lbl,_) = hd l in
	let indices = map snd l in
	(lbl,indices)
    in
    let hier_cmp (l1,_) (l2,_) = length l2 - length l1 in
    let lbl_idx_list = qsort hier_cmp (map mk lbl_part) then
    length (fst (hd lbl_idx_list)) = 1 =>
	// No sub-hierarchies and thus group remaining according to label
	let gr_list = map (\(lbll,indices). hd lbll, indices) lbl_idx_list in
	foldn_pexlif p gr_list
    |
    // Must first fold first sub-hierarchy
    val (lbls, indices) = hd lbl_idx_list in
    let lbl = last lbls in
    let p' = fold_pexlif_with_label p indices lbl (rev (butlast lbls)) in
    // Now call recursively to group remaining
    pexlif_group_by_label p'
;


// Crate a new pexlif in which all the instances inside the instance id
// are lifted up one level in the hierarchy. All the internal wires
// inside instance id is given new names (prefix #<number>-).
//  unfold_pexlif::PINST->int->PINST
let
    unfold_pexlif pex id =
        val (PINST n a l i o t (P_HIER cs)) = unfold_pexlif pex id in
        let lbl (PINST n a l i o t c) = PINST n a l i o t c in
        PINST n a l i o t (P_HIER (map lbl cs))
;

// -----------------------------------------------------------------------------

begin_abstype;

let str_is_signature s = s == "FP" OR s == "SHA";
let filter_signatures  = filter (NOT # str_is_signature # fst);

let collect_names wexpr =
        letrec 
            collect (W_X _) = []
        /\  collect (W_CONST _ _) = []
        /\  collect (W_NAMED_CONST n sz _) = [(n, sz)]
        /\  collect (W_VAR sz s) = [(s, sz)]
        /\  collect (W_EXPLICIT_VAR sz s) = [(s, sz)]
        /\  collect (W_AND a b) = collect a @ collect b
        /\  collect (W_LAT_LEQ a b) = collect a @ collect b
        /\  collect (W_OR a b) = collect a @ collect b
        /\  collect (W_NOT a) = collect a
        /\  collect (W_EQ a b) = collect a @ collect b
        /\  collect (W_PRED _ c) = collect c
        /\  collect (W_GR a b) = collect a @ collect b
        /\  collect (W_ADD a b) = collect a @ collect b
        /\  collect (W_SUB a b) = collect a @ collect b
        /\  collect (W_MUL a b) = collect a @ collect b
        /\  collect (W_DIV a b) = collect a @ collect b
        /\  collect (W_MOD a b) = collect a @ collect b
        /\  collect (W_SHL a b) = collect a @ collect b
        /\  collect (W_SHR a b) = collect a @ collect b
        /\  collect (W_ASHR a b) = collect a @ collect b
        /\  collect (W_SX _ w) = collect w
        /\  collect (W_ZX _ w) = collect w
        /\  collect (W_ITE c a b) = collect c @ collect a @ collect b
        /\  collect (W_SLICE _ w) = collect w
        /\  collect (W_NAMED_SLICE _ _ w) = collect w
        /\  collect (W_UPDATE_NAMED_SLICE a _ _ b) = collect a @ collect b
        /\  collect (W_CAT as) = flat (map collect as)
        /\  collect (W_MEM_READ _ m a) = collect m @ collect a
        /\  collect (W_MEM_WRITE _ m a d) = collect m @ collect a @ collect d
        in
        setify $ collect wexpr
;
// todo: not sure about size on 'W_UPDATE_NAMED_SLICE'.

let name_to_formal_actuals n sz =
        let f = sz == 1 => n | sprintf "%s[%d:0]" n (sz-1) in (f, [f])
;

let draw_hier_leaf fs =
        let collect = map (curry name_to_formal_actuals) # collect_names in
        let draw_hier (W_UPDATE_FN lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " <- " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_UPDATE_FN lhs rhs])
        /\  draw_hier (W_PHASE_DELAY lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " := " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_PHASE_DELAY lhs rhs])
        in
        P_HIER (map draw_hier fs)
;

letrec
    draw_hier_pinst (PINST n as T is os ts (P_LEAF fs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (draw_hier_leaf fs)
/\  draw_hier_pinst (PINST n as F is os ts (P_HIER cs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (P_HIER (map draw_hier_pinst cs))
;

let decorate_pexlif_hiers = draw_hier_pinst;

end_abstype decorate_pexlif_hiers;

//------------------------------------------------------------------------------
// Fin.

let pexlif_rename p new_name =
    val (PINST _ attrs lf fa_inps fa_outs ints content) = p in
    PINST new_name attrs lf fa_inps fa_outs ints content
;

let try_assoc key l =
    (
	let res = assoc key l then
	SOME res
    ) catch
    NONE
;

let try_rev_assoc key l =
    (
	let res = rev_assoc key l then
	SOME res
    ) catch
    NONE
;

let rename_internals p =
    val (PINST name attrs leaf fa_inps fa_outs ints (P_HIER subfubs)) = p in
    let get_base s = hd (str_split (get_vector_signature s) "[") in
    let init_map = map (\(f,_).f,f) (fa_inps @ fa_outs) then
    let mapping = ref init_map in
    let bases_used = ref (map (\(m,n). get_base m) init_map) then
    let insert name =
        let cname =
            let core_name = last (str_split name "/") in
            let core = strip_BASE_TMP core_name in
            core = "" => core_name | core
        in
	let base  = get_base cname in
	letrec try i =
	    let new_name = sprintf "%s%d%s" BASE_TMP i cname in
	    let new_base = sprintf "%s%d%s" BASE_TMP i base in
	    mem new_base (deref bases_used) => try (i+1) |
	    (mapping := ((name, new_name):(deref mapping))) fseq
	    (bases_used := (new_base:(deref bases_used))) fseq
	    new_name
	in
	try 1
    in
    let ints' = map insert ints then
    let bit_mapping =
	let exp_map (f,t) = zip (md_expand_vector f) (md_expand_vector t) in
	flatmap exp_map (deref mapping)
    then
    let map_name old_name =
	str_is_prefix "0b" old_name => [old_name] |
	let ores = try_assoc old_name (deref mapping) then
	has_value ores => [get_value ores] |
	let old_names = md_expand_vector old_name then
	let map1 onm =
	    let ores1 = try_assoc onm bit_mapping then
	    has_value ores1 => get_value ores1 | onm
	in
	let new_names = map map1 old_names then
	md_merge_vectors new_names
    in
    let trans (PINST sname sattrs sleaf sfa_inps sfa_outs sints sch) =
	let tr_fa (f,as) = (f, flatmap map_name as) in
	let sfa_inps' = map tr_fa sfa_inps then
	let sfa_outs' = map tr_fa sfa_outs then
	(PINST sname sattrs sleaf sfa_inps' sfa_outs' sints sch)
    in
    let subfubs' = map trans subfubs then
    (PINST name attrs leaf fa_inps fa_outs ints' (P_HIER subfubs'))
;

// Flatten the pexlif until the stop_pred is satisfied.
// Intermediate wire names are created on demand and are named
// i<number>/i<number>/.../<name> where the i<number>s refere to
// the cardinality of a subfub.
//
let gen_flatten_pexlif stop_pred p =
    let mk_pref pref i = sprintf "%si%d/" pref i in
    letrec do_flat sub pref p =
        let tr n = (str_is_prefix "0b" n) => [n] |
	    (vec_assoc n sub) gen_catch (\msg.
		eprintf "Cannot find node %s while processing %s\nList %S\n%s" n pref (map (\(f,t). sprintf "%s->%s" f t) sub) msg
	    )
	in
        val (PINST name attrs leaf fa_inps fa_outs ints content) = p in
        leaf OR stop_pred p =>
            let tr_io (f,as) =
                let as' = md_merge_vectors (flatmap tr as) in
                (f,as')
            in
            let fa_inps' = map tr_io fa_inps in
            let fa_outs' = map tr_io fa_outs in
            [(PINST name attrs leaf fa_inps' fa_outs' ints content)]
        |
            val (P_HIER children) = content in
            let mk_io_sub (f,as) = vec_zip [f] (flatmap tr as) in
            let io_sub = flatmap mk_io_sub (fa_inps @ fa_outs) in
            let mk_int_sub f = (f, sprintf "%s%s" pref f) in
            let int_sub = map mk_int_sub ints in
            let sub' = io_sub @ int_sub in
            let prefs = map (mk_pref pref) (1 upto length children) in
            flat (map2 (do_flat sub') prefs children)
    in
    val (PINST name attrs leaf fa_inps fa_outs ints content) = p in
    leaf => p |
    val (P_HIER chs) = content in
    let prefs = map (mk_pref "") (1 upto length chs) in
    let io_sub = flatmap (\(f,as).zip as as) (fa_inps @ fa_outs) in
    let int_sub = map (\f. f,f) ints in
    let sub = io_sub @ int_sub in
    let children = flat (map2 (do_flat sub) prefs chs) in
    let wires_used (PINST _ _ _ fa_inps fa_outs _ _) =
        (flatmap snd (fa_inps @ fa_outs))
    in
    let all = filter not_const (setify (flatmap wires_used children)) in
    let declared = ((map fst (fa_inps @ fa_outs))) @ (ints) in
    let ints' = ints@(md_extract_vectors (all vec_subtract declared)) in
    let res =
	(PINST name attrs leaf fa_inps fa_outs ints' (P_HIER children))
    then
    rename_internals res
;

// A simple stop-predicate for flatten_pexlif that can be used to
// flatten hierarchical pexlifs down to basic drawing components.
let is_draw_leaf p =
    val (PINST name _ _ _ _ _ _) = p in
    (str_is_prefix "draw_" name) AND NOT (str_is_prefix "draw_hier" name)
;

// A function to flatten a pexlif to basic drawing components.
let flatten_pexlif p = gen_flatten_pexlif is_draw_leaf p;

// A function to flatten recursively defined pexlifs
let flatten_recursive_pexlif recursion_name p =
    let stop_pred p =
	val (PINST name _ _ _ _ _ _) = p in
	NOT (name = recursion_name)
    in
    gen_flatten_pexlif stop_pred p
;

// Extract the relevant information for a re_ff (if possible)
let extract_re_ff p =
    NOT (pexlif_is_hier p) => NONE |
    val (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs)) = p in
    let sz = md_sizes (snd (hd fa_outs)) then
    let base = re_ff 'clk {'d :: wexpr} {'q :: wexpr} then
    let master = resize_pexlif sz base then
    NOT ((pexlif_get_SHA p) == (pexlif_get_SHA master)) => NONE |
    let clk = hd (assoc "clk" fa_inps) in
    let din = assoc (mk_name sz "d") fa_inps in
    let dout = assoc (mk_name sz "q") fa_outs in
    SOME ("re_ff", base, p, clk, din, dout, [])
;

// =============================================================
// Code for creating new unique names
// =============================================================

lettype name_db = NAME_DB {tbl :: ({string,string} tbl) ref};
		    

let build_name_db p =
    NOT (pexlif_is_hier p) => eprintf "build_name_db on leaf pexlif" |
    val (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs)) = p in
    let bases = map get_base_name ((map fst fa_inps)@(map fst fa_outs)@ints) in
    let tbl = set_tbl_insertn (tbl_create (length bases)) (setify bases) then
    NAME_DB (ref tbl)
;

let list2name_db names =
    let bases = map get_base_name names in
    let tbl = set_tbl_insertn (tbl_create (length bases)) (setify bases) then
    NAME_DB (ref tbl)
;

let get_unique_name name_db original_name =
    val (NAME_DB rtbl) = name_db in
    let tbl = deref rtbl in
    let find_new_name name =
        let cname = strip_BASE_TMP name in
        let base  = get_base_name cname in
        letrec try i =
            let new_name = sprintf "%s%d%s" BASE_TMP i cname in
            let new_base = sprintf "%s%d%s" BASE_TMP i base in
	    tbl_member tbl new_base => try (i+1) |
	    let tbl' = set_tbl_insertn tbl [new_base] then
	    (rtbl := tbl') fseq
            new_name 
        in
        try 1 
    in
    find_new_name original_name
;


// =============================================================
// Code for constant propagation
// =============================================================

// Perform constant propagation and simplify the pexlif hiearchically.
// Note that we only propagate constants through combinational units.
let hier_constant_propagation p =
    let ckt = pexlif2fsm p then
    // Incorporate all the assumtions
    let a_nds = assertions ckt then
    let a_deps = filter (is_input ckt) (fanin_dfs ckt (\n.F) a_nds) then
    let a_ant = map (\n. T,n, variable n, 0, 1) a_deps then
    let ste1 = STE "" ckt [] a_ant [] (map (\n.n,0,1) a_nds) then
    let get_cond nd =
	val (H,L) = get_trace_val ste1 nd 0 then
	NOT (H == NOT L) => [] |
	[H]
    in
    let conds = flatmap get_cond a_nds then
    let cond = itlist (defix AND) conds T then
    let psub = param cond then
    let a_ant' = substitute psub a_ant then
    //
    let ste = STE "-e" ckt [] a_ant' [] [] then
    letrec simp hier p =
        val (PINST name attrs lf fa_inps fa_outs ints body) = p in
	let get_v f =
	    let HL = get_trace_val ste (sprintf "%s%s" hier f) 0 then
	    HL == (T,F) => "1" |
	    HL == (F,T) => "0" |
	    "X"
	in
	let fs = md_expand_vectors (map fst fa_outs) then
	let vs = map get_v fs in
	let has_constant =
	    let idx = find_first0 (\s. s != "X") vs then
	    idx != 0
	then
	let all_constant =
	    let idx = find_first0 (\s. s = "X") vs then
	    idx == 0
	then
	let nd2val = zip fs vs in
	all_constant =>
	    let mk1 (f,as) =
		let fs = md_expand_vector f in
		let v = sscanf "%b" (implode (map (\n. assoc n nd2val) fs)) then
		let sz = length fs in
		let lhs = W_EXPLICIT_VAR sz f in
		let rhs = W_CONST sz v in
		base_assignment T lhs rhs
	    in
	    let consts = map mk1 fa_outs then
	    (PINST "_WrApPeR_" [] F [] fa_outs [] (P_HIER consts))
	|
	NOT (is_HIER body) => p |
	let p' =
            val (P_HIER cs) = body in
            let cs' = map2 (\i.\c. simp (sprintf "%si%d/" hier i) c)
                           (1 upto (length cs)) cs
            then
            (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs'))
	then
	NOT has_constant => p' |
	// ------------------------------------------------
	// Some, but not all, outputs are constant(s)
	// ------------------------------------------------
        val (PINST name' attrs' lf' fa_inps' fa_outs' ints' body') = p' in
	let fa_inps' = map (\(f,as). f,[f]) fa_inps' in
	let fa_outs' = map (\(f,as). f,[f]) fa_outs' in
	let fvs = (map fst (fa_inps @ fa_outs))@ints then
	let nameDB = list2name_db fvs then
	let keep (nd,v) = (v = "X") OR (str_is_substr "assert__" nd) in
	val (needed, const) = split keep nd2val in
	//
	let const_vecs = md_extract_vectors (map fst const) then
	let mk_const v =
	    let sz = md_size v in
	    let vn = mk_name sz (get_base_name v) then
	    let v'  = get_unique_name nameDB vn then	// constant node
	    let v'' = get_unique_name nameDB vn then	// dangling node
	    let vs = md_expand_vector v in
	    let value = sscanf "%b" (implode (map (\n. assoc n nd2val) vs)) then
	    let lhs = W_EXPLICIT_VAR sz v' in
	    let rhs = W_CONST sz value in
	    let pp = base_assignment T lhs rhs then
	    (v,v''),(v,v'),pp
	in
	let tmp = map mk_const const_vecs then
	let dangling_sub = map fst tmp then
	let const_sub = map (fst # snd) tmp then
	let const_insts = map (snd # snd) tmp then
	//
	let need_vecs = md_extract_vectors (map fst needed) then
	let mk_sub v =
	    let sz = md_size v in
	    let v' = get_unique_name nameDB (mk_name sz (get_base_name v)) then
	    (v,v')
	in
	let needed_sub = map mk_sub need_vecs then
	//
	let inside_sub = dangling_sub@needed_sub in
	let inside_rename (f,as) = f, (vec_assoc f inside_sub) in
	let fa_outs'' = map inside_rename fa_outs' then
	let p'' = PINST name' attrs' lf' fa_inps' fa_outs'' ints' body' then	
	let io_sub = vec_zip (map fst fa_outs) (flatmap snd fa_outs) then
	let outside_sub = const_sub @ needed_sub in
	let mk_fa (f,f') =
	    let fs = vec_rev_assoc f' outside_sub then
	    let as = flatmap (\f. vec_assoc f io_sub) fs then
	    (f', as)
	in
	let fa_outs = map mk_fa outside_sub then
	(PINST "_WrApPeR_" attrs F fa_inps fa_outs (map snd dangling_sub)
		    (P_HIER (p'' : const_insts)))
    in
    simp "" p
;

// Perform constant propagation and simplify the pexlif at the top-level.
// Note that we only propagate constants through combinational units.
let constant_propagation p =
    let ckt = pexlif2fsm p then
    // Incorporate all the assumtions
    let a_nds = assertions ckt then
    let a_deps = filter (is_input ckt) (fanin_dfs ckt (\n.F) a_nds) then
    let a_ant = map (\n. T,n, variable n, 0, 1) a_deps then
    let ste1 = STE "" ckt [] a_ant [] (map (\n.n,0,1) a_nds) then
    let get_cond nd =
	val (H,L) = get_trace_val ste1 nd 0 then
	NOT (H == NOT L) => [] |
	[H]
    in
    let conds = flatmap get_cond a_nds then
    let cond = itlist (defix AND) conds T then
    let psub = param cond then
    let a_ant' = substitute psub a_ant then
    //
    let ste = STE "-e" ckt [] a_ant' [] [] then
    val (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs)) = p in
    let get_v nd =
	(str_is_substr "assert__" nd) => "X" |
	let HL = get_trace_val ste nd 0 then
	HL == (T,F) => "1" |
	HL == (F,T) => "0" |
	"X"
    in
    let transf lp =
	val (PINST lname lattrs llf lfa_inps lfa_outs lints lbody) = lp in
	let acts = md_expand_vectors (flatmap snd lfa_outs) then
	let outvs = map get_v acts then
	(find_first0 (\v. v = "X") outvs) != 0 => lp |
	let sz = length outvs then
	let v = sscanf "%b" (implode outvs) then
	let lhs = W_VAR sz "c" in
	let rhs = W_CONST sz v in
	let lp' = base_assignment T lhs rhs then
	val (PINST rnm rattrs rlf rfa_inps rfa_outs rinst rbody) = lp' then
	let vacts = md_merge_vectors acts in
	PINST rnm rattrs rlf [] [(fst (hd rfa_outs), vacts)] [] rbody
    in
    let cs' = map transf cs then
    (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs'))
;


// =============================================================
// Code for sanity check a pexlif
// At the moment, it only checks 
// =============================================================
let sanity_check_pexlif p =
    letrec test hier (PINST name attrs lf fa_inps fa_outs ints body) =
        let check_io (f,as) =
            let f_sz = md_size f then
            let a_sz = md_sizes as then
            f_sz == a_sz => () |
            eprintf "FAILURE: |%s| != |%S| in %s\n" f as hier
        in
        (foreach check_io fa_inps) fseq
        (foreach check_io fa_outs) fseq
        let rec (P_HIER chs) =
	    let get_act (PINST _ _ _ c_fa_inps c_fa_outs _ _) =
		(flatmap snd c_fa_inps) @ (flatmap snd c_fa_outs)
	    in
	    let used =
		filter (\n. NOT (str_is_prefix "0b" n)) (flatmap get_act chs)
	    then
	    let declared = ints @ (map fst (fa_inps @ fa_outs)) then
	    let missing = used vec_subtract declared then
	    missing != [] =>
		eprintf "FAILURE: Nodes %S not declared in %s\n" missing hier
	    |
            let pr_list = zip (1 upto length chs) chs in
            let do (idx,sp) =
                let hier' = sprintf "%s/i%d" hier idx in
                test hier' sp
            in
            foreach do pr_list
         /\ rec other = ()
        in
        rec body
    in
    (test "" p) fseq T
;

