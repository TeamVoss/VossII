//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

load (DIR^"misc.fl");
load (DIR^"util.fl");
load (DIR^"primes.fl");

// Meh...
//  shorten_sha::string->string
let shorten_sha sha = "\"" ^ substr sha 1 4 ^ "..\"";

// Fetch attribute 's'. If none exists, returns 'a'.
//  find_attr::string->string->(string#string list)->string
let find_attr s a = snd # find_maybe (defix == s # fst) ("", a);

// Fetch the "fingerprint" attribute, if any.
//  find_fingerprint::(string#string list)->int
let find_fingerprint = s2int # find_attr "FP" "0";

// Fetch the "signature" attribute, if any.
//  find_signature::(string#string list)->string
let find_signature = find_attr "SHA" "";

let pexlif_get_FP  = find_fingerprint # pexlif_get_attrs;
let pexlif_get_SHA = find_signature   # pexlif_get_attrs;
let pexlif_get_size (PINST _ _ _ _ _ _ (P_HIER cs)) = 1 + length cs
/\  pexlif_get_size _ = 1
;
let pexlif_get_actuals (PINST _ _ _ fa_inps fa_outs _ _) =
        flatmap snd (fa_inps @ fa_outs)
;
let pexlif_get_formals (PINST _ _ _ fa_inps fa_outs _ _) =
        map fst (fa_inps @ fa_outs)
;
let pexlif_get_children (PINST _ _ _ _ _ _ (P_HIER cs)) = cs
/\  pexlif_get_children _ = []
;

//------------------------------------------------------------------------------

begin_abstype;

// Expand and pair up each formal/actual vector.
//  lineup::(formal#(actual list) list)->(formal#actual list)
let fa_lineup = flatmap (curry zip # both md_expand_vector md_expand_vectors);

// Subst. each formal by its matched actual.
//  raise::(formal#actual list)->(formal list)->(actual list)
let fa_raise = map # subst;

// Subst. each actual by its matched formal.
//  lower::(formal#actual list)->(actual list)->(formal list)
let fa_lower = map # rev_subst;

// Subst. each formal/actual pairing by 
//  promote::(formal/actual->b)->(formal#actual list)->(formal#actual list)->(a#a list)->(b#b list)
let fa_promote f ns hs = curry zip # both (f ns) (f hs) # unzip;

// Turns a subst. of formals into one over actuals.
//  fa_actualize::fa->fa->subst->subst
let fa_actualize fa_n fa_h = fa_promote fa_raise (fa_lineup fa_n) (fa_lineup fa_h);

// Turns a subst. of actuals into one over formals.
//  fa_formalize::fa->fa->subst->subst
let fa_formalize fa_n fa_h = fa_promote fa_lower (fa_lineup fa_n) (fa_lineup fa_h);

end_abstype fa_actualize fa_formalize;

//------------------------------------------------------------------------------
// Fingerprint generation for a PEXLIF.
//------------------------------------------------------------------------------

begin_abstype;

// Multiply a value by a prime.
//  pm_val::...
let pm_val = prime_mult;

// Multiply each value by a prime, starting at some 'n', and sum the results.
//  pm_list::(a->int)->int->(a list)->int
let pm_list f n vs = ixlist (\a. \i. \s. pm_val i (f a) + s) vs n;

// Gen. a fingerprint for 'MEM'.
//  fp_mem::MEM->int
let fp_mem (MEM as l ds) = pm_val 0 as + pm_val 1 l + pm_val 2 ds;

// Gen. a fingerprint for 'WEXPR'.
//  fp_w::WEXPR->int
letrec
    fp_w (W_X s)                = pm_val 1 s
/\  fp_w (W_CONST s i)          = pm_val 2 s + pm_val 3 i
/\  fp_w (W_NAMED_CONST _ s i)	= pm_val 4 s + pm_val 5 i
/\  fp_w (W_VAR s _)            = pm_val 6 s
/\  fp_w (W_EXPLICIT_VAR s _)	= pm_val 7 s
/\  fp_w (W_AND a b)            = pm_val 8 (fp_w a + fp_w b)
/\  fp_w (W_OR a b)             = pm_val 9 (fp_w a + fp_w b)
/\  fp_w (W_NOT a)              = pm_val 10 (fp_w a)
/\  fp_w (W_EQ a b)             = pm_val 11 (fp_w a + fp_w b)
/\  fp_w (W_PRED _ a)           = pm_val 12 (fp_w a)
/\  fp_w (W_GR a b)             = pm_val 13 (fp_w a) + pm_val 14 (fp_w b)
/\  fp_w (W_ADD a b)            = pm_val 15 (fp_w a + fp_w b)
/\  fp_w (W_SUB a b)            = pm_val 16 (fp_w a) + pm_val 17 (fp_w b)
/\  fp_w (W_MUL a b)            = pm_val 18 (fp_w a) + pm_val 19 (fp_w b)
/\  fp_w (W_DIV a b)            = pm_val 20 (fp_w a) + pm_val 21 (fp_w b)
/\  fp_w (W_MOD a b)            = pm_val 22 (fp_w a) + pm_val 23 (fp_w b)
/\  fp_w (W_SHL a b)            = pm_val 24 (fp_w a) + pm_val 25 (fp_w b)
/\  fp_w (W_SHR a b)            = pm_val 26 (fp_w a) + pm_val 27 (fp_w b)
/\  fp_w (W_ASHR a b)           = pm_val 28 (fp_w a) + pm_val 29 (fp_w b)
/\  fp_w (W_SX s a)             = pm_val 30 s + pm_val 31 (fp_w a)
/\  fp_w (W_ZX s a)             = pm_val 32 s + pm_val 33 (fp_w a)
/\  fp_w (W_ITE a b c)          = pm_val 34 (fp_w a) + pm_val 35 (fp_w b)
                                + pm_val 36 (fp_w c)
/\  fp_w (W_SLICE ix a)	        = pm_val 37 (fp_w a) + pm_list id 1 ix
/\  fp_w (W_NAMED_SLICE _ ix a) = pm_val 38 (fp_w a) + pm_list id 1 ix
/\  fp_w (W_UPDATE_NAMED_SLICE a _ ix b)
                                = pm_val 39 (fp_w a) + pm_val 40 (fp_w b)
                                + pm_list id 1 ix
/\  fp_w (W_CAT as)             = pm_list fp_w 41 as
/\  fp_w (W_MEM_READ m a b)     = pm_val 42 (fp_mem m) + pm_val 43 (fp_w a)
                                + pm_val 44 (fp_w b)
/\  fp_w (W_MEM_WRITE m a b d)  = pm_val 45 (fp_mem m) + pm_val 46 (fp_w a)
                                + pm_val 47 (fp_w b) + pm_val 48 (fp_w d)
;

// Gen. a fingerprint for 'UPDATE_FN'.
//  fp_fn::UPDATE_FN->int
let fp_fn (W_UPDATE_FN l r)   = pm_val 49 (fp_w l) + pm_val 50 (fp_w r)
/\  fp_fn (W_PHASE_DELAY l r) = pm_val 51 (fp_w l) + pm_val 52 (fp_w r)
;

// Gen. a fingerprint for the "formals" of an input/output declaration.
//  fp_formal::[str]->int
let fp_formal ps = pm_val 53 (sum (map md_size ps));

// Gen. a fingerprint for the internals of a 'PINST'.
//  fp_internal::[str]->int
let fp_internal ps = pm_val 54 (sum (map md_size ps));

// Gen. a fingerprint for 'CONTENT'.
//  fp_content::CONTENT->int
let fp_content (P_LEAF fs) = pm_val 59 (sum (map fp_fn fs))
/\  fp_content (P_HIER cs) =
        let go (PINST _ a _ i o t _) =
                ( find_fingerprint a
                + fp_formal (map fst i)
                + fp_formal (map fst o)
                + fp_internal t
                )
        in
        pm_val 65 (sum (map go cs))
;

// Gen. a fingerprint for the components of a 'PINST'.
//  fp_pinst::'pinst contents'->string
let fp_pinst i o t c = int2str
        ( fp_formal (map fst i)
        + fp_formal (map fst o)
        + fp_internal t
        + fp_content c
        )
;

//------------------------------------------------------------------------------

// Compute the SHA256 signature of a 'CONTENT'.
//  sha_content::content->string
let sha_content (P_LEAF fs) = sha_set fs
/\  sha_content (P_HIER cs) =
        let go (PINST n a _ i o t _) =
                ( n
                , find_signature a
                , sha256_signature (map fst i)
                , sha256_signature (map fst o)
                , sha_set t
                )
        in
        sha_set (map go cs)
;

// Compute the SHA256 signature of a 'PINST'.
//  sha_pinst::'pinst contents'->string
let sha_pinst n i o t c = sha256_signature
        ( n
        , sha256_signature (map fst i)
        , sha256_signature (map fst o)
        , sha_set t
        , sha_content c
        )
;
end_abstype fp_pinst sha_pinst;

//------------------------------------------------------------------------------
// ...
//------------------------------------------------------------------------------

// ...
let PINST n a l i o t c =
        let is_signature s = (s == "FP") OR (s == "SHA") in
        let a' = filter (NOT # is_signature # fst) a in
        let f  = ("FP",  fp_pinst    i o t c) in
        let s  = ("SHA", sha_pinst n i o t c) in
        PINST n (f : s : a') l i o t c
;

//------------------------------------------------------------------------------

// ...
//  fold_pexlif::PINST->[int]->string->PINST
let fold_pexlif pex ids name =
        val (PINST n a l i o t (P_HIER ((PINST n' a' l' i' o' t' c'):cs))) =
                fold_pexlif pex ids name
        in
        PINST n a l i o t (P_HIER ((PINST n' a' l' i' o' t' c'):cs))
;

// ...
//  unfold_pexlif::PINST->int->string->PINST
let unfold_pexlif pex id name =
        val (PINST n a l i o t (P_HIER cs)) = unfold_pexlif pex id name in
        let lbl (PINST n a l i o t c) = PINST n a l i o t c in
        PINST n a l i o t (P_HIER (map lbl cs))
;

//------------------------------------------------------------------------------

// ...
let store_pexlif pex =
        let sha  = find_signature (pexlif_get_attrs pex) then
        let sha' = string_empty sha => "bad" | sha then
        (pex) fseq (write_pexlif ("pexlif_examples/" ^ sha' ^ ".pex") pex)
;

// ...
let load_pexlif sha = read_pexlif ("pexlif_examples/" ^ sha ^ ".pex");
non_lazy load_pexlif;

//begin_abstype;

lettype wrapper = WRAPPER ((string#string) list);

let read_subst name =
        let file = fopen name "r" then
        let text = fget file then
        val (WRAPPER sub) = read_wrapper text then
        (fclose file) fseq
        (sub)
;

let write_subst name {sub::((string#string) list)} =
        let {w::wrapper} = WRAPPER sub in write_wrapper name w
;

let load_matches sha flip =
        let file = fopen ("pexlif_examples/matches") "r" then
        letrec
            read_line f =
                let line = fgets f then
                string_empty line => [] |
                // /
                let real  = string_butlast line then
                val [l,r] = str_cluster real 64 then
                val (x,y) = flip => (r,l) | (l,r) then
                x != sha => read_line f |
                // /
                let s = read_subst ("pexlif_examples/" ^ l ^ r ^ ".match") then
                (y,s) : read_line f
        in
        let matches = read_line file then
        (fclose file) fseq
        (matches)
;
non_lazy load_matches;

let fetch_matches sha = load_matches sha F;
non_lazy fetch_matches;

let rev_fetch_matches sha = load_matches sha T;
non_lazy rev_fetch_matches;

let store_match {sha1::string} {sha2::string} {sub::((string#string) list)} =
        (elem sha2 $ map fst $ fetch_matches sha1) => () |
        // /
        let file = fopen ("pexlif_examples/matches") "a" then
        (fprintf file "%s\n" (sha1 ^ sha2)) fseq
        (fclose file) fseq
        // /
        (write_subst ("pexlif_examples/" ^ sha1 ^ sha2 ^ ".match") sub) fseq
        ()
;

//end_abstype store_match fetch_matches rev_fetch_matches;

// ...
let subst_match sub (PINST n a l i1 o1 t c) (PINST _ _ _ i2 o2 _ _) =
        let sub2 = fa_actualize (i1 @ o1) (i2 @ o2) sub in
        let swap (f, as) = (f, map (subst sub2) as) in
        PINST n a l (map swap i1) (map swap o1) t c
;

//------------------------------------------------------------------------------
// Generation of a PEXLIF.
//------------------------------------------------------------------------------

begin_abstype;

let ?! = undefined;

let segment_at_random 1  = [1]
/\  segment_at_random sz =
        let r = random 1 sz in
        ((sz / r) + (sz % r)) : (replicate ((sz / r) - 1) r)
;
non_lazy segment_at_random;

let slice_at_random lz hz = repeat (hz-lz) remove_one (0 upto hz)
;
non_lazy slice_at_random;

letrec
    gen_wexpr_inputs
        {is :: (wexpr#int) list}
        {sz :: int}
        =
        let use_var =
                val (i,s) = one_of is in
                s < sz => one_of_weighted
                    [ (1, [W_SX sz i])
                    , (1, [W_ZX sz i])
                    , (2, (i : gen_wexpr_inputs is (sz-s)))] |
                s > sz => [W_SLICE (slice_at_random (sz - 1) (s - 1)) i] |
                [i]
        in
        one_of_weighted
            [ (1, [W_X sz])
            , (2, [W_CONST sz (random2 sz)])
         // , (x, W_NAMED_CONST ?! ?! ?!)
         // , (x, W_EXPLICIT_VAR ?! ?!)
         // , (x, W_MEM_READ ?! ?! ?!)
            , (4, use_var) ]
;
non_lazy gen_wexpr_inputs;

let gen_wexpr_input
        {is :: (wexpr#int) list}
        {sz :: int}
        =
        let vs = gen_wexpr_inputs is sz in length vs == 1 => hd vs | W_CAT vs
;
non_lazy gen_wexpr_input;

letrec
    gen_wexpr
        {is :: (wexpr#int) list}
        {ts :: (wexpr#int) list}
        {sz :: int}
        {d  :: int}
        =
        // If complexity 'd' is satisfied and 'ts' distributed, build leaf.
        (length ts == 0) AND (d <= 0) => gen_wexpr_input is sz |
        (length ts == 1) AND (d <= 0) =>
            val (x,s) = hd ts in
            s < sz => one_of [ W_SX sz x, W_ZX sz x ]  |
            s > sz => W_SLICE (slice_at_random (sz - 1) (s - 1)) x |
            x |
        // Misc. for unary/binary ops.
        let gen_unary  sz = gen_wexpr is ts sz (d - 1) in
        let gen_binary ts = gen_wexpr is ts sz (d / 2) in
        val (as, bs) = split_at_random ts in
        // Weights for ...
        let u = (d <= 0) => 1  | 10 in // unary op.
        let x = (sz > 1) => 10 | 0  in // ext. op.
        let b = (sz > 1) => 10 | 1  in // binary op.
        // Pick a valid PINST op.
        one_of_weighted
            [ (u, W_NOT  (gen_unary sz))
            , (b, W_AND  (gen_binary as) (gen_binary bs))
            , (b, W_OR   (gen_binary as) (gen_binary bs))
            , (b, W_EQ   (gen_binary as) (gen_binary bs))
            , (b, W_GR   (gen_binary as) (gen_binary bs))
            , (b, W_ADD  (gen_binary as) (gen_binary bs))
            , (b, W_SUB  (gen_binary as) (gen_binary bs))
            , (b, W_MUL  (gen_binary as) (gen_binary bs))
            , (b, W_DIV  (gen_binary as) (gen_binary bs))
            , (b, W_MOD  (gen_binary as) (gen_binary bs))
            , (b, W_SHL  (gen_binary as) (gen_binary bs))
            , (b, W_SHR  (gen_binary as) (gen_binary bs))
            , (b, W_ASHR (gen_binary as) (gen_binary bs))
            , ( let smaller_sz = random 1 sz in
                (x, W_SX sz (gen_unary smaller_sz)))
            , ( let smaller_sz = random 1 sz in
                (x, W_ZX sz (gen_unary smaller_sz)))
            , ( val (cs, ds)   = split_at 2 ts in
                val (es, fs)   = split_at_random ds in
                let gen ts sz  = gen_wexpr is ts sz (d / 3) in
                (b, W_ITE (gen cs 1) (gen es sz) (gen fs sz)))
            // , ( let larger_sz  = random (sz + 1) ((sz + 1) * 2) in
            //     let slice      = slice_at_random (sz - 1) larger_sz in
            //     (b, W_SLICE slice (gen_unary larger_sz)))
            , ( let chunked_sz = segment_at_random sz in
                let len_sz     = length chunked_sz in
                let len_ts     = length ts in
                let chunked_ts =
                        len_sz <= len_ts => split_into len_sz ts |
                        (map (\t. [t]) ts) @ (replicate (len_sz - len_ts) [])
                in
                let gen ts sz  = gen_wexpr is ts sz (d / len_sz) in
                (x, W_CAT (map2 gen chunked_ts chunked_sz)))
         // , W_PRED ?! ?!
         // , W_NAMED_SLICE ?! ?! ?!
         // , W_UPDATE_NAMED_SLICE ?! ?! ?! ?!
         // , W_MEM_WRITE ?! ?! ?! ?!
            ]
;
non_lazy gen_wexpr;

let gen_update_fn
        {is    :: (wexpr#int) list} // Global inputs
        {ts    :: (wexpr#int) list} // Internals connected to this wire
        {(o,s) :: (wexpr#int)}      // Wire to be assigned
        {delay :: bool}             // phase-delay or update-fn?
        {d     :: int}              // Complexity of assignment
        =
        (delay => W_PHASE_DELAY | W_UPDATE_FN) o (gen_wexpr is ts s d)
;
non_lazy gen_update_fn;

let gen_update_fn_internals
        {sc    :: (bool list) list} // Connection schema for internals.
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list} // Internals to assign (ordered as in 'sc').
        {delay :: bool}
        {d     :: int}
        =
        let inputs = map (map fst # filter snd # zip ts) sc in
        map (\(t,i). gen_update_fn is (el i inputs) t delay d) (ixlabel ts)
;
non_lazy gen_update_fn_internals;

let extend_wires
        {xs   :: (wexpr#int) list}
        {size :: int}
        =
        let split (x, s) =
                val (ls, rs) = split_at_random ((s - 1) downto 0) in
                let slice is = (W_SLICE is x, length is) in
                [slice ls, slice rs]
        in
        let extend (x, s) =
                let b2i b = b => 1 | 0 in
                let p = (x, s) in
                one_of_weighted
                    [ (1,            [p])
                    , (b2i (s >= 1), [p, p])
                    , (b2i (s != 1), (split p)) ]
        in
        letrec
            pad [] = error "pad called with empty list"
        /\  pad xs = length xs >= size => xs | pad $ concat $ map extend xs
        in
        pad xs
;
non_lazy extend_wires;

let gen_update_fn_outputs
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list} // Internals to drive outputs.
        {os    :: (wexpr#int) list} // Outputs to be assigned.
        {delay :: bool}
        {d     :: int}
        =
        // If there aren't enough inputs to drive each output, then we must
        // first extend them by splitting/copying/... their wires.
        let l_os = length os in
        let xs'  = extend_wires ts l_os in
        map2 (\ts. \o. gen_update_fn is ts o delay d) (split_into l_os xs') os
;
non_lazy gen_update_fn_outputs;

let gen_wires
        {pre   :: string}
        {sizes :: int list}
        {num   :: int}
        =
        // When selecting a size, prefer known sizes over the random choice.
        let hist_sz = map swap (hist sizes) in
        let random_size x =
                one_of_weighted
                    [ (1, one_of [1,2,4,8,16,32]),
                      (1, one_of_weighted hist_sz) ] // todo: increase weight.
        in
        // Build internal wires for node 'ix' and give it a random size.
        let new_internal i =
                let sz   = random_size i in
                let name = pre ^ (int2str i) in
                (W_VAR sz name, sz)
        in
        map new_internal (1 upto num)
;
non_lazy gen_wires;

let gen_pinst_update_fn_leaf
        {sc    :: (bool list) list}
        {is    :: (wexpr#int) list}
        {ts    :: (wexpr#int) list}
        {os    :: (wexpr#int) list}
        {delay :: bool}
        {d     :: int}
        =
        // note: nodes without outgoing edges are connected to outputs.
        let ts_o  = map snd $ filter fst $ zip (map (NOT # any id) sc) ts in
        let fns_t = gen_update_fn_internals sc is ts delay d in
        let fns_o = gen_update_fn_outputs is ts_o os delay d in
        P_LEAF (fns_t @ fns_o)
;
non_lazy gen_pinst_update_fn_leaf;

let gen_DAG_with_threshold n p =
        letrec
            map_from _ []     _ = []
        /\  map_from f (x:xs) 0 = f x : map_from f xs 0
        /\  map_from f (x:xs) i = x   : map_from f xs (i-1)
        in
        let flip F = randomf 32 > p in
        let empty  = replicate n (replicate n F) in
        let marked = ixmap (map_from flip) empty in
        marked
;
non_lazy gen_DAG_with_threshold;

let gen_DAG n =
        gen_DAG_with_threshold n
            (fdiv (fmul 2.0 (log (int2float n))) (int2float n))
;
non_lazy gen_DAG;

let formal_to_wire f =
        let sz = md_size f in
        let n  = sz == 1 => f | hd (str_split f "[") in
        (W_VAR sz n, sz)
;

let wire_to_formal (W_VAR sz n, _) =
        sz == 1 => n | sprintf "%s[%d:0]" n (sz-1);
;

let gen_pinst_leaf
        {name  :: string}
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {delay :: bool}
        {size  :: int}
        {d     :: int}
        =
        // Build wexpr variables for each formal.
        let is = map (formal_to_wire # fst) fa_is in
        let os = map (formal_to_wire # fst) fa_os in
        // Generate DAG that dictates body of PINST and then fill it with
        // semi-random, combinatorial update-functions.
        let sc   = gen_DAG size in
        let ts   = gen_wires "i" (map snd (is @ os)) (length sc) in
        let leaf = gen_pinst_update_fn_leaf sc is ts os delay d in
        // ...
        PINST name [] T fa_is fa_os (map wire_to_formal ts) leaf
;
non_lazy gen_pinst_leaf;

let gen_pinst
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        // Split inputs between comb. & seq. parts of PINST, with the biggest
        // of the two going towards comb. logic to ensure it can drive updates.
        let ord (as, bs) = length as >= length bs => (as, bs) | (bs, as) in
        val (fa_is_c, fa_is_s) = ord $ split_at_random fa_is in
        val (fa_os_c, fa_os_s) = ord $ split_at_random fa_os in
        // Connect comb. & seq. parts via internals and build additional
        // internals wires to make up for inputs directed to comb. logic.
        let sizes  = map (md_size # fst) $ (fa_is @ fa_os) in
        let var_cs = gen_wires "ct" sizes (max 1 (length fa_is_c)) in
        let var_sc = gen_wires "st" sizes (max 1 (length fa_is_s)) in
        // ..
        let actual v = (v, [v]) in
        let f_cs = map (actual # wire_to_formal) var_cs in // comb. -> seq.
        let f_sc = map (actual # wire_to_formal) var_sc in // seq.  -> comb.
        // ...
        let c = gen_pinst_leaf "comb" (fa_is_c @ f_sc) (fa_os_c @ f_cs) F size d in
        let s = gen_pinst_leaf "seq"  (fa_is_s @ f_cs) (fa_os_s @ f_sc) T size d in
        // ...
        PINST "node" [] F fa_is fa_os (map fst (f_cs @ f_sc)) (P_HIER [c, s])
;
non_lazy gen_pinst;

let gen_pinst_hier
        {sc    :: (bool list) list}
        {fa_is :: (string#(string list)) list}
        {f_ts  :: string list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        let size'    = size / length sc in
        let actual v = (v, [v]) in
        // note: nodes whitout outgoing edges are connected to outputs.
        let ts_i  = map (map fst # filter snd # zip f_ts) sc in
        let ts_ip = map (\i. empty i => some_of fa_is | map actual i) ts_i in
        let ns_t  = map2 (\is. \o. gen_pinst is [o] size' d) ts_ip
                  $ map actual f_ts
        in
        // ...
        let l_os  = length fa_os in
        let ts_o  = map (actual # snd)
                  $ filter fst $ zip (map (NOT # any id) sc) f_ts
        in
        let ns_o  = map2 (\o. \is. gen_pinst is [o] size' d) fa_os
                  $ split_into l_os ts_o
        in
        P_HIER (ns_t @ ns_o)
;        
non_lazy gen_pinst_hier;

let gen_pinst_graph
        {fa_is :: (string#(string list)) list}
        {fa_os :: (string#(string list)) list}
        {size  :: int}
        {d     :: int}
        =
        let sizes = map (md_size # fst) (fa_is @ fa_os) in
        let sc    = gen_DAG size in
        let ts    = gen_wires "w" sizes (length sc) in
        let hier  =
                gen_pinst_hier sc fa_is (map wire_to_formal ts) fa_os size d
        in
        PINST "graph" [] F fa_is fa_os (map wire_to_formal ts) hier
;
non_lazy gen_pinst_graph;

end_abstype gen_pinst gen_pinst_graph;

//------------------------------------------------------------------------------

begin_abstype;

let str_is_signature s = s == "FP" OR s == "SHA";
let filter_signatures  = filter (NOT # str_is_signature # fst);

let collect_names wexpr =
        letrec 
            collect (W_X _) = []
        /\  collect (W_CONST _ _) = []
        /\  collect (W_NAMED_CONST n sz _) = [(n, sz)]
        /\  collect (W_VAR sz s) = [(s, sz)]
        /\  collect (W_EXPLICIT_VAR sz s) = [(s, sz)]
        /\  collect (W_AND a b) = collect a @ collect b
        /\  collect (W_OR a b) = collect a @ collect b
        /\  collect (W_NOT a) = collect a
        /\  collect (W_EQ a b) = collect a @ collect b
        /\  collect (W_PRED _ c) = collect c
        /\  collect (W_GR a b) = collect a @ collect b
        /\  collect (W_ADD a b) = collect a @ collect b
        /\  collect (W_SUB a b) = collect a @ collect b
        /\  collect (W_MUL a b) = collect a @ collect b
        /\  collect (W_DIV a b) = collect a @ collect b
        /\  collect (W_MOD a b) = collect a @ collect b
        /\  collect (W_SHL a b) = collect a @ collect b
        /\  collect (W_SHR a b) = collect a @ collect b
        /\  collect (W_ASHR a b) = collect a @ collect b
        /\  collect (W_SX _ w) = collect w
        /\  collect (W_ZX _ w) = collect w
        /\  collect (W_ITE c a b) = collect c @ collect a @ collect b
        /\  collect (W_SLICE _ w) = collect w
        /\  collect (W_NAMED_SLICE _ _ w) = collect w
        /\  collect (W_UPDATE_NAMED_SLICE a _ _ b) = collect a @ collect b
        /\  collect (W_CAT as) = concat (map collect as)
        /\  collect (W_MEM_READ _ m a) = collect m @ collect a
        /\  collect (W_MEM_WRITE _ m a d) = collect m @ collect a @ collect d
        in
        setify $ collect wexpr
;
// todo: not sure about size on 'W_UPDATE_NAMED_SLICE'.

let name_to_formal_actuals n sz =
        let f = sz == 1 => n | sprintf "%s[%d:0]" n (sz-1) in (f, [f])
;

let draw_hier_leaf fs =
        let collect = map (curry name_to_formal_actuals) # collect_names in
        let draw_hier (W_UPDATE_FN lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " <- " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_UPDATE_FN lhs rhs])
        /\  draw_hier (W_PHASE_DELAY lhs rhs) =
                PINST ("draw_hier " ^ (Pwexpr lhs) ^ " := " ^ (Pwexpr rhs))
                      [] T (collect rhs) (collect lhs) []
                      (P_LEAF [W_PHASE_DELAY lhs rhs])
        in
        P_HIER (map draw_hier fs)
;

letrec
    draw_hier_pinst (PINST n as T is os ts (P_LEAF fs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (draw_hier_leaf fs)
/\  draw_hier_pinst (PINST n as F is os ts (P_HIER cs)) =
        let as' = filter_signatures as in
        PINST n as' F is os ts (P_HIER (map draw_hier_pinst cs))
;

end_abstype draw_hier_pinst;

//------------------------------------------------------------------------------
// Fin.
