//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

// A simple interface for defining 5-tuple lists for (b)STE runs.
// This function catenates two five-tuple lists of the same type.
let and = defix @;
infix 1 and;

let bdd_when {ant::(bool#string#bool#int#int) list} {cond::bool} =
    map (\(w,n,v,f,t). (cond AND w),n,v,f,t) ant
;

begin_abstype;

let PL = ref 1;

let set_phase_duration cnt =
    cnt <= 0 => eprintf "Phase duration (%d) must be > 0\n" cnt |
    (PL := cnt)
;
export set_phase_duration;

let get_phase_duration {dummy::void} = deref PL;
non_lazy get_phase_duration;
export get_phase_duration;


// A simple interface for defining 5-tuple lists for STE runs.
// This function conjucts the condition cond into every five-tuple.
// Usage:  five_tuple_list when cond;
let when = bdd_when;
infix 2 when;
export when;

let bdd_is_clock nd cycles =
    let D = deref PL in
    map (\i. T, nd, (i%2=0), D*i, D*(i+1)) (0--(2*cycles-1))
;

// A simple interface for defining 5-tuple lists for (b)STE runs.
// Define a node nd to be a clock and generate cycs cycles of values.
// Usage: nd is_clock cycs;
let is_clock = bdd_is_clock;
infix 2 is_clock;
export is_clock;


let phase cnt = (deref PL)*cnt;
postfix phase;
export phase;

let phases cnt = (deref PL)*cnt;
postfix phases;
export phases;

let cycles cnt = (deref PL)*2*cnt;
postfix cycles;
export cycles;

let cycle cnt = (deref PL)*2*cnt;
postfix cycle;
export cycle;

lettype values =  STR_VAL   {v::string}
		| INT_VAL   {i::int}
		| BV_VAL    {v::bv}
		| BL_VAL    {v:: bool list}
		| WEXPR_VAL {e::wexpr}
		| UNC
;

// A shorthand for an unconstrained value
let X = UNC;
export X;

let s_in_phase v ph = [(T,STR_VAL v,ph,ph+1)];
let i_in_phase v ph = [(T,INT_VAL v,ph,ph+1)];
let bv_in_phase v ph = [(T,BV_VAL v,ph,ph+1)];
let bool_in_phase v ph = [(T,BL_VAL [v],ph,ph+1)];
let bl_in_phase v ph = [(T,BL_VAL v,ph,ph+1)];
let w_in_phase v ph = [(T,WEXPR_VAL (hw_destr v), ph, ph+1)];
let u_in_phase UNC ph = [(T,UNC,ph,ph+1)];
overload in_phase s_in_phase i_in_phase bv_in_phase bool_in_phase
		  bl_in_phase w_in_phase u_in_phase
;
infix 6 in_phase;
export in_phase;

let s_in_cycle v cyc    = [(T,STR_VAL v,2*cyc,2*cyc+2)];
let i_in_cycle v cyc    = [(T,INT_VAL v,2*cyc,2*cyc+2)];
let bv_in_cycle v cyc   = [(T,BV_VAL v,2*cyc,2*cyc+2)];
let bool_in_cycle v cyc = [(T,BL_VAL [v],2*cyc,2*cyc+2)];
let bl_in_cycle v cyc   = [(T,BL_VAL v,2*cyc,2*cyc+2)];
let w_in_cycle v cyc    = [(T,WEXPR_VAL (hw_destr v), 2*cyc, 2*cyc+2)];
let u_in_cycle UNC cyc    = [(T,UNC, 2*cyc, 2*cyc+2)];
overload in_cycle s_in_cycle i_in_cycle bv_in_cycle bool_in_cycle
			     bl_in_cycle w_in_cycle u_in_cycle
;
infix 6 in_cycle;
export in_cycle;

let mk_in_cycs v cycs = map (\cyc. (T,v,2*cyc, 2*cyc+2)) cycs;
let s_in_cycles v cycs    = mk_in_cycs (STR_VAL v) cycs;
let i_in_cycles v cycs    = mk_in_cycs (INT_VAL v) cycs;
let bv_in_cycles v cycs   = mk_in_cycs (BV_VAL v) cycs;
let bool_in_cycles v cycs = mk_in_cycs (BL_VAL [v]) cycs;
let bl_in_cycles v cycs   = mk_in_cycs (BL_VAL v) cycs;
let w_in_cycles v cycs    = mk_in_cycs (WEXPR_VAL (hw_destr v)) cycs;
let u_in_cycles UNC cycs  = mk_in_cycs (UNC) cycs;
overload in_cycles s_in_cycles i_in_cycles bv_in_cycles bool_in_cycles
			     bl_in_cycles w_in_cycles u_in_cycles
;
infix 6 in_cycles;
export in_cycles;

let gfor [({fixed::bool}, {v::values}, {start::int}, {end::int})] cnt =
    [(fixed, v, start, start+cnt)]
;
let sfor {v::string} {cnt::int} = [(F,STR_VAL v,0,cnt)];
let ifor {i::int} {cnt::int} = [(F,INT_VAL i,0,cnt)];
let bvfor {v::bv} {cnt::int} = [(F,BV_VAL v,0,cnt)];
let boolfor {v::bool} {cnt::int} = [(F,BL_VAL [v], 0, cnt)];
let blfor {v::bool list} {cnt::int} = [(F,BL_VAL v,0,cnt)];
let wfor v {cnt::int} = [(F,WEXPR_VAL (hw_destr v),0,cnt)];
let ufor UNC {cnt::int} = [(F,UNC,0,cnt)];


overload for gfor
	     sfor
	     ifor
	     bvfor
	     boolfor
	     blfor
	     wfor
	     ufor
;
infix 5 for;
export for;

let followed_by1 vtl1 vtl2 =
    let M = itlist (\(fixed, v,f,t).\m. max m t) vtl1 0 in
    let move tpl =
	val (fixed,v,f,t) = tpl in
	fixed => tpl |
	(fixed, v, f+M, t+M)
    in 
    vtl1 @ (map move vtl2)
;

let followed_by2 ftl1 ftl2 =
    let M = itlist (\(w,n,v,f,t).\m. max m t) ftl1 0 in
    let move (w,n,v,f,t) = (w, n, v, f+M, t+M) in
    ftl1 @ (map move ftl2)
;

overload followed_by followed_by1 followed_by2;
infix 4 followed_by;
export followed_by;

let gen_otherwise vt (v,end) =
    let is_def (fx,v,f,t) = f upto (t-1) in
    let defined = qsort (defix -) (setify (flatmap is_def vt)) then
    letrec add_default cur (t:ts) =
	cur+1 >= t => add_default (t+1) ts |
	(T, v, cur, t):(add_default (t+1) ts)
     /\    add_default cur [] = 
	cur+1 < end => [(T,v,cur,end)] | []
    in
    vt@(add_default 0 defined)
;

let s_otherwise vt (v,end)    = gen_otherwise vt (STR_VAL v, end);
let i_otherwise vt (v,end)    = gen_otherwise vt (INT_VAL v, end);
let bv_otherwise vt (v,end)   = gen_otherwise vt (BV_VAL v, end);
let bool_otherwise vt (v,end) = gen_otherwise vt (BL_VAL [v], end);
let bl_otherwise vt (v,end)   = gen_otherwise vt (BL_VAL v, end);
let w_otherwise vt (v,end)    = gen_otherwise vt (WEXPR_VAL (hw_destr v), end);
let u_otherwise vt (UNC,end)  = gen_otherwise vt (UNC, end);
overload otherwise s_otherwise
		   i_otherwise
		   bv_otherwise
		   bool_otherwise
		   bl_otherwise
		   w_otherwise
		   u_otherwise
;
infix 3 otherwise;
export otherwise;

let until v cyc = (v,cyc);
infix 4 until;
export until;

let is_number str =
    let non_digit s = 
	let v = ord s then
	(v < ord "0") OR (v > ord "9")
    in
    (find_first0 non_digit (explode str)) = 0
;

let base_is nds vtlist =
    let nds = md_expand_vectors nds in
    let vec = list2str T "" "," "" id (md_merge_vectors nds) in
    let sz = length nds in
    let cnv ({fixed::bool}, (STR_VAL v), {f::int} , {t::int}) =
	let vs = (
	    let s2l s = map (\s. s = "1") (explode s) in
	    str_is_prefix "0x" v =>
		s2l (sprintf "%0*b" sz (sscanf "0x%x" v))
	    |
	    str_is_prefix "0b" v =>
		s2l (sprintf "%0*b" sz (sscanf "0b%b" v))
	    |
	    is_number v =>
		s2l (sprintf "%0*b" sz (sscanf "%d" v))
	    |
	    (sz = 1) AND (v = "T") => [T] |
	    (sz = 1) AND (v = "F") => [F] |
	    let ss = md_expand_vector v then
	    length ss != sz => error "nope" |
	    map variable ss
	) catch
	    eprintf "Length mismatch in is (|%s| != |%s|)" vec v
	in
	map2 (\n.\v. (T,n,v,f,t)) nds vs
     /\ cnv (fixed, (INT_VAL i), f, t) =
	i < (-1*2**(sz-1)) =>
	    eprintf "Integer %d too small to fit %s" i vec
	| 
	i > (2**sz-1) =>
	    eprintf "Integer %d too large to fit %s" i vec
	| 
	let s = sprintf "%0*b" sz i in
	let vs = map (\s. s = "1") (explode s) in
	map2 (\n.\v. (T,n,v,f,t)) nds vs
     /\ cnv (fixed, (BV_VAL bv), f, t) =
	let vs = fixed_bv2list sz F bv T in
	map2 (\n.\v. (T,n,v,f,t)) nds vs
     /\ cnv (fixed, (BL_VAL vs), f, t) =
	length vs != sz =>
	    eprintf "Length mismatch in is (|%s| != length of list = %d)"
		    vec (length vs)
	|
	map2 (\n.\v. (T,n,v,f,t)) nds vs
     /\ cnv (fixed, (WEXPR_VAL e), f, t) =
	sz != wexpr_size e =>
	    eprintf "Length mismatch in is (|%s| != |%s|)" vec (Pwexpr e)
	|
	let vs  = wexpr2bool [] e in
	map2 (\n.\v. (T,n,v,f,t)) nds vs
     /\ cnv (fixed, UNC, f, t) = []
    in
    flatmap cnv vtlist
;

let s_is vec vtlist = base_is [vec] vtlist;

let wbase_is vec vtlist =
    let sz = md_size vec in
    let wT = W_CONST 1 1 in
    let wF = W_CONST 1 0 in
    let cnv ({fixed::bool}, (STR_VAL v), {f::int} , {t::int}) =
        let vs = (
            let s2l s = map (\s. s = "1") (explode s) in
            str_is_prefix "0x" v =>
                W_CONST sz (sscanf "0x%x" v)
            |
            str_is_prefix "0b" v =>
                W_CONST sz (sscanf "0b%b" v)
            |
            is_number v => 
                W_CONST sz (sscanf "%d" v)
            |
            (sz = 1) AND (v = "T") => wT |
            (sz = 1) AND (v = "F") => wF |
            md_size v != sz => error "nope" |
            W_EXPLICIT_VAR sz v
        ) catch
            eprintf "Length mismatch in is (|%s| != |%s|)" vec v
        in
        wexpr_size vs != sz =>
            eprintf "Length mismatch in is (|%s| != |%s|)" vec v
        |
        [(wT,vec,vs,f,t)]
     /\ cnv (fixed, (INT_VAL i), f, t) =
        i < (-1*2**(sz-1)) =>
            eprintf "Integer %d too small to fit %s" i vec
        |
        i > (2**sz-1) =>
            eprintf "Integer %d too large to fit %s" i vec
        |
        let vs = W_CONST sz i in
        wexpr_size vs != sz =>
            eprintf "Length mismatch in is (|%s| != |%d|)" vec i
        |
        [(wT,vec,vs,f,t)]
     /\ cnv (fixed, (BV_VAL bv), f, t) =
        eprintf "Cannot use bv's for wSTE statements"
     /\ cnv (fixed, (BL_VAL vs), f, t) =
        eprintf "Cannot use bool lists for wSTE statements"
     /\ cnv (fixed, (WEXPR_VAL e), f, t) =
        sz != wexpr_size e =>
            eprintf "Length mismatch in is (|%s| != |%s|)" vec (Pwexpr e)
        |
        [(wT,vec,e,f,t)]
     /\ cnv (fixed, UNC, f, t) = []
    in
    flatmap cnv vtlist
;

let hw_is v vtlist =
    base_is (md_expand_vectors (base_get_lhs_vars (hw_destr v))) vtlist
;

overload is s_is hw_is wbase_is;
infix 2 is;
export is;

// Casting function
let bool_ant {l::(bool#string#bool#int#int) list} = l;
export bool_ant;

// Casting function
let bexpr_ant {l::(bexpr#string#bexpr#int#int) list} = l;
export bexpr_ant;

// Casting function
let wexpr_ant {l::(wexpr#string#wexpr#int#int) list} = l;
export wexpr_ant;

end_abstype;
