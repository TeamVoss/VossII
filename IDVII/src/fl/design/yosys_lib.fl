//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------


let _SignExt sz avs =
    let bits = cexpand_vectors avs then
    let l = length bits in
    let new = replicate (sz-l+1) (hd bits) in
    new@(cmerge_vectors (tl bits))
;

let _ZeroExt sz avs =
    let bits = cexpand_vectors avs then
    let l = length bits in
    let new = replicate (sz-l) "0" in
    new@avs
;

let mk_attr src file lineno =
    [("src", sprintf "%s:%d" file lineno), ("src", src)]
;

let _not sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Y" in
    let Y = W_VAR sz "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_NOT A)] in
    PINST "draw_not" attrs T fa_inps fa_outs ints leaf
;

let _buf sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Y" in
    let Y = W_VAR sz "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y A] in
    PINST "draw_buffer" attrs T fa_inps fa_outs ints leaf
;

let _logic_not sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_EQ A (W_CONST sz 0))] in
    PINST "draw_unary_arithm {==0}" attrs T fa_inps fa_outs ints leaf
;

let _dff sz src out clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Q" in
    let Q = W_VAR sz "Q" in
    let f_clk = mk_name 1 "CLK" in
    let CLK = W_VAR 1 "CLK" in
    let i_dQ = mk_name sz "Q_##_" in
    let dQ = W_VAR sz "Q_##_" in
    let f_D = mk_name sz "D" in
    let D = W_VAR sz "D" in
    let i_dCLK = mk_name 1 "CLK_##_" in
    let dCLK = W_VAR 1 "CLK_##_" in
    let i_dD = mk_name sz "D_##_" in
    let dD = W_VAR sz "D_##_" in
    let fa_inps = [(f_D, d), (f_clk, clk)] in
    let fa_outs = [(f_out, out)] in
    let ints = [i_dQ, i_dCLK, i_dD] in
    let clk_del = W_PHASE_DELAY dCLK CLK in
    let d_del = W_PHASE_DELAY dD D in
    let y_del = W_PHASE_DELAY dQ Q in
    let mux = W_UPDATE_FN Q (W_ITE (W_AND CLK (W_NOT dCLK)) dD dQ) in
    let subs = P_LEAF [clk_del, d_del, y_del, mux] in
    PINST "draw_dff" attrs T fa_inps fa_outs ints subs
;

let _dlatch sz src out clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Q" in
    let Q = W_VAR sz "Q" in
    let f_clk = mk_name 1 "EN" in
    let EN = W_VAR 1 "EN" in
    let i_dQ = mk_name sz "Q_##_" in
    let dQ = W_VAR sz "Q_##_" in
    let f_D = mk_name sz "D" in
    let D = W_VAR sz "D" in
    let ints = [i_dQ] in
    let fa_inps = [(f_D, d), (f_clk, clk)] in
    let fa_outs = [(f_out, out)] in
    let y_del = W_PHASE_DELAY dQ Q in
    let mux = W_UPDATE_FN Q (W_ITE EN D dQ) in
    let subs = P_LEAF [y_del, mux] in
    PINST "draw_pos_d_latch" attrs T fa_inps fa_outs ints subs
;

let _adff sz src out arst clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Q" in
    let Q = W_VAR sz "Q" in
    let f_arst = mk_name 1 "ARST" in
    let ARST = W_VAR 1 "ARST" in
    let f_clk = mk_name 1 "CLK" in
    let CLK = W_VAR 1 "CLK" in
    let i_dQ = mk_name sz "Q_##_" in
    let dQ = W_VAR sz "Q_##_" in
    let f_D = mk_name sz "D" in
    let D = W_VAR sz "D" in
    let i_dCLK = mk_name 1 "CLK_##_" in
    let dCLK = W_VAR 1 "CLK_##_" in
    let i_dD = mk_name sz "D_##_" in
    let dD = W_VAR sz "D_##_" in
    let fa_inps = [(f_D, d), (f_clk, clk), (f_arst, arst)] in
    let fa_outs = [(f_out, out)] in
    let ints = [i_dQ, i_dCLK, i_dD] in
    let clk_del = W_PHASE_DELAY dCLK CLK in
    let d_del = W_PHASE_DELAY dD D in
    let y_del = W_PHASE_DELAY dQ Q in
    let ZERO = W_CONST sz 0 in
    let mux = W_UPDATE_FN Q
		(W_ITE ARST ZERO
			    (W_ITE (W_AND CLK (W_NOT dCLK)) dD dQ)) in
    let subs = P_LEAF [clk_del, d_del, y_del, mux] in
    PINST "draw_adff" attrs T fa_inps fa_outs ints subs
;

let mk_ifc_signal fa_r sz name act =
    let formal = mk_name sz name then
    let Wvar = W_VAR sz name then
    (fa_r := ((formal, act): deref fa_r)) fseq
    Wvar
;

let mk_int_signal int_r sz name =
    let formal = mk_name sz name then
    let Wvar = W_VAR sz name then
    (int_r := (formal: deref int_r)) fseq
    Wvar
;

let _adffe p_clk p_en p_arst sz src q arst en clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fa_inps_r = ref [] then
    let fa_outs_r = ref [] then
    let ints_r    = ref [] then
    let Q	  = mk_ifc_signal fa_outs_r sz "Q" q then
    let ARST	  = mk_ifc_signal fa_inps_r 1 "ARST" arst then
    let CLK	  = mk_ifc_signal fa_inps_r 1 "CLK" clk then
    let EN	  = mk_ifc_signal fa_inps_r 1 "EN" en then
    let D	  = mk_ifc_signal fa_inps_r sz "D" d then
    let dQ	  = mk_int_signal ints_r sz "Q_##_" then
    let dEN	  = mk_int_signal ints_r 1 "EN_##_" then
    let dCLK	  = mk_int_signal ints_r 1 "CLK_##_" then
    let dD	  = mk_int_signal ints_r sz "D_##_" then
    let clk_del	  = W_PHASE_DELAY dCLK CLK then
    let en_del	  = W_PHASE_DELAY dEN EN then
    let d_del	  = W_PHASE_DELAY dD D then
    let y_del	  = W_PHASE_DELAY dQ Q then
    let ZERO	  = W_CONST sz 0 then
    let clk_cond  = p_clk => W_AND (W_NOT dCLK) CLK | W_AND dCLK (W_NOT CLK) then
    let en_cond   = p_en  => dEN | W_NOT dEN then
    let rst_cond  = p_arst => ARST | W_NOT ARST then
    let mux	  = W_UPDATE_FN Q
		    (W_ITE rst_cond ZERO (W_ITE (W_AND en_cond clk_cond) dD dQ))
    then
    let subs	   = P_LEAF [clk_del, d_del, y_del, mux] then
    let pfn = sprintf "draw_adffe %s %s %s"
		      (p_clk  => "1" | "0")
		      (p_en   => "1" | "0")
		      (p_arst => "1" | "0")
    then
    PINST pfn attrs T
	    (deref fa_inps_r) (deref fa_outs_r) (deref ints_r) subs
;

let _dffe p_clk p_en sz src q en clk d = 
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fa_inps_r = ref [] then
    let fa_outs_r = ref [] then
    let ints_r    = ref [] then
    let Q	  = mk_ifc_signal fa_outs_r sz "Q" q then
    let CLK	  = mk_ifc_signal fa_inps_r 1 "CLK" clk then
    let EN	  = mk_ifc_signal fa_inps_r 1 "EN" en then
    let D	  = mk_ifc_signal fa_inps_r sz "D" d then
    let dQ	  = mk_int_signal ints_r sz "Q_##_" then
    let dEN	  = mk_int_signal ints_r 1 "EN_##_" then
    let dCLK	  = mk_int_signal ints_r 1 "CLK_##_" then
    let dD	  = mk_int_signal ints_r sz "D_##_" then
    let clk_del	  = W_PHASE_DELAY dCLK CLK then
    let en_del	  = W_PHASE_DELAY dEN EN then
    let d_del	  = W_PHASE_DELAY dD D then
    let y_del	  = W_PHASE_DELAY dQ Q then
    let ZERO	  = W_CONST sz 0 then
    let clk_cond  = p_clk => W_AND (W_NOT dCLK) CLK | W_AND dCLK (W_NOT CLK) then
    let en_cond   = p_en  => dEN | W_NOT dEN then
    let mux	  = W_UPDATE_FN Q
			(W_ITE (W_AND en_cond clk_cond) dD dQ) then
    let subs	   = P_LEAF [clk_del, d_del, y_del, mux] then
    let pfn = sprintf "draw_dffe %s %s"
		      (p_clk  => "1" | "0")
		      (p_en   => "1" | "0")
    then
    PINST pfn attrs T (deref fa_inps_r) (deref fa_outs_r) (deref ints_r) subs
;

let _sdff p_clk p_srst sz src q srst clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fa_inps_r = ref [] then
    let fa_outs_r = ref [] then
    let ints_r    = ref [] then
    let Q	  = mk_ifc_signal fa_outs_r sz "Q" q then
    let SRST	  = mk_ifc_signal fa_inps_r 1 "SRST" srst then
    let CLK	  = mk_ifc_signal fa_inps_r 1 "CLK" clk then
    let D	  = mk_ifc_signal fa_inps_r sz "D" d then
    let dQ	  = mk_int_signal ints_r sz "Q_##_" then
    let dCLK	  = mk_int_signal ints_r 1 "CLK_##_" then
    let dD	  = mk_int_signal ints_r sz "D_##_" then
    let dSRST	  = mk_int_signal ints_r 1 "SRST_##_" then
    let clk_del	  = W_PHASE_DELAY dCLK CLK then
    let d_del	  = W_PHASE_DELAY dD D then
    let y_del	  = W_PHASE_DELAY dQ Q then
    let srst_del  = W_PHASE_DELAY dSRST SRST then
    let clk_cond  = p_clk => W_AND (W_NOT dCLK) CLK | W_AND dCLK (W_NOT CLK) then
    let srst_cond = p_srst => dSRST | W_NOT dSRST then
    let ZERO	  = W_CONST sz 0 then
    let mux	  = W_UPDATE_FN Q
			(W_ITE clk_cond 
			    (W_ITE srst_cond ZERO dD) dQ) then
    let subs	   = P_LEAF [clk_del, d_del, y_del, srst_del, mux] then
    let pfn = sprintf "draw_sdff %s %s"
		      (p_clk  => "1" | "0")
		      (p_srst   => "1" | "0")
    then
    PINST pfn attrs T
	    (deref fa_inps_r) (deref fa_outs_r) (deref ints_r) subs
;

let _sdffe p_clk p_en p_srst sz src q srst en clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fa_inps_r = ref [] then
    let fa_outs_r = ref [] then
    let ints_r    = ref [] then
    let Q	  = mk_ifc_signal fa_outs_r sz "Q" q then
    let SRST	  = mk_ifc_signal fa_inps_r 1 "SRST" srst then
    let CLK	  = mk_ifc_signal fa_inps_r 1 "CLK" clk then
    let EN	  = mk_ifc_signal fa_inps_r 1 "EN" en then
    let D	  = mk_ifc_signal fa_inps_r sz "D" d then
    let dQ	  = mk_int_signal ints_r sz "Q_##_" then
    let dEN	  = mk_int_signal ints_r 1 "EN_##_" then
    let dCLK	  = mk_int_signal ints_r 1 "CLK_##_" then
    let dD	  = mk_int_signal ints_r sz "D_##_" then
    let dSRST	  = mk_int_signal ints_r 1 "SRST_##_" then
    let clk_del	  = W_PHASE_DELAY dCLK CLK then
    let en_del	  = W_PHASE_DELAY dEN EN then
    let d_del	  = W_PHASE_DELAY dD D then
    let q_del	  = W_PHASE_DELAY dQ Q then
    let srst_del  = W_PHASE_DELAY dSRST SRST then
    let ZERO	  = W_CONST sz 0 then
    let clk_cond  = p_clk => W_AND (W_NOT dCLK) CLK | W_AND dCLK (W_NOT CLK) then
    let en_cond   = p_en => dEN | W_NOT dEN then
    let srst_cond = p_srst => dSRST | W_NOT dSRST then
    let mux	  = W_UPDATE_FN Q
			(W_ITE clk_cond 
			       (W_ITE srst_cond ZERO
					    (W_ITE en_cond dD dQ)) dQ) then
    let subs	   = P_LEAF [clk_del, d_del, en_del, q_del, srst_del, mux] then
    let pfn = sprintf "draw_sdffe %s %s %s"
		      (p_clk  => "1" | "0")
		      (p_en   => "1" | "0")
		      (p_srst => "1" | "0")
    then
    PINST pfn attrs T
	    (deref fa_inps_r) (deref fa_outs_r) (deref ints_r) subs
;

let _sdffce p_clk p_en p_srst sz src q srst en clk d =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fa_inps_r = ref [] then
    let fa_outs_r = ref [] then
    let ints_r    = ref [] then
    let Q	  = mk_ifc_signal fa_outs_r sz "Q" q then
    let SRST	  = mk_ifc_signal fa_inps_r 1 "SRST" srst then
    let CLK	  = mk_ifc_signal fa_inps_r 1 "CLK" clk then
    let EN	  = mk_ifc_signal fa_inps_r 1 "EN" en then
    let D	  = mk_ifc_signal fa_inps_r sz "D" d then
    let dQ	  = mk_int_signal ints_r sz "Q_##_" then
    let dEN	  = mk_int_signal ints_r 1 "EN_##_" then
    let dCLK	  = mk_int_signal ints_r 1 "CLK_##_" then
    let dD	  = mk_int_signal ints_r sz "D_##_" then
    let dSRST	  = mk_int_signal ints_r 1 "SRST_##_" then
    let clk_del	  = W_PHASE_DELAY dCLK CLK then
    let en_del	  = W_PHASE_DELAY dEN EN then
    let d_del	  = W_PHASE_DELAY dD D then
    let q_del	  = W_PHASE_DELAY dQ Q then
    let srst_del  = W_PHASE_DELAY dSRST SRST then
    let ZERO	  = W_CONST sz 0 then
    let clk_cond  = p_clk => W_AND (W_NOT dCLK) CLK | W_AND dCLK (W_NOT CLK) then
    let en_cond   = p_en => dEN | W_NOT dEN then
    let srst_cond = p_srst => dSRST | W_NOT dSRST then
    let mux	  = W_UPDATE_FN Q
			(W_ITE (W_AND en_cond clk_cond) 
			       (W_ITE srst_cond ZERO dD) dQ) then
    let subs	   = P_LEAF [clk_del, d_del, en_del, q_del, srst_del, mux] then
    let pfn = sprintf "draw_sdffce %s %s %s"
		      (p_clk  => "1" | "0")
		      (p_en   => "1" | "0")
		      (p_srst => "1" | "0")
    then
    PINST pfn attrs T
	    (deref fa_inps_r) (deref fa_outs_r) (deref ints_r) subs
;

let mk_rtl op name attrs sz out inp1 inp2 =
    let f_out = mk_name sz "Y" in
    let Y = W_VAR sz "Y" in
    let f_inp1 = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let f_inp2 = mk_name sz "B" in
    let B = W_VAR sz "B" in
    let fa_inps = [(f_inp1, inp1), (f_inp2, inp2)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (op A B)] in
    PINST name attrs T fa_inps fa_outs ints leaf
;

let _sshl sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_SHL "draw_rtl {<<}" attrs sz
;

let _shl sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_SHL "draw_rtl {<<}" attrs sz
;

let _sub sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_SUB "draw_rtl {-}" attrs sz
;

let _add sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_ADD "draw_rtl {+}" attrs sz
;

let _mul sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_MUL "draw_rtl {*}" attrs sz
;

let _div sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_DIV "draw_rtl {/}" attrs sz
;

let _mod sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_MOD "draw_rtl {%}" attrs sz
;

let _and sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_AND "draw_and2" attrs sz
;

let _or sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_rtl W_OR "draw_or2" attrs sz
;

let _xor sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let fn A B = W_OR (W_AND (W_NOT A) B) (W_AND A (W_NOT B)) in
    mk_rtl fn "draw_xor2" attrs sz
;

let _neg sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Y" in
    let Y = W_VAR sz "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_SUB (W_CONST sz 0) A)] in
    PINST "draw_unary_arithm {-}" attrs T fa_inps fa_outs ints leaf
;

let _shr  o_sz a_sz b_sz src out inp1 inp2 =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name o_sz "Y" in
    let Y = W_VAR o_sz "Y" in
    let f_inp1 = mk_name a_sz "A" in
    let A = W_VAR a_sz "A" in
    let f_inp2 = mk_name b_sz "B" in
    let B = W_VAR b_sz "B" in
    let fa_inps = [(f_inp1, inp1), (f_inp2, inp2)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_SHR A B)] in
    PINST "draw_rtl {>>}" attrs T fa_inps fa_outs ints leaf
;

let _ashr  o_sz a_sz b_sz src out inp1 inp2 =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name o_sz "Y" in
    let Y = W_VAR o_sz "Y" in
    let f_inp1 = mk_name a_sz "A" in
    let A = W_VAR a_sz "A" in
    let f_inp2 = mk_name b_sz "B" in
    let B = W_VAR b_sz "B" in
    let fa_inps = [(f_inp1, inp1), (f_inp2, inp2)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_ASHR A B)] in
    PINST "draw_rtl {|>>}" attrs T fa_inps fa_outs ints leaf
;

let _land sz src out inp1 inp2 =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let op A B = 
	let A_T = W_NOT (W_EQ A (W_CONST sz 0)) in
	let B_T = W_NOT (W_EQ B (W_CONST sz 0)) in
	W_AND A_T B_T
    in
    mk_rtl op "draw_and2" attrs sz out inp1 inp2
;

let _lor sz src out inp1 inp2 =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let op A B = 
	let A_T = W_NOT (W_EQ A (W_CONST sz 0)) in
	let B_T = W_NOT (W_EQ B (W_CONST sz 0)) in
	W_OR A_T B_T
    in
    mk_rtl op "draw_or2" attrs sz out inp1 inp2
;

let mk_cmp op name attrs sz out inp1 inp2 =
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp1 = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let f_inp2 = mk_name sz "B" in
    let B = W_VAR sz "B" in
    let fa_inps = [(f_inp1, inp1), (f_inp2, inp2)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (op A B)] in
    PINST name attrs T fa_inps fa_outs ints leaf
;

let _eqx sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp W_EQ "draw_rtl {=}" attrs sz
;

let base_eq sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp W_EQ "draw_rtl {=}" attrs sz
;

let _eq sz src out inp1 inp2 =
    let base = base_eq sz src out inp1 inp2 in
    length inp2 != 1 => base |
    let i2 = hd inp2 in
    NOT (str_is_prefix "0b" i2) => base |
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp1 = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp1, inp1)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let v = sscanf "0b%b" i2 in
    let B = W_CONST sz v in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_EQ A B)] in
    let pfn = sprintf "draw_unary_arithm {=0x%x}" v in
    PINST pfn attrs T fa_inps fa_outs ints leaf
;
    

let _ne sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp (\w1.\w2. W_NOT (W_EQ w1 w2)) "draw_rtl {!=}" attrs sz
;

let _gt sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp W_GR "draw_rtl {>}" attrs sz
;

let _ge sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp (\w1.\w2. W_OR (W_GR w1 w2) (W_EQ w1 w2)) "draw_rtl {>=}" attrs sz
;

let _lt sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp (\w1.\w2. W_GR w2 w1)  "draw_rtl {<}" attrs sz
;

let _le sz src =
    let attrs = mk_attr src __FILE__ __LINE__ then
    mk_cmp (\w1.\w2. W_OR (W_GR w2 w1) (W_EQ w1 w2)) "draw_rtl {<=}" attrs sz
;


let _mux sz src out inp1 inp2 s =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name sz "Y" in
    let Y = W_VAR sz "Y" in
    let f_inp1 = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let f_inp2 = mk_name sz "B" in
    let B = W_VAR sz "B" in
    let f_s = mk_name 1 "S" in
    let S = W_VAR 1 "S" in
    let fa_inps = [(f_s,s), (f_inp2, inp2), (f_inp1, inp1)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_ITE S B A)] in
    PINST "draw_ite" attrs T fa_inps fa_outs ints leaf
;

let _base_pmux out_sz sel_sz src out inp1 inp2 s =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name out_sz "Y" in
    let Y = W_VAR out_sz "Y" in
    let f_inp1 = mk_name out_sz "A" in
    let A = W_VAR out_sz "A" in
    let f_inp2 = mk_name (sel_sz * out_sz) "B" in
    let B = W_VAR (sel_sz * out_sz) "B" in
    let f_s = mk_name sel_sz "S" in
    let S = W_VAR sel_sz "S" in
    let fa_inps = [(f_inp2, inp2), (f_inp1, inp1), (f_s,s)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    letrec select cur seen i =
        i < 0 => cur |
        let Si = W_SLICE [i] S in
        let Bi = W_SLICE (((i+1)*out_sz-1)--(i*out_sz)) B in
        let cur' = W_ITE (W_NOT Si) cur (W_ITE (W_NOT seen) Bi (W_X out_sz)) in
        let seen' = W_OR seen Si in
        select cur' seen' (i-1)
    in
    let eq = select A (W_CONST 1 0) (sel_sz-1) in
    let leaf = P_LEAF [W_UPDATE_FN Y eq] in
    PINST (sprintf "draw_pmux %d %d" out_sz sel_sz) attrs T fa_inps fa_outs ints leaf
;   


let cmerge ns =
    let raw = md_merge_vectors ns in
    letrec merge_digits so_far (v:vs) =
        str_is_prefix "0b" v => merge_digits ((string_lastn v 1):so_far) vs |
        so_far = [] => v:(merge_digits [] vs) |
        (list2str T "0b" "" "" id (rev so_far)):v:(merge_digits [] vs)
     /\    merge_digits so_far [] =
        so_far = [] => [] | [(list2str T "0b" "" "" id (rev so_far))]
    in
    merge_digits [] raw
;

let cluster_inputs out_sz inp =
    (
        let expand s =
            str_is_prefix "0b" s =>
                map (sprintf "0b%s") (butfirstn 2 (explode s))
            | md_expand_vector s
        in
        let inp_l = flatmap expand inp in
        let chunks = cluster out_sz inp_l in
        map cmerge chunks
    ) catch eprintf "cluster_inputs failed for %d %S\n" out_sz inp
;

let _gen_pmux out_sz sel_sz src out inp1 inp2 s =
    let base = _base_pmux out_sz sel_sz src out inp1 inp2 s in
    (
	let attrs = mk_attr src __FILE__ __LINE__ then
	let f_out = mk_name out_sz "Y" in
	let Y = W_VAR out_sz "Y" in
	let f_inp1 = mk_name out_sz "A" in
	let A = W_VAR out_sz "A" in
	let bs = cluster_inputs out_sz inp2 in
	length bs != sel_sz => (
	    (fprintf stderr "Lengh mismatch in _gen_pmux\n|%S| != %d\n"
		    (map (sprintf "%S") bs) sel_sz) fseq
	    error "Length mismatch"
	) |
	let Bs = map (\i. W_VAR out_sz (sprintf "B_%d" i)) (1 upto sel_sz) in
	let f_b = map (\i. mk_name out_sz (sprintf "B_%d" i)) (1 upto sel_sz) in
	let fa_B_inps = zip f_b bs in
	let f_s = map (\i. mk_name 1 (sprintf "S_%d" i)) (1 upto sel_sz) in
	let Ss = map (\i. W_VAR 1 (sprintf "S_%d" i)) (1 upto sel_sz) in
	let fa_S_inps = map2 (\f.\a. f,[a]) f_s s in
	let fa_inps =
	    (flatmap (\p. [(fst p),(snd p)]) (zip fa_S_inps fa_B_inps)) @
	    [(f_inp1,inp1)]
	in
	let fa_outs = [(f_out, out)] in
	let ints = [] in
	letrec select (sel:sels) (b:bs) = 
		W_ITE sel b (select sels bs)
	 /\    select [] [] = A
	in
	let eq = select Ss Bs in
	let leaf = P_LEAF [W_UPDATE_FN Y eq] in
	PINST (sprintf "draw_CASE %d" sel_sz) attrs T fa_inps fa_outs ints leaf
    ) gen_catch (\msg. (fprintf stderr "Debug: %s\n" msg) fseq base)
;

let binarystring2wconst out_sz s =
    let s = str_is_prefix "0b" s => substr s 3 (-1) | s in
    let es = explode s in
    let tp = setify es in
    tp = ["x"] => W_X out_sz |
    ((setify es) subtract ["0", "1"]) = [] => W_CONST out_sz (sscanf "%b" s) |
    letrec merge cs =
	cs = [] => [] |
	let idxb = find_first0 (\x.x != "x") cs in
	idxb = 0 => [(W_X (length cs))] |
	let xs = firstn (idxb-1) cs in
	(xs = [] => [] |  [(W_X (length xs))])@
	let rem = butfirstn (idxb-1) cs in
	let idxx = find_first0 (\x.x = "x") rem in
	idxx = 0 => [(W_CONST (length rem) (sscanf "%b" (implode rem)))] |
	let bin = firstn (idxx-1) rem in
	(bin = [] => [] | [(W_CONST (length bin) (sscanf "%b" (implode bin)))])@
	merge (butfirstn (idxx-1) rem)
    in
    let res = merge es then
    length res = 1 => hd res |
    W_CAT res
;


let _pmux out_sz sel_sz src out inp1 inp2 s =
    let base = _gen_pmux out_sz sel_sz src out inp1 inp2 s in
    length inp1 != 1 => base |
    NOT (str_is_prefix "0b" (hd inp1)) => base |
    length inp2 != 1 => base |
    NOT (str_is_prefix "0b" (hd inp2)) => base |
    let i2 = hd inp2 in
    let i2 = str_is_prefix "0b" i2 => substr i2 3 (-1) | i2 in
    (
    // Special case statement
    let attrs = mk_attr src __FILE__ __LINE__ then
    let Y = W_VAR out_sz "Y" in
    let f_out = mk_name out_sz "Y" in
    let fa_outs = [(f_out, out)] in
    let f_s = map (\i. mk_name 1 (sprintf "S_%d" i)) (1 upto sel_sz) in
    let Ss = map (\i. W_VAR 1 (sprintf "S_%d" i)) (1 upto sel_sz) in
    let fa_inps = map2 (\f.\a. f,[a]) f_s s in
    let ints = [] in
    let A = binarystring2wconst out_sz (hd inp1) in
    let mkC t = W_CONST out_sz (sscanf "%b" t) in
    let choices = str_cluster i2 out_sz in
    let Bs = map (binarystring2wconst out_sz) choices in
    letrec select (sel:sels) (b:bs) =
	    W_ITE sel b (select sels bs)
     /\    select [] [] = A
    in
    let eq = select Ss Bs in
    let leaf = P_LEAF [W_UPDATE_FN Y eq] in
    let post = sprintf "} %s" (substr (hd inp1) 3 (-1)) in
    let pfn = list2str T "draw_vcase {" " " post id choices then
    PINST pfn attrs T fa_inps fa_outs ints leaf
    ) gen_catch (\msg.
	(fprintf stderr "Failure caught for %s\n" msg) fseq
	base
    )
;

let _logic_reduce_bool sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_NOT (W_EQ A (W_CONST sz 0)))] in
    PINST "draw_unary_arithm {!=0}" attrs T fa_inps fa_outs ints leaf
;

let _logic_reduce_or sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_NOT (W_EQ A (W_CONST sz 0)))] in
    PINST "draw_unary_arithm {!=0}" attrs T fa_inps fa_outs ints leaf
;

let _logic_reduce_and sz src out inp =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let f_out = mk_name 1 "Y" in
    let Y = W_VAR 1 "Y" in
    let f_inp = mk_name sz "A" in
    let A = W_VAR sz "A" in
    let fa_inps = [(f_inp, inp)] in
    let fa_outs = [(f_out, out)] in
    let ints = [] in
    let leaf = P_LEAF [W_UPDATE_FN Y (W_EQ A (W_CONST sz (2**sz-1)))] in
    PINST "draw_and_n" attrs T fa_inps fa_outs ints leaf
;

// NOTE: 'en' not used!
let _memrd src width abits mem {en::string list} addr data =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let lines = (md_size mem)/width in
    let mem_info = MEM abits lines width in
    let f_data = mk_name width "DATA" in
    let DATA = W_VAR width "DATA" in
    let f_addr = mk_name abits "ADDR" in
    let ADDR = W_VAR abits "ADDR" in
    let MEM = W_VAR (lines*width) "MEM" in
    let f_MEM = mk_name (lines*width) "MEM" in
    let child_leaf = P_LEAF [W_UPDATE_FN DATA (W_MEM_READ mem_info MEM ADDR)] in
    let child =
        PINST "mem" [] T [(f_MEM, [mem]), (f_addr,[f_addr])]
                         [(f_data,[f_data])] [] child_leaf
    in
    let pfn = sprintf "draw_mem_read %d" lines in
    PINST pfn attrs T [(f_addr,addr), (mem,[mem])] [(f_data,data)] []
                    (P_HIER [child])
;

// NOTE: Assumes this is only used for ROMs!!!!!
let _meminit src width abits mem inits =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let init = string_tl (string_tl (hd inits)) in
    let lines = (md_size mem)/width in
    let sz = lines*width in
    let MEM = W_VAR sz "MEM" in
    let f_MEM = mk_name sz "MEM" in
    let content = sscanf "%b" init then
    let child_leaf = P_LEAF [W_UPDATE_FN MEM (W_CONST sz content)] in
    let child = PINST "mem" [] T [] [(f_MEM, [mem])] [] child_leaf in
    let pfn = sprintf "draw_mem_init %d {%s}" width init in
    PINST pfn attrs T [] [(mem,[mem])] [] (P_HIER [child])
;

// Assumes only one write port!!!!!!
let _memwr src width abits mem en addr data =
    let attrs = mk_attr src __FILE__ __LINE__ then
    let lines = (md_size mem)/width in
    let mem_info = MEM abits lines width in
    let bits = lines*width in
    //
    let f_DATA = mk_name width "DATA" in
    let DATA = W_VAR width "DATA" in
    let f_EN = mk_name width "EN" in
    let EN = W_VAR width "EN" in
    let f_ADDR = mk_name abits "ADDR" in
    let ADDR = W_VAR abits "ADDR" in
    let MEM = W_VAR bits "MEM" in
    let f_MEM = mk_name bits "MEM" in
    // Intermediate signals
    let OLD = W_VAR bits "OLD" in
    let f_OLD = mk_name bits "OLD" in
    let OLD_DATA = W_VAR width "OLD_DATA" in
    let f_OLD_DATA = mk_name width "OLD_DATA" in
    let f_NEG_EN = mk_name width "NEG_EN" in
    let NEG_EN = W_VAR width "NEG_EN" in
    let f_A1 = mk_name width "A1" in
    let A1 = W_VAR width "A1" in
    let f_A2 = mk_name width "A2" in
    let A2 = W_VAR width "A2" in
    let NEW_DATA = W_VAR width "NEW_DATA" in
    let f_NEW_DATA = mk_name width "NEW_DATA" in
    let phase_del =
	let lf = P_LEAF [W_PHASE_DELAY OLD MEM] in
	PINST "pdel" [] T [(f_MEM, [f_MEM])] [(f_OLD,[f_OLD])] [] lf
    in
    let read =
	let lf = P_LEAF [W_UPDATE_FN OLD_DATA (W_MEM_READ mem_info OLD ADDR)] in
        PINST "read" [] T [(f_OLD, [f_OLD]), (f_ADDR,[f_ADDR])]
                          [(f_OLD_DATA,[f_OLD_DATA])] [] lf
    in
    let neg =
	let lf = P_LEAF [W_UPDATE_FN NEG_EN (W_NOT EN)] in
	PINST "neg" [] T [(f_EN,[f_EN])] [(f_NEG_EN,[f_NEG_EN])] [] lf
    in
    let a1 =
	let lf = P_LEAF [W_UPDATE_FN A1 (W_AND EN DATA)] in
	PINST "A1" [] T [(f_EN,[f_EN]),(f_DATA,[f_DATA])] [(f_A1,[f_A1])] [] lf
    in
    let a2 =
	let lf = P_LEAF [W_UPDATE_FN A2 (W_AND NEG_EN OLD_DATA)] in
	PINST "A2" [] T [(f_NEG_EN,[f_NEG_EN]),(f_OLD_DATA,[f_OLD_DATA])]
			[(f_A2,[f_A2])] [] lf
    in
    let or =
	let lf = P_LEAF [W_UPDATE_FN NEW_DATA (W_OR A1 A2)] in
	PINST "or" [] T [(f_A1,[f_A1]),(f_A2,[f_A2])]
			[(f_NEW_DATA,[f_NEW_DATA])] [] lf
    in
    let wr =
	let lf =
	    P_LEAF [W_UPDATE_FN MEM (W_MEM_WRITE mem_info OLD ADDR NEW_DATA)]
	in
	PINST "write" [] T
	    [(f_OLD,[f_OLD]),(f_ADDR,[f_ADDR]),(f_NEW_DATA,[f_NEW_DATA])]
	    [(f_MEM, [f_MEM])] [] lf
    in
    let pfn = sprintf "draw_mem_write %d" lines in
    PINST pfn attrs T
	    [(f_DATA,data), (f_EN, en), (f_ADDR,addr)]
	    [(f_MEM, [mem])]
	    [f_OLD, f_OLD_DATA, f_NEG_EN, f_A1, f_A2, f_NEW_DATA]
	    (P_HIER [phase_del,read,neg,a1,a2,or,wr])
;


// 
// let _mem attrs wr_ports rd_ports lines width offset abits conns =
//     let attrs = mk_attr src __FILE__ __LINE__ then
//     wr_ports != 1 => eprintf "_mem with >= 1 write ports(%d)" wr_ports |
//     rd_ports != 1 => eprintf "_mem with >= 1 read ports(%d)" rd_ports |
//     let mem_info = MEM abits lines width in
//     let mk_name base sz = sz = 1 => base | sprintf "%s[%d:0]" base (sz-1) in
//     let base = assoc "instance" attrs in
//     let MEM = W_VAR (lines*width) base in
//     let f_RD_ADDR = mk_name "RD_ADDR" abits then
//     let f_RD_CLK  = mk_name "RD_CLK" 1 in
//     let f_RD_DATA = mk_name "RD_DATA" width then
//     let f_RD_EN   = mk_name "RD_EN" lines then
//     let f_WR_ADDR = mk_name "WR_ADDR" abits then
//     let f_WR_CLK  = mk_name "WR_CLK" 1 in
//     let f_WR_DATA = mk_name "WR_DATA" width then
//     let f_WR_EN   = mk_name "WR_EN" lines then
//     let conn f = let a = assoc f conns in (f,a) in
//     let fa_inps =
//         map conn [f_RD_ADDR, f_RD_CLK, f_RD_EN,
//                   f_WR_ADDR, f_WR_CLK, f_WR_DATA, f_WR_EN]
//     in
//     let fa_outs = map conn [f_RD_DATA] in
//     let a_MEM     = sprintf "%s[%d:0][%d:0]" base (lines-1) (width-1) in
//     let ints = [a_MEM] in
// 
//     let f_MEM     = mk_name "mem" (lines*width) in
//     let p_mem =
//         PINST "simple_mem" [] T
// 
// new_mem <- W_MEM_WRITE info mem waddr data
// dout <- W_MEM_READ info mem raddr
// mem <: new_mem
//     let leaf =
//     PINST "mem" attrs F fa_inps fa_outs ints leaves
// 


