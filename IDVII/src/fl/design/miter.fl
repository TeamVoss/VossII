
// Code to create a miter circuit for two pexlifs
//                          Ckt spec
//                        +------+                     
//      i_1 ---------*----|   o_1|---------------+----+      +----+        
//                   |    |      |               | <= |------|    |           
//                   |    |      |    +----------+----+      |    |    
//      i_2 -------*-|----|   o_2|----|----------+----+      |    |
//                 | |    |      |    |          | <= |------| A  |
//      ...        | |    |      |    |  +-------+----+      | N  |----- eq
//                 | |    |      |... |  |       ...         | D  |      
//      i_m --*----|-|----|   o_n|----|--|-------+----+      |    |
//            |    | |    |      |    |  |       | <= |------|    | 
//            |    | |    |      |    |  |   +---+----+      +----+
//            |    | |    +------+    |  |   |                
//            |    | |     Ckt imp    |  |   |                
//            |    | |    +------+    |  |   |
//            |    | +----|  o_1 |----*  |   |
//            |    +------|  o_2 |-------*   |
//            |           |      | ...       |
//            +-----------|  o_n |-----------+
//                        +------+       
let mk_miter spec imp =
    val (PINST n1 a1 l1 fa_inps1 fa_outs1 ints1 chs1) = spec in
    val (PINST n2 a2 l2 fa_inps2 fa_outs2 ints2 chs2) = imp in
    // Check for same inputs/outputs
    let inps1 = setify (md_expand_vectors (flatmap snd fa_inps1)) in
    let inps2 = setify (md_expand_vectors (flatmap snd fa_inps2)) in
    let d = inps1 subtract inps2 in
    d != [] => eprintf "Input mismatch: %S in pexlif 1 but not in pexlif 2" d |
    let d = inps2 subtract inps1 in
    d != [] => eprintf "Input mismatch: %S in pexlif 2 but not in pexlif 1" d |
    let outs1 = setify (md_expand_vectors (flatmap snd fa_outs1)) in
    let outs2 = setify (md_expand_vectors (flatmap snd fa_outs2)) in
    let d = outs1 subtract outs2 in
    d != [] => eprintf "Output mismatch: %S in pexlif 1 but not in pexlif 2" d |
    let d = outs2 subtract outs1 in
    d != [] => eprintf "Output mismatch: %S in pexlif 2 but not in pexlif 1" d |
    // Same inputs and outputs
    // Now rename the outputs
    let spec' =
	let fa_outs1' =
	    map (\(f,as). f,(map (sprintf "P1_%s") (md_merge_vectors as)))
		fa_outs1
	in
	(PINST "spec" a1 l1 fa_inps1 fa_outs1' ints1 chs1)
    in
    let imp'=
	let fa_outs2' =
	    map (\(f,as). f,(map (sprintf "P2_%s") (md_merge_vectors as)))
		fa_outs2
	in
	(PINST "imp" a2 l2 fa_inps2 fa_outs2' ints2 chs2)
    in
    let ovecs = md_merge_vectors outs1 in
    let spec_outs = map (sprintf "P1_%s") ovecs in
    let imp_outs  = map (sprintf "P2_%s") ovecs in
    let rel = vec_zip spec_outs imp_outs in
    let mk_order_ok_pexlif1 v eq_nd =
	let sz = md_size v then
	let iv = vec_assoc v rel then
	let f_spec = mk_name sz "spec" then
	let f_imp  = mk_name sz "imp" then
	let f_ok   = mk_name sz "ok_rel" then
	let fa_inps = [(f_spec, [v]), (f_imp, iv)] then
	let fa_outs = [("ok", [eq_nd])] then
	let ints = [f_ok] then
	let mk_bit_cmp i_spec i_imp ok =
	    let o1  = W_EXPLICIT_VAR 1 i_spec in
	    let o2  = W_EXPLICIT_VAR 1 i_imp in
	    let okv = W_EXPLICIT_VAR 1 ok in
	    okv <- (o2 '<#=' o1)
	in
	let order_pexlifs = map3 mk_bit_cmp (md_expand_vector f_spec)
					    (md_expand_vector f_imp)
					    (md_expand_vector f_ok)
	then
	let and_pexlif = (W_VAR 1 "ok") <- (W_EQ (W_VAR sz "ok_rel")
						 (W_CONST sz (2**sz-1)))
	in
	PINST "order_ok" [] F fa_inps fa_outs ints
		(P_HIER (and_pexlif:order_pexlifs))
    in
    let sz = length spec_outs in
    let eq_v = mk_name sz "_ok" then
    let eq_nds = md_expand_vector eq_v then
    let check_pexlifs = map2 mk_order_ok_pexlif1 spec_outs eq_nds then
    let pfn = "draw_hier miter" in
    let fa_inps = map (\n. n,[n]) (md_extract_vectors inps1) in
    let fa_outs = [("_OK_", ["_OK_"])] in
    let ints = eq_v:(spec_outs@imp_outs) then
    let final_and = (W_VAR 1 "_OK_") <- (W_EQ (W_VAR sz "_ok")
					      (W_CONST sz (2**sz-1)))
    in
    let mpexlif =
	PINST "miter" [] F fa_inps fa_outs ints
		(P_HIER ([spec', imp', final_and]@check_pexlifs))
    then
    let mant = map (\n. T,n,variable n,0,1) inps1 then
    (mpexlif, mant)
;

