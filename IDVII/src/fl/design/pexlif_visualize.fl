
let Init_pexlif_visualize =
    (tcl_eval [sprintf "source %spexlif_visualize.tcl" DIR]) fseq ()
;
NOT noX => Init_pexlif_visualize | ();


lettype pvis = PVIS 
		    {vec2anon :: {string,string} tbl}
		    {vecsig2anons :: {string,(string list)} tbl}
		    {anon2vecs :: {string,(string list)} tbl}
		    {final :: string}
		    {pgm :: string list}
;


begin_abstype;

new_type_abbrev io_tp = (string#(string list)) list;
new_type_abbrev info_tp = int#string#io_tp;

clet mk_all_vecs sigs =
    let l = length sigs in
    l = 1 => (hd sigs) |
    l > 1 => list2str T "" "\n" "" id sigs | ""
;

clet mk_all_outs fa_outs = mk_all_vecs (flatmap snd fa_outs);


let insert_into_tbl tbl {info::info_tp} {l::string list} =
    let add1 v tbl =
	tbl_member tbl v => 
	    let l' = info:(tbl_get tbl v) then
	    let tbl' = tbl_delete tbl v then
	    tbl_insert tbl' v l'
	|
	    tbl_insert tbl v [info]
    in
    let tbl1 = itlist add1 l tbl then
    length l <= 1 => tbl1 |
    add1 (mk_all_vecs l) tbl1 
;

clet extract_fifo_info p assuming (pexlif_is_hier p) =
    val (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs)) = p in
    let fi_tbl_r = ref (tbl_create 100) then 
    let bfi_tbl_r = ref (tbl_create 100) then 
    let mk (idx,(PINST lname lattrs llf lfa_inps lfa_outs lints lbody)) =
	let pre_pfn = 
	    str_is_substr "draw_hfl" lname =>
		let nbr_inps = length lfa_inps in
		val [_,pre,txt] = str_reg_extract "^(.*draw_)hfl (.*)$" lname in
		sprintf "%shfl_code %d %d %s" pre nbr_inps idx txt
	    |
	    str_is_substr "draw_hier" lname =>
		val [_,pre,txt] =
		    str_reg_extract "^(.*draw_)hier (.*)$" lname
		in
		let module = txt = "" => "_dummy_" |
		    str_is_substr " " txt => sprintf "{%s}" txt | txt
		in
		let iname = (assoc "instance" lattrs) catch "" then
		let inst = sprintf "i%d:%s" idx iname then
		let mk_fa (f,as) = 
		    list2str T (sprintf "{%s {" f) " " "}}" id as
		in
		let mk_fas fas = list2str T "{" " " "}" mk_fa fas in
		let inames = mk_fas lfa_inps then
		let onames = mk_fas lfa_outs then
		sprintf "draw_fub %s %s %d %s %s" module inst idx inames onames
	    |
	    NOT (str_is_prefix "draw_" lname) =>
		let module = lname = "" => "_dummy_" |
		    str_is_substr " " lname => sprintf "{%s}" lname | lname
		in
		let iname = (assoc "instance" lattrs) catch "" then
		let inst = sprintf "i%d:%s" idx iname then
		let mk_fa (f,as) = 
		    list2str T (sprintf "{%s {" f) " " "}}" id as
		in
		let mk_fas fas = list2str T "{" " " "}" mk_fa fas in
		let inames = mk_fas lfa_inps then
		let onames = mk_fas lfa_outs then
		sprintf "draw_fub %s %s %d %s %s" module inst idx inames onames
	    |
	    lname
	in
	let pfn = sprintf "add_inst %d %s" idx pre_pfn in
	let info = (idx, pfn, lfa_outs) in
	let outs = (flatmap snd lfa_outs) then
	(fi_tbl_r := (insert_into_tbl (deref fi_tbl_r) info outs)) fseq
	let bouts = setify (map get_vector_signature outs) then
	(bfi_tbl_r := (insert_into_tbl (deref bfi_tbl_r) info bouts))
    in
    (foreach mk (zip (1 upto (length cs)) cs)) fseq
    (deref fi_tbl_r), (deref bfi_tbl_r)    
 /\ extract_fifo_info p =
    error "Cannot extract_fifo_info for leaf cells"
;


let fanins fi_tbl bfi_tbl v =
    tbl_member fi_tbl v => tbl_get fi_tbl v |
    let bv = get_vector_signature v then
    NOT (tbl_member bfi_tbl bv) => [] |
    let alts = tbl_get bfi_tbl v then
    let member (idx,pfn,fa_outs) =
	(find_first0 (\(f,as). [v] vec_overlap as) fa_outs) != 0
    in
    filter member alts
;

clet pexlif_assertions p =
    val (PINST name attrs lf fa_inps fa_outs ints body) = p in
    filter (str_is_prefix "assert__") ints
;
	

clet pexlif2tcl p =
    NOT (pexlif_is_hier p) => error "pexlif2tcl called with leaf node" |
    val (PINST name attrs lf fa_inps fa_outs ints (P_HIER cs)) = p in
    let inps = map fst fa_inps in
    let outs = map fst fa_outs in
    val (fi_tbl, bfi_tbl) = extract_fifo_info p then
    let done = ref (tbl_create 100) then
    let cnt = ref 0 in
    let res = ref [] in
    let anon_cnt = ref 0 in
    let get_anon_name v =
	let c = deref anon_cnt then
	(anon_cnt := (c+1)) fseq
	let an = sprintf "an%06d" c then
	(done := (tbl_insert (deref done) v an)) fseq
	an
    in
    let add1 anon pfn chs =
	let tid =
	    let c = deref cnt then
	    (cnt := (c+1)) fseq
	    (sprintf "tr_%d" c)
	then
	let line =
	    chs = [] =>
		sprintf "set %s [add_sch_object LEAF {{%s}} {%s} {}]"
			tid anon pfn
	    |
		let pre =
			sprintf "set %s [add_sch_object NODE {{%s}} {%s} [list "
				tid anon pfn
		then
		list2str T pre " " "]]" (sprintf " $%s") chs
	then
	(res := (line:(deref res))) fseq
	tid
    in
    letrec build v =
	tbl_member (deref done) v =>
	    let anon = tbl_get (deref done) v in
	    add1 anon "draw_repeat_nd" []
	|
	let anon = get_anon_name v then
	let drivers = fanins fi_tbl bfi_tbl v then
	drivers = [] =>
	    [v] vec_overlap inps =>
		add1 anon (sprintf "draw_ifc_input {%s}" v) []
	    |
		add1 anon (sprintf "draw_dangling_input {%s}" v) []
	|
	length drivers = 1 =>
	    val (idx,name,fa_outs) = hd drivers in
	    let all_outs = mk_all_outs fa_outs then
	    v == all_outs =>
		val (PINST _ _ _ fa_inps _ _ _) = el idx cs in
		let fi = map (\(f,as). mk_all_vecs as) fa_inps in
		add1 anon name (map build fi)
	    |
	    let pfn = sprintf "draw_tap" in
	    add1 anon pfn [build all_outs]
	|
	// Multiple drivers
	let get_overlap (_,_,fas) = hd ([v] vec_intersect (flatmap snd fas)) in
	let parts = map get_overlap drivers then
	let pfn = sprintf "draw_concat %d" (length drivers) in
	add1 anon pfn (map build parts)
    in
    let assertions = pexlif_assertions p in
    let final = map build (outs@assertions) then
    let dummy_args = replicate (length final) "{}" in
    let anon = get_anon_name "DummyOut" then
    let pfn = list2str T "draw_output {" " " "}" id dummy_args then
    let final = add1 anon pfn final then
    let vec2anon = deref done then
    let v2a_map = tbl2list vec2anon then
    let vecsig2anons =
	let vs2a_map = map (\(v,a). get_vector_signature v,a) v2a_map then
	let mk1 l =
	    let vs = fst (hd l) in
	    let as = map snd l in
	    (vs, as)
	in
	list2tbl (map mk1 (partition fst vs2a_map))
    then
    let anon2vecs = list2tbl (map (\(v,a). a, (str_split v "\n")) v2a_map) then
    PVIS vec2anon vecsig2anons anon2vecs final (rev (deref res))
;

let pvis2tcl pvis =
    val (PVIS vec2anon vecsig2anons anon2vecs final pgm) = pvis in
    (final, pgm)
;

clet anon2vecs pvis anon =
    val (PVIS vec2anon vecsig2anons anon2vecs final pgm) = pvis in
    tbl_get anon2vecs anon
;

clet vec2anons pvis vec =
    val (PVIS vec2anon vecsig2anons anon2vecs final pgm) = pvis in
    let complete = [(tbl_get vec2anon vec)] catch [] in
    let pots =
	let sig = get_vector_signature vec in
	(tbl_get vecsig2anons sig) catch []
    in
    let keep a =
	let vs = tbl_get anon2vecs a in
	[vec] vec_overlap vs
    in
    let partial = (filter keep pots) subtract complete in
    complete, partial
;


//let new_visualize_fanin fsm stop_list [] levels vecs draw_level
    
end_abstype pexlif2tcl pvis2tcl anon2vecs vec2anons;

