//-------------------------------------------------------------------
// Copyright 2020 ...
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

load (DIR^"misc.fl");
load (DIR^"util.fl");
load (DIR^"pexlif.fl");

// -----------------------------------------------------------------------------

begin_abstype;

// Merge two subst., fails if any is empty.
//  @@::(subst opt)->(subst opt)->(subst opt)
let @@ (SOME x) (SOME y) = SOME (x @ y)
/\  @@ _        _        = NONE
;
infix 9 @@;

// Merge a list of opt. subst., fails if any is empty.
//  collect::((subst opt) list)->(subst opt)
let collect ss = itlist (defix @@) ss (SOME []);

// For every pair '(x,y)' in 's', 'assoc x s == y' and 'rev_assoc y s == x'.
//  coherent::subst->bool
let coherent s = all (\(u,t). all (\(x,y). (u == x) <==> (t == y)) s) s;

// Checks that directions of wires are respected by a subst.
//  directed::formals->formals->subst->bool
let directed f1 f2 s = all (\(u,t). elem u f1 <==> elem t f2) s;

// Find a subst., if any, s.t. both expressions are equal.
//  alpha::wexpr->wexpr->(subst opt)
letrec
    alpha (W_X _)       (W_X _)       = SOME []
/\  alpha (W_CONST _ _) (W_CONST _ _) = SOME []
/\  alpha (W_VAR _ n)   (W_VAR _ m)   = SOME [(n,m)]
/\  alpha (W_NAMED_CONST n _ _) (W_NAMED_CONST m _ _) = SOME [(n,m)]
/\  alpha (W_EXPLICIT_VAR _ n)  (W_EXPLICIT_VAR _ m)  = SOME [(n,m)]
/\  alpha (W_AND a b)   (W_AND x y)   = alpha a x @@ alpha b y
/\  alpha (W_OR a b)    (W_OR x y)    = alpha a x @@ alpha b y
/\  alpha (W_NOT a)     (W_NOT x)     = alpha a x
/\  alpha (W_EQ a b)    (W_EQ x y)    = alpha a x @@ alpha b y
/\  alpha (W_GR a b)    (W_GR x y)    = alpha a x @@ alpha b y
/\  alpha (W_ADD a b)   (W_ADD x y)   = alpha a x @@ alpha b y
/\  alpha (W_SUB a b)   (W_SUB x y)   = alpha a x @@ alpha b y
/\  alpha (W_MUL a b)   (W_MUL x y)   = alpha a x @@ alpha b y
/\  alpha (W_DIV a b)   (W_DIV x y)   = alpha a x @@ alpha b y
/\  alpha (W_MOD a b)   (W_MOD x y)   = alpha a x @@ alpha b y
/\  alpha (W_SHL a b)   (W_SHL x y)   = alpha a x @@ alpha b y
/\  alpha (W_SHR a b)   (W_SHR x y)   = alpha a x @@ alpha b y
/\  alpha (W_ASHR a b)  (W_ASHR x y)  = alpha a x @@ alpha b y
/\  alpha (W_SX _ a)    (W_SX _ x)    = alpha a x
/\  alpha (W_ZX _ a)    (W_ZX _ x)    = alpha a x
/\  alpha (W_ITE a b c) (W_ITE x y z) = alpha a x @@ alpha b y @@ alpha c z
/\  alpha _ _ = NONE
;
// todo: Some cases are missing.

// Find a subst., if any, s.t. both update functions are equal.
//  alpha_fn::update_fn->update_fn->subst
let alpha_fn (W_UPDATE_FN a b)   (W_UPDATE_FN x y)   = alpha a x @@ alpha b y
/\  alpha_fn (W_PHASE_DELAY a b) (W_PHASE_DELAY x y) = alpha a x @@ alpha b y
/\  alpha_fn _ _ = NONE
;

// Find subst., if any, s.t. both sets of functions are equal.
//  alpha_leaf::content->content->subst
let alpha_leaf (P_LEAF fs) (P_LEAF gs) =
        let verify (SOME x) = coherent x => SOME x | NONE
        /\  verify _        = NONE
        in
        let test = verify # collect # map2 alpha_fn fs in
        exhaust (map test (permutations gs))
;

// -----------------------------------------------------------------------------
// Construction of a subst. eq. between two pexlifs.

// Given an SHA eq. between 'p' and 'g', construct a formal subst.
//  actualize_sha::pexlif->pexlif->subst
let actualize_sha p g = zip (pexlif_get_actuals p) (pexlif_get_actuals g);

// Check that a subst. hasn't changed the direction of any wires.
//  directions::pexlif->pexlif->subst->bool
let directions (PINST _ _ _ i1 o1 _ _) (PINST _ _ _ i2 o2 _ _) s =
        (directed (concatMap snd i1) (concatMap snd i2) s) AND
        (directed (concatMap snd o1) (concatMap snd o2) s)        
;

// If optional valued satisfies pred, transform.
//  predicated::(a->bool)->(a opt)->(a->b)->(b opt)
let predicated p a f = maybe NONE a (\x. p x => SOME (f x) | NONE);

// Find formal subst. for two leaf pexlif's.
//  actualize_leaf::pexlif->pexlif->(subst opt)
let actualize_leaf p g =
        val (PINST _ _ _ i1 o1 _ l1) = p in
        val (PINST _ _ _ i2 o2 _ l2) = g in
        let lift = fa_actualize (i1 @ o1) (i2 @ o2) in
        let sub' = alpha_leaf l1 l2 in
        predicated (\s. directions p g s) sub' (setify # lift)
;

// Given a list of subst. of actuals for their children, find formal subst.
//  actualize_hier::(subst list)->pexlif->pexlif->(subst opt)
let actualize_hier ss p g =
        val (PINST _ _ _ i1 o1 _ _) = p in
        val (PINST _ _ _ i2 o2 _ _) = g in
        let lift = fa_actualize (i1 @ o1) (i2 @ o2) in
        let sub' = SOME (concat ss) in
        predicated (\s. coherent s AND directions p g s) sub' (setify # lift)
;

// -----------------------------------------------------------------------------

// Reorder nodes in 'ns' by 'xs'.
//  reorder_nodes::(int list)->(* list)->(* list)
let reorder_nodes xs ns = map (\n. el n xs) ns;
// todo: this is really bad...

// Expand list of choices, i.e,
//   'expand_choices [[1,2],[3,4]] = [[1,3],[1,4],[2,3],[2,4]]'.
//   'expand_choices [[1],[2,3],[4]] = [[1,2,4],[1,3,4]]
//  expand_choices::((* list) list)->((* list) list)
letrec
    expand_choices []       = []
/\  expand_choices (xs:[])  = map (\x. [x]) xs
/\  expand_choices (xs:xss) = flatmap (\x. map (\ys. x:ys) (expand_choices xss)) xs
;

// ...
//  internal_isomatch::pexlif->pexlif->(((int#int) list) list)
let internal_isomatch p g =
        let sp = internal_search_create p g in
        letrec
            go s =
                let xs = internal_search_step s then
                empty xs => [] | (xs : go s)
        in
        (sp) fseq (go sp)
;

// -----------------------------------------------------------------------------

new_type_abbrev subst = (string#string) list;

lettype match =
    M_LEAF {sub :: subst}
  | M_HIER {sub :: subst}
           {matches :: (int#int#match) list}
;
// note: M_LEAF could denote bothe alpha-equal leaves and SHA matches.

let get_match_sub (M_LEAF s) = s
/\  get_match_sub (M_HIER s _) = s
;

forward_declare{explore::pexlif->pexlif->(match list)};
// Exand a matching of 'p' and 'g' to test whether it's valid pairing or not.
//
// expand(P, G, T)
//     Sols = isomatch P G
//     if not T then
//         filter out Sols where 'hd P' is matched to 'hd G'
//     for earch Sol in Sols
//         Ms = match P and G according to Sol
//         Os = explore each (P',G') in Ms
//         Rs = merge/check that each solution-set O in Os is complete and valid.
//         report each valid O
//
//  expand::pexlif->pexlif->(((int#int#match) list) list)
let expand p g =
        let ss = internal_isomatch p g in
        let ps = pexlif_get_children p in
        let gs = pexlif_get_children g in
        concat $ filter (NOT # empty) $ pam ss (\sol.
            // Find and order the solutions haystack nodes.
            //  *_matches::(pexlif list)
            let ps_order = map fst (tl sol) in
            let gs_order = map snd (tl sol) in
            // note: needle's nodes (ps) are already in order.
            let ps' = ps in
            let gs' = reorder_nodes gs gs_order in
            // List of needle nodes and their matched haystack nodes.
            //  matches::((int#int) list)
            //  pairings::((pexlif#pexlif) list)
            let matches  = zip ps_order gs_order in
            let pairings = zip ps' gs' in
            // List of potential matches for each pairing, empty list if none.
            //  options::((int#int#(match list)) list)
            let go (i,j) (a,b) = (i, j, explore a b) in
            let options = map2 go matches pairings in
            // If any pairing has no solutions, return no match.
            any (\(_,_,xs). empty xs) options => [] |
            // Every combination of the above potential solutions.
            //  choices::(((int#int#match) list) list)
            letrec
                go []             = []
            /\  go ((i,j,xs):[])  = map (\x. [(i,j,x)]) xs
            /\  go ((i,j,xs):xss) =
                  flatmap (\x. map (\ys. (i,j,x):ys) (go xss)) xs
            in
            go options)
;

// Explore two pexlifs to find if they are a potential match.
//
// explore(P, G)
//     if P == G
//         report direct mapping
//     else if P ~ G
//         if P and G are leafs
//             report subst. s.t. P == G, if any.
//         else if P and G are hierarchies
//             CS = sets of possible subst. s.t. P == G
//             report each coherent choice C in CS
//     else
//         report no solution
//
//  explore::pexlif->pexlif->(match list)
let
    explore p g =
        // If p & g have matching SHA signatures, we do not have to expand them
        // further; we can match them by simply zipping their formals together.
        pexlif_get_SHA p == pexlif_get_SHA g =>
            let sub = actualize_sha p g in
            [M_LEAF sub] |
        // If p & g loosely match on their fingerprints, we must expand them
        // to find out whether they actually match or not.
        pexlif_get_FP p == pexlif_get_FP g =>
            // For leaves, we check if there is a valid subst. between them.
            pexlif_get_leaf p AND pexlif_get_leaf g =>
                let sub' = actualize_leaf p g in
                maybe [] sub' (\s. [M_LEAF s]) |
            // For hierarchies, we expand p & g to find every possible match
            // (expand) and check for:
            //   1) Is every child of 'g' used in the mapping and reported as
            //      a "simple" (M_LEAF) solution, or
            //   2) Is any child of 'g' un-matched or reported as a
            //      "complicated" (M_HIER) solution.
            // If 1), then a matching at this hier. level is "simple" as well.
            // Otherwise (2), the solution here is "complicated" and requires
            // that its matches must be "carved" out of the original haystack.
            // Any hier. solution must of course have coherent substitutions.
            let children = length (pexlif_get_children g) in
            let go ms =
                let get_sub (_,_,m) = get_match_sub m in
                let report sub =
                    let is_simple (_,_,(M_HIER _ _)) = F
                    /\  is_simple (_,_,(M_LEAF _))   = T
                    in
                    (length ms == children) AND (all is_simple ms) =>
                    (M_LEAF sub) |
                    (M_HIER sub ms)
                in
                let sub' = actualize_hier (map get_sub ms) p g in
                maybe NONE sub' (SOME # report)
            in
            map_some go (expand p g) |
        // If no signature match if found then p & g cannot possibly match.
        []
;

// Isomatch reports, for each child of the haystack (second argument), every
// potential matching with the needle (first argument). Where a matching
// consists of a list of potential substitutions that preserves, at worst,
// FP-equality with the needle.
//  isomatch::pexlif->pexlif->((int#match) list)
let isomatch needle haystack =
        pexlif_get_leaf haystack => eprintf "isomatch expects a hier. haystack." |
        // Run isomatch for each child in haystack.
        val (PINST _ _ _ _ _ _ (P_HIER gs)) = haystack in
        let match g ix = map (pair ix)  (explore needle g) in
        concat (ixmap match gs)
;
// todo: Carl wants both needle and haystack to be wrappers.

end_abstype isomatch;

// -----------------------------------------------------------------------------
// Pretty-print a match for debugging.

begin_abstype;

//  print_pair::(*->string)->(**->string)->(*#**)->string
let print_pair f g (x,y) = sprintf "%s:%s" (f x) (g y);

//  print_list::(*->string)->(* list)->string
let print_list = list2str T "[" "," "]";

//  print_subst::((string#string) list)->string
let print_subst = print_list (print_pair id id);

letrec
    pretty_match fp ind l r (M_LEAF sub) =
        let s = print_subst sub in
        fprintf fp "%*s%s matches %s with %s\n" ind "" l r s
/\  pretty_match fp ind l r (M_HIER sub ms) =
        let pretty (i,j,m) =
                let l'   = sprintf "%si%d/" l i in
                let r'   = sprintf "%si%d/" r j in
                pretty_match fp (ind+4) l' r' m
        in
        let s = print_subst sub in
        (fprintf fp "%*s%s iso-matches %s with %s where\n" ind "" l r s) fseq
        (foreach pretty ms)
;

let pretty_match (ix,m) =
      pretty_match stdout 0 "N/" (sprintf "H/%d/" ix) m fseq ();
;

end_abstype pretty_match;

// -----------------------------------------------------------------------------
// Replace sub-circuits with a given match.

begin_abstype;

let fa_subst_actuals (f,as) sub = (f,map (flip assoc sub) as);

let pex_subst_actuals (PINST name as l fa_inps fa_outs internals content) sub =
      let fa_inps' = map (flip fa_subst_actuals sub) fa_inps in
      let fa_outs' = map (flip fa_subst_actuals sub) fa_outs in
      PINST name as l fa_inps' fa_outs' internals content
;

let replace p (M_LEAF sub) = pex_subst_actuals p sub
/\  replace _ (M_HIER _ _) =
      eprintf "Match found but not complete (haystack > needle)."
;

// letrec
//     replace _ p g (M_LEAF sub) =
//         pex_subst_actuals p sub
// /\  replace inst p g (M_HIER sub {ms::(int#int#match) list}) =
//         val (p_is, g_is, ms) = unzip3 ms in
//         // Connect g indices to SHA signatures since we're going to fold g.
//         let child_sha ix cs = pexlif_get_SHA (el ix cs) in
//         val g_cs = pexlif_get_content (content_get_children g) in
//         let g_ss = map2 child_sha g_is g_cs in
//         // Fold the haystack.
//         // todo: one at a time.
//         let g' = fold_pexlif g g_is inst in
//         val (PINST n a l i o t (P_HIER (f:os))) = g' in
//         // 
//         undefined
// ;

end_abstype replace;

// =============================================================================
// Fin.