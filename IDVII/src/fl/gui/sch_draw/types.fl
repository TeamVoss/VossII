//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------


lettype justification =
                        SPEC
                    |   FOLD {ids::int list} {name::string}
                    |   UNFOLD {id::int}
                    |   FLATTEN
                    |   REPLACE {ids::int list} {tr::transform}
                    |   FEV {engine::string} {options::(string#string) list}
                    |   DUPLICATE {id::int}
                    |   MERGE {ids::int list}
		    |	RENAME_WIRES {sub:: (string#string) list}
//
// ...
//
andlettype transform =
                        TRANSFORM
                            {name::string}
                            {spec::string}	// SHA256 name
                            {imp::string}	// SHA256 name
                            {justification:: justification list}
;

lettype evis =
	    BASE_VIS
		    {vw::vis}
	|
	    TR_SEQ 
		    {parent::string}
		    {selection::int list}
		    {vis:: vis ref}
		    {transforms:: ((pexlif#fsm#justification) list) ref}
;

lettype vfsm =
	    STEV_ENV
		{id::string}
		{fsm::fsm}
		{ster::ste ref}
		{waveform_canvas::string ref}
		{time_ref::int ref}
		{stop_list::(string list) ref}
		{selection_list::(string list) ref}
		{highlight_list::((string#string) list) ref}
		{canvas_list :: (((string#evis)list) ref)}
		{fsm_list :: (((string#string)list) ref)}
		{cmds::(string list) ref}
	|
	    IDV_ENV
                {id::string}
                {selection_list::(string list) ref}
                {highlight_list::((string#string) list) ref}
		{canvas_list :: (((string#evis)list) ref)}
		{fsm_list :: (((string#string)list) ref)}
		{cmds::(string list) ref}
;

let evis2vis (BASE_VIS vis) = vis
 /\ evis2vis (TR_SEQ _ _ vr trlr) = deref vr
;

let is_STE_ENV (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) = T
 /\ is_STE_ENV other = F
;

let is_IDV_ENV (IDV_ENV id selr hlr cvsr fsmr cmds) = T
 /\ is_IDV_ENV other = F
;

let vfsm2id (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) = id
/\  vfsm2id (IDV_ENV id selr hlr cvsr fsmr cmds) = id
;

let vfsm2fsm (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) = fsm
/\  vfsm2fsm idv_env = error "vfsm2fsm not defined for IDV_ENV"
;

let vfsm2ste_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) = ster
/\  vfsm2ste_r (IDV_ENV id selr hlr cvsr fsmr cmds) = error "No STE in IDV_ENV"
;

let vfsm2wvr (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) = wvr
/\  vfsm2wvr (IDV_ENV id selr hlr cvsr fsmr cmds) = error "No wv in IDV_ENV"
;

let vfsm2cur_time_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	tr
/\  vfsm2cur_time_r (IDV_ENV id selr hlr cvsr fsmr cmds) =
	error "No cur_t in IDV_ENV"
;

let vfsm2stop_list_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	stopr
/\  vfsm2stop_list_r (IDV_ENV id selr hlr cvsr fsmr cmds) =
	error "No stopr in IDV_ENV"
;

let vfsm2selection_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	selr
/\  vfsm2selection_r (IDV_ENV id selr hlr cvsr fsmr cmds) = selr
;

let vfsm2canvases_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	cvsr
/\  vfsm2canvases_r (IDV_ENV id selr hlr cvsr fsmr cmds) = cvsr
;

let vfsm2fsms_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	fsmr
/\  vfsm2fsms_r (IDV_ENV id selr hlr cvsr fsmr cmds) =
	fsmr
;

let vfsm2hll_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	hlr
/\  vfsm2hll_r (IDV_ENV id selr hlr cvsr fsmr cmds) = hlr
;

let vfsm2cmds_r (STEV_ENV id fsm ster wvr tr stopr selr hlr cvsr fsmr cmd) =
	cmd
/\  vfsm2cmds_r (IDV_ENV id selr hlr cvsr fsmr cmds) = cmds
;

