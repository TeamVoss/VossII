load (DIR^"grammar.fl");
load (DIR^"pretty-verilog.fl");
load (DIR^"pretty-pexlif.fl");

load "ste.fl";

// =============================================================================

let pex2ver p file =
      let v  = pexlif2verilog p then
      let fp = fopen file "w" then
      fprintf fp "%s\n" v fseq
      fclose fp;
;

let pex2pex p top_level_module =
      let file = "test.v" in
      pex2ver p file fseq
      verilog2pexlif "-I." top_level_module [file] []
;

// -----------------------------------------------------------------------------

TYPE "byte" 8;

let t1_num =
      byte_input    i.
      byte_output   o.
      byte_internal t.
      CELL "test" [
        t <- i '+' i,
        o <- t
      ]
;

// -----------------------------------------------------------------------------

let miter pex =
      let go p = pex2pex p "test" in
      byte_input i.
      bit_output o.
      byte_internal a.
      byte_internal b.
      CELL "draw_hier miter" [
        pex i a,
        go (pex i b),
        o <- a '=' b
      ]
;

let p = t1_num 'i 'o;
let q = pex2pex p "test";
let m = miter t1_num 'i 'o;
let vis = STE_debug (pexlif2fsm m);

let N = 10;
let ant =
      "i[7:0]" is 0x01 in_cycle 0 followed_by
                  0x02 in_cycle 2 otherwise
                  0x00 until N cycles
;
let ste = STE "-e" vis [] ant [] [];

// =============================================================================
// Fin.
