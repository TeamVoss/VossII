load (DIR^"grammar.fl");
load (DIR^"pretty-verilog.fl");
load (DIR^"compiler.fl");

load "ste.fl";

// =============================================================================
// Sanity checks.
// =============================================================================

// pexlif is a module
//   phase delay -> always <=
//   contig -> assign <=
//
// verilog2pexlif in STE.fl

let doc1 =
  Source_text [Desc_module (Module_declaration_many (ID "test1")
    (SOME [ Port_decl_in  (Input_decl NONE F NONE [ID "a", ID "b"])
          , Port_decl_out (Output_decl_port NONE F NONE [ID "c"])
          ])
    [ NPM_Item (MOGI_cont (Cont_assign
        [ ( NLV_hier (HID NONE (ID "c")) NONE
          , Exp_binary
              (Exp_primary (Prim_hier (HID NONE (ID "a")) NONE))
              (B_add)
              (Exp_primary (Prim_hier (HID NONE (ID "b")) NONE))
          )
        ]))
    ]
)];

let ex1 = p_source_text doc1;
//print "=== Ex 1 ===\n";
//render ex1;

// -----------------------------------------------------------------------------

let doc2 =
  Source_text [Desc_module (Module_declaration_many (ID "test2")
    (SOME [ Port_decl_in  (Input_decl NONE F NONE [ID "a", ID "b"])
          , Port_decl_out (Output_decl_port NONE F NONE [ID "c"])
          ])
    [ NPM_Item (MOGI_always (Always
        (Statement_timing (PTC
          (PTC_event (Event_control_exp (Event_pos
            (Exp_primary (Prim_hier (HID NONE (ID "a")) NONE)))))
          (Statement_if (IEI
            ( Exp_unary (U_log_neg) (Prim_hier (HID NONE (ID "b")) NONE)
            , (Statement_nonblocking (Nonblocking_assignment
              (VLV_hier (HID NONE (ID "c")) NONE)
              (NONE)
              (Exp_primary (Prim_num (Num 1)))))
            )
            []
            (SOME (Statement_nonblocking (Nonblocking_assignment
              (VLV_hier (HID NONE (ID "c")) NONE)
              (NONE)
              (Exp_primary (Prim_num (Num 0))))))
    ))))))]
)];

let ex2 = p_source_text doc2;
//print "\n\n=== Ex 2 ===\n";
//render ex2;

// -----------------------------------------------------------------------------

TYPE "byte" 8;

// todo: remove spaces.
let buf1 =
    byte_input a.
    byte_output out.
    byte_internal mid.
    CELL "buf1" [
      mid <- '~' a,
      out <- '~' mid
    ];
let buf1_pex = buf1 'a 'out;
//buf1_pex;

let ex3 = p_source_text (pexlif2verilog buf1_pex);
//print "\n\n=== Ex 3 ===\n";

let res = render ex3;
let fp = fopen "test.v" "w";
fprintf fp "%s\n" res;
fclose fp;

//let p = verilog2pexlif ("-I.") "mbuf1" ["test.v"] [];
//STE_debug (pexlif2fsm p);

// =============================================================================