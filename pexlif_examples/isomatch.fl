load "ste.fl";

//------------------------------------------------------------------------------
// Isomatch on a random example.
//------------------------------------------------------------------------------

// let pex = gen_pinst [("inp",["inp"])] [("out",["out"])] 5 3;

//------------------------------------------------------------------------------
// Isomatch on a specific example (Buffers).
//------------------------------------------------------------------------------

// Pexlifs used for this example, as built by 'isomatch_build'.
let buf1     = "ac88643d4bc579102ac9a51c5f9f2939246f6dc966f84ec808af8e190f0951e7";
let buf2     = "9cc81a9e8c8940172a53edd086301cfd4552a606e405de80d0485412e10d8fcf";
let buf3     = "6e3b2c563e9a593a672331d7f3f70dae9a45f2565b2441aff77e0146e8dee4a8";
let buf4     = "80543250b0e38eeacbc13494ac8dd7f08ccecb1935183baea97d67a4787407e0";
let haystack = "606318b24ee7ebf383912c1087c13892c25ae1e3839e4db4801613aa28aa0485";

// Run isomatching for 'haystack' and 'buf1'.
print "Running Isomatch.\n";
let g = load_pexlif haystack;
let p = load_pexlif buf1;
let m = isomatch p g;
print (pretty_isomatch m);

// Store matches found (should be a couple).
let p_sha  = pexlif_get_SHA p;
let p_sha' = shorten_sha p_sha;
printf "Saving matches for %s.\n" p_sha';
flip foreach m (\(sha,subs).
    let sha' = shorten_sha sha in
    flip foreach subs (\[sub].
        (printf "> Saving match with %s.\n" sha') fseq
        (store_match p_sha sha sub)
));

// List matches.
let p_matches = fetch_matches p_sha;
let pr_sub = list2str T "[" "," "]" (\(x,y). sprintf "%s:%s" x y);
printf "Reading matches for %s.\n" p_sha';
flip foreach p_matches (\(sha,sub).
     let sha' = shorten_sha sha in
     let sub' = pr_sub sub in
     printf "> Matched %s to %s where %s\n" p_sha' sha' sub'
);

//------------------------------------------------------------------------------
// Fin.