123*333;

let v1 = 123*3;

let v2 = 2*v1-1;

v2;

let inc x = x+1;

inc 12;

let double x = x+x;
double 12;
double 1.2;

(int2bv 5);

double (int2bv 5);


let triple x = double x + x;
triple 12;
triple 1.2;
triple (int2bv 5);



let pow base n mod =
    letrec squaring (b:bs) cur =
	let sq = (cur * cur) % mod then
	IF b THEN (cur * (squaring bs sq)) % mod
	     ELSE (squaring bs sq)
     /\    squaring [] cur = '1
    in
    squaring (rev (bv2list n)) base
;

let profiled_pow base n mod =
    let cnt = ref 0 in
    letrec squaring (b:bs) cur =
	let sq = (cur * cur) % mod then
	(cnt := (deref cnt+1)) fseq
	IF b THEN (
	    (cnt := (deref cnt+1)) fseq
	    ((cur * (squaring bs sq)) % mod)
	) ELSE (squaring bs sq)
     /\    squaring [] cur = '1
    in
    let res = squaring (rev (bv2list n)) base then
    (fprintf stderr "Performed: %d multiplications and %d mod operations\n"
		    (deref cnt) (deref cnt)) fseq
    res
;


profiled_pow 17 (int2bv 34) 37;

pow 17 (int2bv 3) 37;
pow 17 (int2bv 63) 37;

bdd_size (pow (int2bv 17) (bv_ZX (bv_variable "n[7:0]")) '37);

let m = bv_ZX (bv_variable "b[15:0]");
let e = '219;
let n = '129;

let res = (pow m e n);
length (depends res);
bdd_size res;
