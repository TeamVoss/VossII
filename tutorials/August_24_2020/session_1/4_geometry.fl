
// Create a symbolic version of a list.
// The same approach can be used for any algebraic data type.
lettype slist = SLIST {leaf::bool} ({bv#bv} opt) ({slist} opt);

// Define "constructors"
let sNIL = SLIST T NONE NONE;
let sCONS e l = SLIST F (SOME e) (SOME l);

// and discriminators and destructors.
let is_sNIL (SLIST type opt_hd opt_tail) = type;
let is_sCONS (SLIST type opt_hd opt_tail) = NOT type;
let destr_sCONS (SLIST type (SOME hd) (SOME tl)) =  hd, tl;

// A simple memory data type.
lettype mem = MEM {initial_value::bv} {value_list::slist};
let initMem = MEM '0 sNIL;

// An image
lettype canvas = CANVAS {rows::int} {cols::int} {bitmap::mem ref};

// Load misc help and visualization functions
cload "canvas_help_functions.fl";

// Create an empty canvas.
let mk_canvas rows cols =
    CANVAS rows cols (ref (MEM '0 sNIL))
;
non_lazy mk_canvas;

// Function to write an address in memory
let write mem addr data =
    val (MEM init avs) = mem in
    (MEM init (sCONS (addr,data) avs))
;

// Function to read an address in memory
let read mem addr =
    val (MEM init avs) = mem in
    letrec rd l assuming (is_sCONS l) =
	val ((a,v),rem) = destr_sCONS l in
	a = addr => v | rd rem
     /\    rd l = init
    in
    rd avs
;

// Function mapping from row,col to memory location to read value
let get_pixel canvas row col =
    val (CANVAS rows cols m_r) = canvas then
    let m = deref m_r then
    let idx = row*(int2bv cols)+col in
    read m idx
;

// Function mapping from row,col to memory location to write value
let set_pixel canvas row col value =
    val (CANVAS rows cols m_r) = canvas then
    let m = deref m_r then
    let idx = row*(int2bv cols)+col in
    let m' = write m idx value then
    (m_r := m')
;

// Bresenham's line algorithm
// void plotLine(int x0, int y0, int x1, int y1)
// {
//     int dx = abs(x1-x0)
//     int sx = x0<x1 ? 1 : -1;
//     int dy = -abs(y1-y0);
//     int sy = y0<y1 ? 1 : -1;
//     int err = dx+dy;
//     int e2; /* error value e_xy */
//
//     for(;;) {
//      setPixel(x0,y0);
//      if ( x0==x1 AND y0==y1 ) break;
//      e2 = 2*err;
//      if (e2 >= dy) {
//          err = err + dy;
//          x0 = x0 + sx;
//      }
//      if (e2 <= dx) {
//          err = err + dx;
//          y0 = y0 + sy;
//      }
//     }
// }
//
let draw_line (x0,y0) (x1,y1) canvas =
    //
    let dx = abs (x1 - x0) then
    let sx = (x0 < x1) => '1 | '-1 then
    let dy = '-1 * abs(y1 - y0) then
    let sy = (y0 < y1) => '1 | '-1 then
    let err = dx + dy then
    letrec step err x0 y0 =
        (set_pixel canvas x0 y0 '1) fseq
        ((x0 = x1) AND (y0 = y1)) => () |
        (
            let e2 = '2 * err then
            val (err, x0) =
                ( (e2 >= dy) ) => ((err + dy),(x0 + sx) )
                                  | (err,x0)
            in
            val (err, y0) =
                ( (e2 <= dx) ) => ((err + dx),(y0 + sy) )
                                  | (err,y0)
            in
            step err x0 y0
        )
    in
    (step err x0 y0) fseq
    canvas
;


// Bresenham's circle drawing algorithm
//
// void plotCircle(int xm, int ym, int r)
// {
//    int x = -r, y = 0, err = 2-2*r; /* II. Quadrant */
//    do {
//       setPixel(xm-x, ym+y); /*   I. Quadrant */
//       setPixel(xm-y, ym-x); /*  II. Quadrant */
//       setPixel(xm+x, ym-y); /* III. Quadrant */
//       setPixel(xm+y, ym+x); /*  IV. Quadrant */
//       r = err;
//       if (r <= y) {
//      y++;
//      err = err + y*2 + 1;           /* e_xy+e_y < 0 */
//       }
//       if (r > x OR err > y) {
//      x++;
//      err = err + x*2 + 1; /* e_xy+e_x > 0 or no 2nd y-step */
//       }
//    } while (x < 0);
// }
//
let draw_circle (xc,yc) rad canvas =
    let x = '-1 * rad then
    let y = '0 then
    let err = '2 - '2 * rad then
    letrec step cond r err x y =
        cond == F => () |
        (set_pixel canvas (xc - x) (yc + y) '1) fseq
        (set_pixel canvas (xc - y) (yc - x) '1) fseq
        (set_pixel canvas (xc + x) (yc - y) '1) fseq
        (set_pixel canvas (xc + y) (yc + x) '1) fseq
        let r = err then
        val (y,err) =
            ( cond AND (r <= y) ) => (
                let y = y + '1 then
                let err = err + '2*y + '1 then
                (y,err)
            ) | (y,err)
        then
        val (x,err) =
            ( cond AND ((r > x) OR (err > y)) ) => (
                let x = x + '1 then
                let err = err + '2*x + '1 then
                (x,err)
            ) | (x,err)
        then
        let rcond = x >= '0 then
        (cond AND rcond) => () | (step (cond AND NOT rcond) r err x y)
    in
    (step T rad err x y) fseq
    canvas
;


let C1 = draw_line ('3,'19) ('20,'5) (mk_canvas 32 32);

VIS 1 C1;

let x0 = bv_constrained_variable "x0[5:0]" (\v. '0 < v AND v < '5);
let y0 = bv_constrained_variable "y0[5:0]" (\v. '0 < v AND v < '5);
let x1 = bv_constrained_variable "x1[5:0]" (\v. x0 < v AND v < '31);
let y1 = bv_constrained_variable "y1[5:0]" (\v. y0 < v AND v < '31);

let C2 = draw_line (x0,y0) (x1,y1) (mk_canvas 32 32);
C2;
depends C2;
VIS 5 C2;

//2**(length (depends C2));

let x0 = bv_constrained_variable "x0[5:0]" (\v. '10 < v AND v < '20);
let y0 = bv_constrained_variable "y0[5:0]" (\v. '10 < v AND v < '20);
let rad = bv_constrained_variable "r[5:0]" (\v. '2 < v AND v < '10);

let C3 = draw_circle (x0,y0) rad (mk_canvas 32 32);
C3;
VIS 15 C3;
// 
// Note: C3 represents:
2**(length (depends C3));
// distinct circles.

let hdsz = bv_constrained_variable "h[5:0]" (\v. '3 < v AND v < '5);
let body = bv_constrained_variable "b[5:0]" (\v. '2*hdsz < v AND v < '12);
let leg  = bv_constrained_variable "l[5:0]" (\v. '4 < v AND v < '8);
let arm  = bv_constrained_variable "a[5:0]" (\v. '3 < v AND v < '7);
let x0   = bv_constrained_variable "x0[5:0]" (\v. '12 < v AND v < '18);
let y0   = bv_constrained_variable "y0[5:0]" (\v. '5 < v AND v < '10);

let C4 =
    let C0 = mk_canvas 32 32 then
    let C1 = draw_circle (x0,y0) hdsz C0 then
    let C2 = draw_line (x0,y0 + hdsz) (x0,y0+ hdsz+body) C1 then
    let C3 = draw_line (x0,y0 + hdsz) (x0-arm,y0+ hdsz+arm) C2 then
    let C4 = draw_line (x0,y0 + hdsz) (x0+arm,y0+ hdsz+arm) C3 then
    let C5 = draw_line (x0,y0 +hdsz+body) (x0-leg,y0+hdsz+body+leg) C4 then
    let C6 = draw_line (x0,y0 +hdsz+body) (x0+leg,y0+hdsz+body+leg) C5 then
C6;

C4;
2**(length (depends C4));

VIS 5 C4;
