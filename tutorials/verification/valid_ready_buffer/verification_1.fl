cload (DIR^"buffer_imp_1.fl");
cload (DIR^"spec.fl");


// Signal names
let Tail    = sprintf "tail[%d:0]" addr_sz;
let Head    = sprintf "head[%d:0]" addr_sz;
let I_valid = "i'valid";
let I_ready = "i'ready";
let O_valid = "o'valid";
let O_ready = "o'ready";
let Din     = dname "i'd";
let Dout    = dname "o'd";
let M row   = dname (sprintf "i4/mem[%d]" row);


// Mapping function...

// Symbolic indexing of memory content
let M_is {addr::bv} {v::bv} {cyc::int} =
    let M1 row = (M row) is v in_cycle cyc when (addr = (int2bv row)) in
    flatmap M1 (0 upto (BUF_SIZE-1))
;

// Needed to make the symbolic if-then-else over similar structures.
let dummy_ant cyc =
    map (\(w,n,v,f,t).F,n,F,f,t) (M_is (bv_variable Tail) (bv_variable Din) cyc)
;

let merge_ant ant1 ant2 =
    let merge1 (w1,n1,v1,f1,t1) (w2,n2,v2,f2,t2) =
	n1 != n2 => eprintf "'Name' mismatch in merge_ant (%s!=%s)" n1 n2 |
	f1 != f2 => eprintf "'From' mismatch in merge_ant (%d!=%d)" f1 f2 |
	t1 != t2 => eprintf "'To' mismatch in merge_ant (%d!=%d)" t1 t2 |
	(w1 OR w2, n1, (w1 => v1 | v2), f1, t1)
    in
    map2 merge1 ant1 ant2
;

let inc_addr addr amount = (addr + amount) % (int2bv (2*BUF_SIZE));

let internal_state_mapping {cur_tail::bv} {buf::buf_state} {cyc::int} =
    let cnt = get_buf_size buf in
    let cur_head = inc_addr cur_tail cnt in
    let state_ant = Tail is cur_tail in_cycle cyc and
		    Head is cur_head in_cycle cyc
    in
    // Map the entries in the abstract buffer to stored elements in RAM
    letrec mem_map idx =
	let bidx = int2bv idx in
	bidx >= cnt => dummy_ant cyc |
	let loc = (cur_head - (int2bv (idx+1))) % (int2bv BUF_SIZE) in
	merge_ant (M_is loc (get_buf_element buf bidx) cyc) (mem_map (idx + 1))
    in
    let mem_ant = mem_map 0 in
    state_ant @ mem_ant
;

let cnt = bv_constrained_variable "cnt[3:0]" (\v. '0 <= v AND v <= ''BUF_SIZE);
let cur_tail = bv_variable (sprintf "t[%d:0]" addr_sz);
let i_data = bv_variable (dname "D0");
let i_valid = variable "i_valid";
let o_ready = variable "o_ready";

// Create a fully symbolic abstract buffer.
let init_buf = mk_buf BUF_SIZE DATA_SZ cnt;

let base_ant =
    "clk" is_clock 2
  and
    "reset" is 0 for 2 cycles
;

let inp_ant =
    "i'valid" is i_valid in_cycle 0
  and
    (dname "i'd") is i_data in_cycle 0
  and
    "o'ready" is o_ready in_cycle 0
;

let ant = base_ant @ inp_ant @ (internal_state_mapping cur_tail init_buf 0);


let cons =
    val (i_ready, o_valid, dout, new_buf) =
	spec i_valid i_data o_ready init_buf
    then
    let new_tail =
	(o_valid AND o_ready) => (inc_addr cur_tail (int2bv 1)) | cur_tail
    in
    let cons =
	I_ready is i_ready in_cycle 0
      and
	O_valid is o_valid in_cycle 0
      and
	(Dout is dout in_cycle 0) when o_valid
      and
	(internal_state_mapping new_tail new_buf 1)
    in
    cons
;

let ste = STE "-e" ckt [] ant cons [];
//let ste = STE "-e" vis [] ant cons [];    // Use this if yo want circuit GUI

let ok = get_ste_result ste "strong";

ok;

