//-------------------------------------------------------------------
// Copyright 2020 Carl-Johan Seger
// SPDX-License-Identifier: Apache-2.0
//-------------------------------------------------------------------

//==========================================================================
//
// Simple example of:
//		Scalar simulation
//		Symbolic simulation
//		Abstract symbolic simulation
//
//==========================================================================
load "ste.fl";

let simple =
    bit_input clk.
    bit_input a b c.
    bit_output o.
    bit_internal tmp mid.
    CELL "simple" [
	re_ff clk tmp mid,
	o <- '~' mid,
	tmp <- a '&' (b '|' c)
];

let ckt = pexlif2fsm (simple 'clk 'a 'b 'c 'o);

let vis = STE_debug ckt;

vis;

let ant = 
	  "clk" is_clock 4
	and
	  "a" is "1" for 1 cycle followed_by
		 "1" for 1 cycle followed_by
		 "0" for 1 cycle
	and 
	  "b" is "0" for 1 cycle followed_by
		 "0" for 1 cycle followed_by
		 "1" for 1 cycle
	and 
	  "c" is "1" for 1 cycle followed_by
		 "0" for 1 cycle followed_by
		 "1" for 1 cycle
;
STE "-e" vis [] ant [] [];

let ant =
	  "clk" is_clock 3
	and
	  "a" is "A" for 1 cycle followed_by
		 "K" for 1 cycle
	and 
	  "b" is "B" for 1 cycle followed_by
		 "L" for 1 cycle
	and 
	  "c" is "C" for 1 cycle followed_by
		 "M" for 1 cycle
;
STE "-e" vis [] ant [] [];

let ant =
	  "clk" is_clock 3
	and
	  "a" is "1" for 1 cycle followed_by
		 "rK" for 1 cycle
	and 
	  "b" is "rB" for 1 cycle followed_by
		 "bL" for 1 cycle
	and 
	  "c" is "rC" for 1 cycle followed_by
		 "bM" for 1 cycle
;
STE "-e" vis [] ant [] [];
