// myadder (autogenerated)

cload "ste.fl";

TYPE "word" 16;

ENUM "myadder_state" [
    "S__MAIN__0",
    "DONE"
];


let myadder = 
    // common
    // input-output
    bit_input clk.
    bit_input reset.
    bit_input req.
    bit_output ack.
    word_input i__x.
    word_input i__y.
    word_output o__z.
    // internal
    bit_internal eclk.
    bit_internal ereset.
    bit_internal advance.
    bit_internal hold.
    bit_internal running.
    bit_internal update.
    bit_internal not__done.
    bit_internal not__init.
    bit_internal init.
    bit_internal is__S__MAIN__0.
    bit_internal is__DONE.
    myadder_state_internal state__myadder.
    word_internal l__main__x.
    word_internal tmp__l__main__x.
    word_internal l__main__y.
    word_internal tmp__l__main__y.
    word_internal l__main__z.
    myadder_state_internal ret__main.
    myadder_state_internal tmp__ret__main.
    CELL "draw_hier myadder" [
        "control" ::: re_ff_reset eclk ereset ((not__init '&' not__done) '|' update) not__init,
        "statemachine" ::: re_ff_en_reset eclk (update '|' (is__DONE '&' ('~' req))) ereset (IF is__DONE THEN S__MAIN__0 ELSE (IF is__S__MAIN__0 THEN ret__main ELSE ({'0::myadder_state}))) state__myadder,
        "datapath" ::: re_ff_en eclk (init '&' update) (IF init THEN i__x ELSE ({'0::word})) tmp__l__main__x,
        "datapath" ::: re_ff_en eclk (init '&' update) (IF init THEN i__y ELSE ({'0::word})) tmp__l__main__y,
        "datapath" ::: re_ff_en eclk (is__S__MAIN__0 '&' update) (IF is__S__MAIN__0 THEN (l__main__x '+' l__main__y) ELSE ({'0::word})) l__main__z,
        "datapath" ::: re_ff_en eclk (init '&' update) (IF init THEN DONE ELSE ({'0::myadder_state})) tmp__ret__main,
        "handshake" ::: ack <<-- is__DONE,
        "control" ::: advance <<-- running,
        "clkreset" ::: eclk <<-- clk,
        "clkreset" ::: ereset <<-- reset,
        "control" ::: hold <<-- ('~' advance),
        "control" ::: init <<-- ('~' not__init),
        "control" ::: is__DONE <<-- (state__myadder '=' DONE),
        "control" ::: is__S__MAIN__0 <<-- (state__myadder '=' S__MAIN__0),
        "datapath" ::: l__main__x <<-- (IF init THEN i__x ELSE tmp__l__main__x),
        "datapath" ::: l__main__y <<-- (IF init THEN i__y ELSE tmp__l__main__y),
        "control" ::: not__done <<-- ('~' is__DONE),
        "datapath" ::: o__z <<-- l__main__z,
        "datapath" ::: ret__main <<-- (IF init THEN DONE ELSE tmp__ret__main),
        "control" ::: running <<-- (req '&' not__done),
        "control" ::: update <<-- advance
];

bifrost_simplify myadder;


let examine_myadder = STE_debug (pexlif2fsm (myadder 'clk 'reset 'req 'ack 'i__x 'i__y 'o__z));

VIS myadder;
