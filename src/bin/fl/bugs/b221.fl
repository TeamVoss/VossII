load "ste.fl";

//update_vossrc "DRAW-FULL-STATEMENTS" "YES";
//update_vossrc "ACCURATE-HIERARCHY-VISUALIZATION" "YES";
//update_vossrc "VERBOSE-FSM-PRINT" "YES";

TYPE "byte" 8;

let foo =
    bit_input a.
    bit_output b.
    CELL "foo"
    [
    b <- a
];

let tst =
    bit_input	clk.
    bit_input	reset.
    bit_input	inc.
    byte_output	addr.
    byte_output	out.
    bit_internal nclk.
    CELL "draw_hier tst" [
        "#####a#####"::: STATE clk addr [
            reset   --- '1,
            inc --- (addr '+' '1)
        ],
	"#####b#####"::: ASSERT "inc_reset_mutex" ('~' (reset '&' inc)),
	foo clk nclk,
	"#####c#####"::: re_ff nclk (addr '-' '1) out
];

//pcompile tst;


let p = tst 'clk 'rrreset 'inc 'addr 'out;
p fseq 1;

let p = tst 'clk 'rrreset 'inc 'addr 'out;
p fseq 1;

let p = tst 'clk '0 'inc 'addr 'out;
p fseq 1;

p;

//Emit_ASCII_pexlif "_Z1" p;

let ckt = pexlif2fsm p;
ckt;

let v = STE_debug ckt;
v;


let ant =
    "clk" is_clock 20
  and
    "reset" is 1 in_cycle 1 otherwise 0 until 20 cycles
  and
    "inc" is 0 for 2 cycles followed_by
	     1 for 1 cycle followed_by 
	     1 for 1 cycle followed_by 
	     0 for 1 cycle followed_by 
	     0 for 1 cycle followed_by 
	     0 for 1 cycle followed_by 
	     1 for 1 cycle followed_by 
	     1 for 1 cycle followed_by 
	     1 for 1 cycle 
	    otherwise 0 until 20 cycles
;


//STE "-e" v [] ant [] [];

//let pp = re_ff 'clk {'new_state:: byte} 'state;
//let ckt = pexlif2fsm pp;
//ckt;


//STE_debug ckt;
