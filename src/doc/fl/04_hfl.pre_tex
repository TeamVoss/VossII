\section{Hardware Models}

An important part of the {\voss} system is its symbolic trajectory evaluation
(STE) formal verification engine.
Intuitively, STE is a generalization of a symbolic simulator in which the
Boolean domain has been extended to a lattice structure and thus
combines symbolic variables/expressions and lattice operations.
For the STE system to work, a model of some hardware is needed.
Currently, {\voss} provides two ways of getting such a model: 1) by reading in
a Verilog description using, a slightly extended, Yosys~\cite{yosys} system
or define the model directly in an extension of fl, called HFL.
Either way, an fl datatype called pexlif will be created first.
This datatype captures hierarchy, wire names, and RTL level assignments
(both instantaneous as well as delayed) of the hardware.
For further use, the pexlif is often compiled to a more
efficient model, called fsm.
We will return to this later.


\subsection{Pexlif}

The pexlif datatype is meant to be used to represent hardware modelled at
a register transfer level.
In other words, a pexlif model captures the design hierarchy (including
the wire names) as well as the zero-delay combinational parts and the
phase delay parts.
More specifically, the pexlif (and associated types) are defined as:
\begin{hol}
lettype pexlif =
        PINST 
            \{name::string\} 
            \{attrs::(string#string) list\}
            \{leaf::bool\}
            \{fa_inps:: (string#(string list)) list\}
            \{fa_outs:: (string#(string list)) list\}
            \{internals:: string list\}
            \{content::content\}
andlettype content = 
            P_HIER \{children::pexlif list\}
        |   P_LEAF \{fns::update_fn list\}
;
\end{hol}
where
\begin{hol}
lettype update_fn =
            W_UPDATE_FN \{lhs::wexpr\} \{rhs::wexpr\}
        |   W_PHASE_DELAY \{lhs::wexpr\} \{rhs::wexpr\}
;
\end{hol}

The word-level expressions (wexpr)%
\index{wexpr}
are defined as:
\begin{hol}
lettype wexpr =
            W_X \{sz::int\}
        |   W_CONST \{sz::int\} \{v::int\}
        |   W_NAMED_CONST \{name::string\} \{sz::int\} \{v::int\}
        |   W_VAR \{sz::int\} \{base::string\}
        |   W_EXPLICIT_VAR \{sz::int\} \{name::string\}
        |   W_AND \{a::wexpr\} \{b::wexpr\}
        |   W_OR \{a::wexpr\} \{b::wexpr\}
        |   W_NOT \{a::wexpr\} 
        |   W_EQ \{a::wexpr\} \{b::wexpr\}
        |   W_PRED \{name::string\} \{cond::wexpr\}
        |   W_GR \{a::wexpr\} \{b::wexpr\}
        |   W_ADD \{a::wexpr\} \{b::wexpr\}
        |   W_SUB \{a::wexpr\} \{b::wexpr\}
        |   W_MUL \{a::wexpr\} \{b::wexpr\}
        |   W_DIV \{a::wexpr\} \{b::wexpr\}
        |   W_MOD \{a::wexpr\} \{b::wexpr\}
        |   W_SHL \{a::wexpr\} \{b::wexpr\}
        |   W_SHR \{a::wexpr\} \{b::wexpr\}
        |   W_ASHR \{a::wexpr\} \{b::wexpr\}
        |   W_SX  \{sz::int\}  \{w::wexpr\}
        |   W_ZX  \{sz::int\}  \{w::wexpr\}
        |   W_ITE \{cond::wexpr\} \{t::wexpr\} \{e::wexpr\}
        |   W_SLICE \{indices::int list\} \{w::wexpr\}
        |   W_NAMED_SLICE \{name::string\} \{indices::int list\} \{w::wexpr\}
	|   W_UPDATE_NAMED_SLICE \{base::wexpr\}
                                 \{name::string\} \{indices::int list\} \{new::wexpr\}
        |   W_CAT \{parts::wexpr list\}
        |   W_MEM_READ \{info::mem\} \{mem::wexpr\} \{addr::wexpr\}
        |   W_MEM_WRITE \{info::mem\} \{mem::wexpr\} \{addr::wexpr\} \{data::wexpr\}
;
\end{hol}
where
\begin{hol}
lettype mem = MEM
                \{addr_size::int\}
                \{lines::int\}
                \{data_size::int\}
;
\end{hol}
and is used to represent the various expressions in an RTL model.

In the {\tt PINST} constructor, the name field is an arbitrary string.
However, the visualizer recognizes names that start with {\tt draw\_}.
For example, {\tt draw\_hier foo} will create a hierarchical box named {\tt foo}
that one can traverse into in the circuit visualizer.
Note that if the name starts with {\tt draw\_} but does not correspond
to any known drawing routine, the visualizer will likely misbehave at the
moment.  
The {\tt attrs} is a list of pairs of strings; attribute name and attribute
value.
The {\tt leaf} field is {\tt F} for hierarchical {\tt PINSTs} and {\tt T}
for leaves.
The {\tt fa\_inps} is a list of pairs where each pair is the ``inside name''
and a list of outside names. 
For example, {\tt [("a[4:0]", ["cout", "res[3:0]"])]} is a perfectly plausible
formal-actual input list.
Note that the size of the formal vector must be the same as the sum of the
sizes of the actual vectors.
The {\tt internals} is a list of node vectors for all the
intermediate wires used to create the connections between the child
{\tt PINSTs}.
The {\tt content} is either a list of {\tt PINSTs}, for a hierarchical 
module, or a list of update functions.

An update function is either a zero-delay update function or a phase
delay update function.
Both have a left-hand side expression for the driven signals and
an expression for what the signal should be driven to.
Not all constructors of {\tt wexpr} can be used as left-hand side expressions.
Only {\tt W\_VAR}, {\tt W\_EXPLICIT\_VAR}, {\tt W\_SLICE},
{\tt W\_NAMED\_SLICE}, and {\tt W\_CAT} are possible.


To illustrate a simple function operating over a pexlif, here is one
computing the number of (internal) wires in a model:
%%%START_CODE%%%%
let get_children (P_HIER ch) = ch
 /\ get_children (P_LEAF _) = []
;

letrec number_of_wires (PINST name opts leaf fa_inps fa_outs ints content) =
    let local = length (md_expand_vectors ints) in
    leaf => local |
    itlist (\pp. \r. number_of_wires pp+r) (get_children content) local
;
%%%END_CODE%%%%
A more interesting function might be one that extracts a sub circuit
based on its name:
%%%START_CODE%%%%
letrec extract_subckts target p =
    val (PINST name opts leaf fa_inps fa_outs ints content) = p in
    str_is_suffix target name => [p] |
    leaf => [] |
    flatmap (extract_subckts target) (get_children content)
;
%%%END_CODE%%%%
Here we used only the sufix of the name to match.

Our final example is a typical example of functions used to manipulate
the circuit hierarchy.
It takes a predicate and a pexlif and flattens the pexlif as long as the
stop-predicate does not evaluate to true.
%%%START_CODE%%%%
let flatten_pexlif stop_pred p =
    letrec do_flat sub pref p =
        let tr n = (assoc n sub) catch n in
        val (PINST name attrs leaf fa_inps fa_outs ints content) = p in
        leaf OR stop_pred p =>
            let tr_io (f,as) =
                let as' = md_merge_vectors (map tr (md_expand_vectors as)) in
                (f,as')
            in
            let fa_inps' = map tr_io fa_inps in
            let fa_outs' = map tr_io fa_outs in
            [(PINST name attrs leaf fa_inps' fa_outs' ints content)]
        |
            val (P_HIER children) = content in
            let mk_io_sub (f,as) =
                zip (md_expand_vector f) (map tr (md_expand_vectors as))
            in 
            let io_sub = flatmap mk_io_sub (fa_inps @ fa_outs) in
            let mk_int_sub f = 
                map (\n. n, sprintf "%s%s" pref n) (md_expand_vector f)
            in
            let int_sub = flatmap mk_int_sub ints in
            let sub' = io_sub @ int_sub in
            let prefs = map (sprintf "%si%d/" pref) (1 upto length children) in
            flat (map2 (do_flat sub') prefs children)
    in
    let children = do_flat [] "" p in
    let wires_used (PINST _ _ _ fa_inps fa_outs _ _) =
        md_expand_vectors (flatmap snd (fa_inps @ fa_outs))
    in
    let all = setify (flatmap wires_used children) in
    val (PINST name attrs _ fa_inps fa_outs _ _) = p in
    let ios = md_expand_vectors (flatmap snd (fa_inps @ fa_outs)) in
    let new_ints = md_extract_vectors (all subtract ios) in
    (PINST name attrs F fa_inps fa_outs new_ints (P_HIER children))
;   
%%%END_CODE%%%%

\subsection{HFL}

In order to model hardware efficiently and with type safety, a deeply
embedded hardware description language, called HFL, has been created.
Since it is deeply embedded in fl, one can use many/most of fl's mechanisms
for describing the hardware. 
For example, it is quite easy to define a hardware structure recursively.

There are two parts to HFL: 1) a set of functions to create hardware types,
and 2) functions (many with special binder fixity) for describing the hardware.

\subsubsection{HFL Types}

A hardware type is effectively a algebraic datatype in fl for which a number
of destructor, constructor, and misc. other functions have been created.
There are four basic ways of creating a hardware type:
TYPE\index{TYPE}, ENUM\index{ENUM}, STRUCT\index{STRUCT}, and
MEMORY\index{MEMORY}.
The ENUM and STRUCT have two versions depending on how much control is needed
to define the encoding.
More precisely:
\begin{hol}
TYPE typename size

ENUM typename [name]
ENUM typename [(name,encoding)]

STRUCT typename [(fieldname,type)]
STRUCT typename [(fieldname,type,indices)]

MEMORY typename [size] wordtype
\end{hol}

To illustrate how to declare such types and how to extract/update
fileds, consider the following simple example:
%%%START_CODE%%%%
load "ste.fl";  // Must be loaded for HFL

TYPE "byte" 8;
TYPE "addr" 8;
TYPE "pc" 29;
{'a::byte};
{'a::addr};
{'a::pc};
%%%END_CODE%%%%
Here we declared three simple hardware types for vectors of size 4 and 8
respectively.
Note that although both byte and addr are of size 8, they are different types
and thus
%%%START_CODE%%%%
{'1::byte} '+' {'1::byte};  // Ok
{'1::byte} '+' {'1::addr};  // Fails typechecking
%%%END_CODE%%%%

To continue the example with the two types of ENUM:
%%%START_CODE%%%%
ENUM "op" ["ADD", "JMP", "NOP"];
ENUM "state" [("INIT", 1), ("FETCH", 2), ("EXECUTE", 4), ("WB", 8)];
{'a::op};
{'a::state};
ADD;
NOP;
INIT;
WB;
is_FETCH 'a;
is_WB 'a;
%%%END_CODE%%%%
where the second type gives an explicit encoding.
Note that it is valid to give the same encoding to two different
constants (although definitely not recommended!).
Note also that evaluating this command will create (zero-arity) functions
for the enumerated constants.
In addition, there will be one predicate, named is\_<constant> for every
constant declared.
Note that these functions are overloaded (if needed) so that two different
ENUMs can have the same named constants.
It is up to the typechecking to resolve the usage so that the correct
encoding is used.
Sometimes, this will require a typecast.

Since enumerated types do not have any numerical value, it is
an error to try to perform arithmetic operations on them.
For example:
%%%START_CODE%%%%
ADD '+' JMP;
%%%END_CODE%%%%
fails.
(Note that since fl does not have dependent types, the failure is a
runtime failure triggered when the pexlif is built.)

The STRUCT function creates a bitvector as well as accessor functions for
the different fields.
The first version of STRUCT is simply useful when creating ``bundles'' of
other vectors.
For example:
%%%START_CODE%%%%
STRUCT "bundle" [("high","byte"),("low","byte")];
'a-->high;                          // Extract field
'a<--high ? '0xab;                  // Update field
'a<--high ? '0xab <-- low ? '0xba;  // Nested updates
%%%END_CODE%%%%
The more general STRUCT function allows the fields to overlap.
Since the system cannot easily determine the size of the resulting
type, the user has to give the size.
Also, each field now consists of three items: the name of the field,
the type of the field, and a list of indices in the vector that this
field refers to.
For example:
%%%START_CODE%%%%
STRUCT "opcode" 32 [
                    ("opcode", "op", [31,29]),  // Non-contiguous!
                    ("dest", "addr", (23--16)),
                    ("src1", "addr", (15--8)),
                    ("src2", "addr", (7--0)),
                    ("target", "pc", (28--0))
                    ]
;

'a-->opcode;
'a-->dest;
'a-->target;

'0<--opcode ? ADD
  <--dest   ? '0x1
  <--src1   ? '0x2
  <--src2   ? '0x3
;

'0<--opcode ? JMP
  <--target ? '0xabba
;
%%%END_CODE%%%%

Finally, the MEMORY construct is used to create, possibly multi-dimensional,
arrays.
When a MEMORY type ``foo'' is created, there are four additional functions
created:
\begin{hol}
read_foo  {mem:: foo} addr_1 addr_2 ... addr_n
write_foo {mem:: foo} addr_1 addr_2 ... addr_n new_data
Read_foo  {mem:: foo} addr_1 addr_2 ... addr_n out_name
Write_foo {mem:: foo} addr_1 addr_2 ... addr_n new_data new_mem
\end{hol}
The read\_foo takes a memory and a list of addresses (one for each dimension
of the memory) and returns the value in that memory location.
The write\_foo takes a memory and a list of addresses and a new data value
and returns the new memory in which the data at the selected address has been 
replaced with the new\_data.
The Read\_foo and Write\_foo functions are functions that create a pexlif
for the corresponding operation (and thus has a better visualization).
We will return to these later.

A simple example of MEMORY could be:
%%%START_CODE%%%%
MEMORY "regfile" [(10,"addr")] "byte";
{'a::regfile};
read_regfile 'a '0x3;
write_regfile 'a '0x0 '0xab;
write_regfile 'a '0x3 'd;
%%%END_CODE%%%%

A more complex example:
%%%START_CODE%%%%
MEMORY "array" [(4,"addr"),(5,"addr")] "byte";
{'a::array};
read_array 'a '0x3 '0x1;
write_array 'a '0x0 '0x0 '0xab;
write_array 'a '0x3 '0x2 'd;
%%%END_CODE%%%%

\subsubsection{HFL Expressions}

To make it more convenient to describe combinational circuits a small
embedded DSL has been created for expressions as well.
We have already shown some examples.
Basically, the following operators are available
\begin{hol}
Constants:
'23                 // Decimal number
'0x2fc00            // Hexadecimal number
'0b10010            // Binary number
'X                  // Unknown (Don't care) value

Variables:
'a                  // A single bit or simple vector depending on return type

Logical expressions:
'\~' e              // (Bitwise) negation
e1 '&' e2           // (Bitwise) AND
e1 '|' e2           // (Bitwise) OR
e1 '^' e2           // (Bitwise) XOR
e1 '<<' e2          // Shift-left
e1 '>>' e2          // Logical shift right
e1 '|>>' e2         // Arithmetic shift right
c '?' t ':' e       // If-then-else expression

Arithmetic expressions:
ZX e                // Zero extension
SX e                // Sign extension
e1 '+' e2           // Addition
e1 '-' e2           // Subtraction
e1 '*' e2           // Multiplication
e1 '/' e2           // Division
e1 '%' e2           // Modulus

Misc. operations:
e1 ++ e2            // Catenate two bitvectors
e1 ~~ i             // Select a single bit
e1 ~~~ l            // Select a range of bits
IF c THEN t ELSE e  // Alternative if-then-else
\end{hol}

\subsubsection{HFL Hierarchy Creation}

In order to manage the complexity of a design, almost all hardware is
defined in a hierarchical manner.
Thus, HFL provides a convenient way of defining modules and instantiating
such modules.

A module is generally defined as:
\begin{hol}
let module_name =
    // Inputs
    <type>_input    i1.
    ...
    <type>_input    ik.
    // Outputs
    <type>_output   o1.
    ...
    <type>_output   ol.
    // Internal signals
    <type>_internal m1.
    ...
    <type>_internal mn.
    CELL "xyz" [
	<assignments>
	<instantiations>
];
\end{hol}
Note that when a hardware type ``foo'' is created, there are (at least)
three additional functions created: foo\_input, foo\_output, and foo\_internal,
that are binder functions that makes it easy to declare inputs/outputs or
internal signals of this type.
However, there are also an input, output, and internal functions available
in which the signals declares will not be forced to have a particular type.
Depending on the context and use, the type checker will then possibly
restrict the use further.
Finally, there is also a list\_input and list\_output functions available
to declare signals that are (unrestricted) lists of signals.
In addition, there is a list\_internal function that takes an initial
integer expression that denotes how many signals should be in this list
of internal signals.

For example:
%%%START_CODE%%%%
let add3 =
    byte_input	    a.
    byte_input	    b.
    byte_input	    c.
    byte_output	    o.
    byte_internal   m.
    CELL "draw_hier add3" [
	m <- a '+' b,
	o <- m '+' c
];
%%%END_CODE%%%%
which might be used as:
%%%START_CODE%%%%
let add9 =
    byte_input	    i1 i2 i3 i4 i5 i6 i7 i8 i9.
    byte_output	    o.
    byte_internal   m1 m2 m3.
    CELL "draw_hier add6" [
	add3 i1 i2 i3 m1,
	add3 i4 i5 i6 m2,
	add3 i7 i8 i9 m3,
	add3 m1 m2 m3 o
];
%%%END_CODE%%%%
A few comments.
First, as one can see, the input binder allows multiple signals
(of the same type) to be declared at the same time.
Second, the ``name'' given as first argument to the CELL function is
used in visualization of the module.
We will return to that later.
In general, if the name starts with "draw\_", it is used by the visualization
system (with an associated tcl/tk drawing function).

Of course, the above code created a circuit to add 9 byte sized inputs.
If we instead define the functions as:
%%%START_CODE%%%%
let add3 =
    input      a.
    input      b.
    input      c.
    output     o.   
    internal   m.   
    CELL "draw_hier add3" [
        m <- a '+' b,
        o <- m '+' c
];

let add9 =
    input      i1 i2 i3 i4 i5 i6 i7 i8 i9.
    output     o.
    internal   m1 m2 m3.
    CELL "draw_hier add6" [
        add3 i1 i2 i3 m1,
        add3 i4 i5 i6 m2,
        add3 i7 i8 i9 m3,
        add3 m1 m2 m3 o
];
%%%END_CODE%%%%
we have created a module that will add up 9 elements of any (arithmetic)
type.

Of course, we may want to create a module that can be used to add up
any number of inputs.
The first version might look like:
%%%START_CODE%%%%
letrec add_list =
    list_input  il.
    output      o.
    internal    m.
    CELL "draw_hier add_list" (
        length il = 1 => [o <- (hd il)] |
        [
            add_list (tl il) m,
            o <- (hd il) '+' m
        ]
);
%%%END_CODE%%%%
Here we see that we can use standard fl constructs to recursively
build up the circuit.

Of course, the last version will generate a long chain of adders which
will likely be too slow in practice.
Thus one would typically want to create a tree structured adder circuit
so that the maximum delay will grow logarithmically with the number of
terms to be added.
This can be accomplished as:
%%%START_CODE%%%%
letrec add_tree =
    list_input  il.     
    output      o.
    internal    m1 m2.
    CELL "draw_hier add_tree" (
        let l = length il in
        l = 1 => [o <- (hd il)] |
        let high = firstn (l/2) il in
        let low  = butfirstn (l/2) il in
        [
            add_tree high m1,
            add_tree low m2,
            o <- m1 '+' m2
        ]
);
%%%END_CODE%%%%

\subsubsection{HFL High-level Constructs}

Since certain types of structures are very common in hardware, functions
have been created to creating such structures.
Currently there are high-level constructs for
\begin{hol}
    CASE	    -- case statements
    STATE	    -- simple compute state machine
    SELECT	    -- select a subfield based on an address
    DECODER	    -- decode an input vector
    DECODER_LIST    -- similar to DECODER but output is list of bit signals
    EN_DECODER	    -- decode an input vector but with enable signal
    EN_DECODER_LIST -- similar to DECODER but output is list of bit signals
    Moore_FSM	    -- a Moore style finite state machine
\end{hol}

To illustrate the Moore\_FSM primitive (which is the most complex),
consider the following example:
%%%START_CODE%%%%
// The states of the finite state machine
ENUM "my_fsm"  ["IDLE", "REQ", "MISS", "UPDATE", "HIT"];


let fsm_example =
    bit_input       clk reset.
    bit_input       req.
    bit_input       hit.
    bit_input       valid.
    bit_output      need_data.
    bit_output      ready.
    //
    my_fsm_internal    state.
    CELL "draw_hier CACHE" [
        (Moore_FSM "CACHE_FSM" clk state
            (reset, IDLE) [
                IDLE --- req --- REQ,
                REQ  --- hit --- HIT,
                REQ  --- '~' hit --- MISS,
                MISS --- '~' valid --- MISS,
                MISS --- valid --- UPDATE,
                UPDATE --- default --- HIT,
                HIT  --- default --- IDLE
        ]),
        need_data <- is_MISS state,
        ready <- is_HIT state
];
%%%END_CODE%%%%
It should be pointed out that the Moore\_FSM function also creates
an explicit visualization of the finite state machine that can be seen
by clicking on the FSM symbol in the circuit browser.
We will return to this later.


\subsection{Verilog models}

{\voss} uses the Yosys system to provide a fairly complete Verilog 2005
parser, type checker, elaborator, and lightweight synthesis path.
As a result, there is an fl function, called verilog2pexlif%
\index{verilog2pexlif}
that reads in Verilog file(s) and converts the model into a pexlif.
In order to use it though, a standard library called "ste.fl" must first
be loaded.

For example, if there are two files small.v and small\_lib.v in the
directory verilog\_examples, that look like:
\begin{hol}
// File: small_lib.v
module  mux2(
    din_0      , // Mux first input
    din_1      , // Mux Second input
    sel        , // Select input
    mux_out      // Mux output
);
//-----------Input Ports---------------
input din_0, din_1, sel ;
//-----------Output Ports---------------
output mux_out;
//------------Internal Variables--------
reg  mux_out;
//-------------Code Starts Here---------
always @*
begin : MUX
 case(sel ) 
    1'b0 : mux_out = din_0;
    1'b1 : mux_out = din_1;
 endcase 
end
endmodule
\end{hol}
and
\begin{hol}
// File: small.v
module  mux4(
    din_0      , // Mux first input
    din_1      , // Mux Second input
    din_2      , // Mux Third input
    din_3      , // Mux Fourth input
    sel        , // Select input
    mux_out      // Mux output
);
//-----------Input Ports---------------
input din_0, din_1, din_2, din_3 ;
input [1:0] sel ;
//-----------Output Ports---------------
output mux_out;
//------------Internal Variables--------
reg  mux_out;
reg  mid01, mid23;
//-------------Code Starts Here---------
    mux2 mux1  (.din_0(din_0), .din_1(din_1), .sel(sel[0]), .mux_out(mid01));
    mux2 mux2  (.din_0(din_2), .din_1(din_3), .sel(sel[0]), .mux_out(mid23));
    mux2 mux12 (.din_0(mid01), .din_1(mid23), .sel(sel[1]), .mux_out(mux_out));

endmodule
\end{hol}
We could now do:
%%%START_CODE%%%%
load "ste.fl";
let p = verilog2pexlif "-Iverilog_examples"         // Yosys flags
                       "mux4"                       // Top-level module
                        ["small.v", "small_lib.v"]  // Files to read & compile
                        []                          // Additional files needed
;
%%%END_CODE%%%%
followed by:
%%%START_CODE%%%%
number_of_wires p;
%%%END_CODE%%%%
or
%%%START_CODE%%%%
extract_subckts "not" p;
%%%END_CODE%%%%

\subsection{fsm}

Although the pexlif format is convenient for representing a circuit, it is
not very efficient for simulation.
Thus, an internal datatype, called fsm, is used.
A pexlif can be converted to an fsm by simply calling pexlif2fsm.
%%%START_CODE%%%%
let ckt = pexlif2fsm p;
ckt;
%%%END_CODE%%%%

There a number of functions that operate on the fsm datatype.
For example:
%%%START_CODE%%%%
// Get a list of all inputs to the circuit
inputs ckt;

// Get a list of all outputs of the circuit
outputs ckt;

// Return the immediate fanin from a node in a circuit.
fanin ckt "mux_out";

// Return the immediate fanout from a node in a circuit.
fanout ckt "mid01";

// Find the full vector given a node in it.
node2vector ckt "sel[0]";

// Use fanin_dfs to recursively go back until a toplevel node is encountered
let top_fanin ckt nd =
    let toplevel n = NOT (str_is_substr "/" n) in
    let all_inps = fanin_dfs ckt toplevel [nd] in
    let top_level_inps = filter toplevel all_inps in
    top_level_inps subtract [nd]
;

top_fanin ckt "mux_out";
%%%END_CODE%%%%

As usual, use the help system to find all functions that can be applied to
an fsm.
